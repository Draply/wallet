{"ast":null,"code":"\"use strict\";\n/**\n * # Truffle Codec\n *\n * This module provides low-level decoding and encoding functionality for\n * Solidity and the Solidity ABI.  Many parts of this module are intended\n * primarily for internal use by Truffle and so remain largely undocumented,\n * but some of its types are also output by @truffle/decoder, which provides\n * a higher-level interface to much of this module's functionality.\n *\n * ## If you're here from Truffle Decoder or Truffle Encoder\n *\n * If you're coming here from [[@truffle/decoder]] or [[@truffle/encoder]],\n * you probably just want to know about the parts that are relevant to you.\n * These are:\n *\n * * The \"data\" category (specifically [[Format]])\n * * The \"output\" and \"enumerations\" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)\n * * The \"errors\" category (specifically [[UnknownUserDefinedTypeError]])\n *\n * Note that the data category is largely scarce in\n * documentation, although that's because it's largely self-explanatory.\n *\n * If you're not just here from Truffle Decoder or Encoder, but are actually\n * interested in the lower-level workings, read on.\n *\n * ## How this module differs from Truffle Decoder and Encoder\n *\n * Unlike Truffle Decoder and Encoder, this library makes no network connections\n * and avoids dependencies that do.  Instead, its decoding functionality\n * is generator-based; calling one of the decoding functions returns a\n * generator.  This generator's `next()` function may return a finished\n * result, or it may return a request for more information.  It is up to\n * the caller to fulfill these requests -- say, by making a network\n * connection of its own.  This is how @truffle/decoder and @truffle/encoder\n * work; @truffle/codec makes requests, while Decoder and Encoder fulfill them by\n * looking up the necessary information on the blockchain.\n *\n * This library also provides additional functionality beyond what's used by\n * Truffle Decoder and Encoder.  In particular, this library also exists to\n * support Truffle Debugger, and so it provides decoding functionality not just\n * for transactions, logs, and state variables, but also for Solidity variables\n * during transaction execution, including circularity detection for memroy\n * structures.  It includes functionality for decoding Solidity's internal\n * function pointers, which the debugger uses, but which Truffle Decoder\n * currently does not (although this is planned for the future).\n *\n * There is also functionality for decoding return values and revert messages\n * that goes beyond what's currently available in @truffle/decoder; this may get\n * a better interface in the future.\n *\n * ## How to use\n *\n * You should probably use [[@truffle/decoder]] or [[@truffle/encoder]]\n * instead, if your use case doesn't preclude it.  This module has little\n * documentation, where it has any at all, and it's likely that parts of its\n * interface may change (particularly regarding allocation).  That said, if you\n * truly need the functionality here, Truffle Decoder and Truffle Encoder can\n * perhaps serve as something of a reference implementation (and perhaps\n * Truffle Debugger as well, though that code is much harder to read or copy).\n *\n * @module @truffle/codec\n * @packageDocumentation\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wrap = exports.Export = exports.Evm = exports.Conversion = exports.Contexts = exports.Compilations = exports.Compiler = exports.Ast = exports.AstConstant = exports.Storage = exports.Stack = exports.Special = exports.Memory = exports.MappingKey = exports.Topic = exports.AbiData = exports.Bytes = exports.Basic = exports.abifyReturndataDecoding = exports.abifyLogDecoding = exports.abifyCalldataDecoding = exports.RepeatCompilationIdError = exports.NoProjectInfoError = exports.StopDecodingError = exports.DecodingError = exports.decodeRevert = exports.decodeReturndata = exports.decodeCalldata = exports.decodeEvent = exports.decodeVariable = exports.Format = void 0; //So, what shall codec export...?\n//First: export the data format\n\nconst Format = __importStar(require(\"./format\"));\n\nexports.Format = Format; //now... various low-level stuff we want to export!\n//the actual decoding functions and related errors\n\nvar core_1 = require(\"./core\");\n\nObject.defineProperty(exports, \"decodeVariable\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeVariable;\n  }\n});\nObject.defineProperty(exports, \"decodeEvent\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeEvent;\n  }\n});\nObject.defineProperty(exports, \"decodeCalldata\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeCalldata;\n  }\n});\nObject.defineProperty(exports, \"decodeReturndata\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeReturndata;\n  }\n});\nObject.defineProperty(exports, \"decodeRevert\", {\n  enumerable: true,\n  get: function () {\n    return core_1.decodeRevert;\n  }\n});\n\nvar errors_1 = require(\"./errors\");\n\nObject.defineProperty(exports, \"DecodingError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.DecodingError;\n  }\n});\nObject.defineProperty(exports, \"StopDecodingError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.StopDecodingError;\n  }\n});\nObject.defineProperty(exports, \"NoProjectInfoError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.NoProjectInfoError;\n  }\n});\nObject.defineProperty(exports, \"RepeatCompilationIdError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.RepeatCompilationIdError;\n  }\n});\n\n__exportStar(require(\"./common\"), exports);\n\nvar abify_1 = require(\"./abify\");\n\nObject.defineProperty(exports, \"abifyCalldataDecoding\", {\n  enumerable: true,\n  get: function () {\n    return abify_1.abifyCalldataDecoding;\n  }\n});\nObject.defineProperty(exports, \"abifyLogDecoding\", {\n  enumerable: true,\n  get: function () {\n    return abify_1.abifyLogDecoding;\n  }\n});\nObject.defineProperty(exports, \"abifyReturndataDecoding\", {\n  enumerable: true,\n  get: function () {\n    return abify_1.abifyReturndataDecoding;\n  }\n}); // data locations - common\n\nconst Basic = __importStar(require(\"./basic\"));\n\nexports.Basic = Basic;\n\nconst Bytes = __importStar(require(\"./bytes\"));\n\nexports.Bytes = Bytes; // data locations - abi\n\nconst AbiData = __importStar(require(\"./abi-data\"));\n\nexports.AbiData = AbiData;\n\nconst Topic = __importStar(require(\"./topic\"));\n\nexports.Topic = Topic; // data locations - solidity\n\nconst MappingKey = __importStar(require(\"./mapping-key\"));\n\nexports.MappingKey = MappingKey;\n\nconst Memory = __importStar(require(\"./memory\"));\n\nexports.Memory = Memory;\n\nconst Special = __importStar(require(\"./special\"));\n\nexports.Special = Special;\n\nconst Stack = __importStar(require(\"./stack\"));\n\nexports.Stack = Stack;\n\nconst Storage = __importStar(require(\"./storage\"));\n\nexports.Storage = Storage;\n\nconst AstConstant = __importStar(require(\"./ast-constant\"));\n\nexports.AstConstant = AstConstant;\n\nconst Ast = __importStar(require(\"./ast\"));\n\nexports.Ast = Ast;\n\nconst Compiler = __importStar(require(\"./compiler\"));\n\nexports.Compiler = Compiler;\n\nconst Compilations = __importStar(require(\"./compilations\"));\n\nexports.Compilations = Compilations;\n\nconst Contexts = __importStar(require(\"./contexts\"));\n\nexports.Contexts = Contexts;\n\nconst Conversion = __importStar(require(\"./conversion\"));\n\nexports.Conversion = Conversion;\n\nconst Evm = __importStar(require(\"./evm\"));\n\nexports.Evm = Evm;\n\nconst Export = __importStar(require(\"./export\"));\n\nexports.Export = Export;\n\nconst Wrap = __importStar(require(\"./wrap\"));\n\nexports.Wrap = Wrap;","map":{"version":3,"sources":["../../lib/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * # Truffle Codec\n *\n * This module provides low-level decoding and encoding functionality for\n * Solidity and the Solidity ABI.  Many parts of this module are intended\n * primarily for internal use by Truffle and so remain largely undocumented,\n * but some of its types are also output by @truffle/decoder, which provides\n * a higher-level interface to much of this module's functionality.\n *\n * ## If you're here from Truffle Decoder or Truffle Encoder\n *\n * If you're coming here from [[@truffle/decoder]] or [[@truffle/encoder]],\n * you probably just want to know about the parts that are relevant to you.\n * These are:\n *\n * * The \"data\" category (specifically [[Format]])\n * * The \"output\" and \"enumerations\" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)\n * * The \"errors\" category (specifically [[UnknownUserDefinedTypeError]])\n *\n * Note that the data category is largely scarce in\n * documentation, although that's because it's largely self-explanatory.\n *\n * If you're not just here from Truffle Decoder or Encoder, but are actually\n * interested in the lower-level workings, read on.\n *\n * ## How this module differs from Truffle Decoder and Encoder\n *\n * Unlike Truffle Decoder and Encoder, this library makes no network connections\n * and avoids dependencies that do.  Instead, its decoding functionality\n * is generator-based; calling one of the decoding functions returns a\n * generator.  This generator's `next()` function may return a finished\n * result, or it may return a request for more information.  It is up to\n * the caller to fulfill these requests -- say, by making a network\n * connection of its own.  This is how @truffle/decoder and @truffle/encoder\n * work; @truffle/codec makes requests, while Decoder and Encoder fulfill them by\n * looking up the necessary information on the blockchain.\n *\n * This library also provides additional functionality beyond what's used by\n * Truffle Decoder and Encoder.  In particular, this library also exists to\n * support Truffle Debugger, and so it provides decoding functionality not just\n * for transactions, logs, and state variables, but also for Solidity variables\n * during transaction execution, including circularity detection for memroy\n * structures.  It includes functionality for decoding Solidity's internal\n * function pointers, which the debugger uses, but which Truffle Decoder\n * currently does not (although this is planned for the future).\n *\n * There is also functionality for decoding return values and revert messages\n * that goes beyond what's currently available in @truffle/decoder; this may get\n * a better interface in the future.\n *\n * ## How to use\n *\n * You should probably use [[@truffle/decoder]] or [[@truffle/encoder]]\n * instead, if your use case doesn't preclude it.  This module has little\n * documentation, where it has any at all, and it's likely that parts of its\n * interface may change (particularly regarding allocation).  That said, if you\n * truly need the functionality here, Truffle Decoder and Truffle Encoder can\n * perhaps serve as something of a reference implementation (and perhaps\n * Truffle Debugger as well, though that code is much harder to read or copy).\n *\n * @module @truffle/codec\n * @packageDocumentation\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Wrap = exports.Export = exports.Evm = exports.Conversion = exports.Contexts = exports.Compilations = exports.Compiler = exports.Ast = exports.AstConstant = exports.Storage = exports.Stack = exports.Special = exports.Memory = exports.MappingKey = exports.Topic = exports.AbiData = exports.Bytes = exports.Basic = exports.abifyReturndataDecoding = exports.abifyLogDecoding = exports.abifyCalldataDecoding = exports.RepeatCompilationIdError = exports.NoProjectInfoError = exports.StopDecodingError = exports.DecodingError = exports.decodeRevert = exports.decodeReturndata = exports.decodeCalldata = exports.decodeEvent = exports.decodeVariable = exports.Format = void 0;\n//So, what shall codec export...?\n//First: export the data format\nconst Format = __importStar(require(\"./format\"));\nexports.Format = Format;\n//now... various low-level stuff we want to export!\n//the actual decoding functions and related errors\nvar core_1 = require(\"./core\");\nObject.defineProperty(exports, \"decodeVariable\", { enumerable: true, get: function () { return core_1.decodeVariable; } });\nObject.defineProperty(exports, \"decodeEvent\", { enumerable: true, get: function () { return core_1.decodeEvent; } });\nObject.defineProperty(exports, \"decodeCalldata\", { enumerable: true, get: function () { return core_1.decodeCalldata; } });\nObject.defineProperty(exports, \"decodeReturndata\", { enumerable: true, get: function () { return core_1.decodeReturndata; } });\nObject.defineProperty(exports, \"decodeRevert\", { enumerable: true, get: function () { return core_1.decodeRevert; } });\nvar errors_1 = require(\"./errors\");\nObject.defineProperty(exports, \"DecodingError\", { enumerable: true, get: function () { return errors_1.DecodingError; } });\nObject.defineProperty(exports, \"StopDecodingError\", { enumerable: true, get: function () { return errors_1.StopDecodingError; } });\nObject.defineProperty(exports, \"NoProjectInfoError\", { enumerable: true, get: function () { return errors_1.NoProjectInfoError; } });\nObject.defineProperty(exports, \"RepeatCompilationIdError\", { enumerable: true, get: function () { return errors_1.RepeatCompilationIdError; } });\n__exportStar(require(\"./common\"), exports);\nvar abify_1 = require(\"./abify\");\nObject.defineProperty(exports, \"abifyCalldataDecoding\", { enumerable: true, get: function () { return abify_1.abifyCalldataDecoding; } });\nObject.defineProperty(exports, \"abifyLogDecoding\", { enumerable: true, get: function () { return abify_1.abifyLogDecoding; } });\nObject.defineProperty(exports, \"abifyReturndataDecoding\", { enumerable: true, get: function () { return abify_1.abifyReturndataDecoding; } });\n// data locations - common\nconst Basic = __importStar(require(\"./basic\"));\nexports.Basic = Basic;\nconst Bytes = __importStar(require(\"./bytes\"));\nexports.Bytes = Bytes;\n// data locations - abi\nconst AbiData = __importStar(require(\"./abi-data\"));\nexports.AbiData = AbiData;\nconst Topic = __importStar(require(\"./topic\"));\nexports.Topic = Topic;\n// data locations - solidity\nconst MappingKey = __importStar(require(\"./mapping-key\"));\nexports.MappingKey = MappingKey;\nconst Memory = __importStar(require(\"./memory\"));\nexports.Memory = Memory;\nconst Special = __importStar(require(\"./special\"));\nexports.Special = Special;\nconst Stack = __importStar(require(\"./stack\"));\nexports.Stack = Stack;\nconst Storage = __importStar(require(\"./storage\"));\nexports.Storage = Storage;\nconst AstConstant = __importStar(require(\"./ast-constant\"));\nexports.AstConstant = AstConstant;\nconst Ast = __importStar(require(\"./ast\"));\nexports.Ast = Ast;\nconst Compiler = __importStar(require(\"./compiler\"));\nexports.Compiler = Compiler;\nconst Compilations = __importStar(require(\"./compilations\"));\nexports.Compilations = Compilations;\nconst Contexts = __importStar(require(\"./contexts\"));\nexports.Contexts = Contexts;\nconst Conversion = __importStar(require(\"./conversion\"));\nexports.Conversion = Conversion;\nconst Evm = __importStar(require(\"./evm\"));\nexports.Evm = Evm;\nconst Export = __importStar(require(\"./export\"));\nexports.Export = Export;\nconst Wrap = __importStar(require(\"./wrap\"));\nexports.Wrap = Wrap;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}