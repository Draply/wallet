{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapWithCases = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:wrap:dispatch\");\n\nconst Format = __importStar(require(\"../format\"));\n\nconst errors_1 = require(\"./errors\");\n\nfunction* wrapWithCases(dataType, input, wrapOptions, cases) {\n  let bestError;\n  const specificityFloor = wrapOptions.specificityFloor || 0;\n\n  for (const caseFn of cases) {\n    try {\n      return yield* caseFn(dataType, input, Object.assign(Object.assign({}, wrapOptions), {\n        specificityFloor: 0\n      }));\n    } catch (error) {\n      if (!(error instanceof errors_1.TypeMismatchError)) {\n        //rethrow unexpected errors\n        throw error;\n      } else if (!bestError || error.specificity > bestError.specificity) {\n        bestError = error;\n      }\n    }\n  } //if we've made it this far, no case has matched\n\n\n  if (bestError && bestError.specificity < specificityFloor) {\n    bestError.specificity = specificityFloor; //mutating this should be fine, right?\n  }\n\n  throw bestError || new errors_1.TypeMismatchError( //last-resort error\n  dataType, input, wrapOptions.name, specificityFloor, //it doesn't matter, but we'll make this error lowest specificity\n  `Input for ${wrapOptions.name} was not recognizable as type ${Format.Types.typeStringWithoutLocation(dataType)}`); //(note: we don't actually want to rely on the last-resort error, we'll\n  //instead prefer last-resort cases that just throw an error so we can get\n  //more specific messages, but I'm including this anyway just to be certain)\n}\n\nexports.wrapWithCases = wrapWithCases;","map":{"version":3,"sources":["../../../lib/wrap/dispatch.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAM,KAAK,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAY,qBAAZ,CAAd;;AAEA,MAAA,MAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAIA,UAAiB,aAAjB,CAKE,QALF,EAME,KANF,EAOE,WAPF,EAQE,KARF,EAQiD;AAE/C,MAAI,SAAJ;AACA,QAAM,gBAAgB,GAAG,WAAW,CAAC,gBAAZ,IAAgC,CAAzD;;AACA,OAAK,MAAM,MAAX,IAAqB,KAArB,EAA4B;AAC1B,QAAI;AACF,aAAO,OAAO,MAAM,CAClB,QADkB,EAElB,KAFkB,EAEb,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,WADA,CAAA,EACW;AAAE,QAAA,gBAAgB,EAAE;AAApB,OADX,CAFa,CAApB;AAKD,KAND,CAME,OAAO,KAAP,EAAc;AACd,UAAI,EAAE,KAAK,YAAY,QAAA,CAAA,iBAAnB,CAAJ,EAA2C;AACzC;AACA,cAAM,KAAN;AACD,OAHD,MAGO,IAAI,CAAC,SAAD,IAAc,KAAK,CAAC,WAAN,GAAoB,SAAS,CAAC,WAAhD,EAA6D;AAClE,QAAA,SAAS,GAAG,KAAZ;AACD;AACF;AACF,GAnB8C,CAoB/C;;;AACA,MAAI,SAAS,IAAI,SAAS,CAAC,WAAV,GAAwB,gBAAzC,EAA2D;AACzD,IAAA,SAAS,CAAC,WAAV,GAAwB,gBAAxB,CADyD,CACf;AAC3C;;AACD,QAAM,SAAS,IAAI,IAAI,QAAA,CAAA,iBAAJ,EAAuB;AACxC,EAAA,QADiB,EAEjB,KAFiB,EAGjB,WAAW,CAAC,IAHK,EAIjB,gBAJiB,EAIC;AAClB,eAAa,WAAW,CAAC,IAAI,iCAAiC,MAAM,CAAC,KAAP,CAAa,yBAAb,CAAuC,QAAvC,CAAgD,EAL7F,CAAnB,CAxB+C,CA+B/C;AACA;AACA;AACD;;AA1CD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapWithCases = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"codec:wrap:dispatch\");\nconst Format = __importStar(require(\"../format\"));\nconst errors_1 = require(\"./errors\");\nfunction* wrapWithCases(dataType, input, wrapOptions, cases) {\n    let bestError;\n    const specificityFloor = wrapOptions.specificityFloor || 0;\n    for (const caseFn of cases) {\n        try {\n            return yield* caseFn(dataType, input, Object.assign(Object.assign({}, wrapOptions), { specificityFloor: 0 }));\n        }\n        catch (error) {\n            if (!(error instanceof errors_1.TypeMismatchError)) {\n                //rethrow unexpected errors\n                throw error;\n            }\n            else if (!bestError || error.specificity > bestError.specificity) {\n                bestError = error;\n            }\n        }\n    }\n    //if we've made it this far, no case has matched\n    if (bestError && bestError.specificity < specificityFloor) {\n        bestError.specificity = specificityFloor; //mutating this should be fine, right?\n    }\n    throw bestError || new errors_1.TypeMismatchError(//last-resort error\n    dataType, input, wrapOptions.name, specificityFloor, //it doesn't matter, but we'll make this error lowest specificity\n    `Input for ${wrapOptions.name} was not recognizable as type ${Format.Types.typeStringWithoutLocation(dataType)}`);\n    //(note: we don't actually want to rely on the last-resort error, we'll\n    //instead prefer last-resort cases that just throw an error so we can get\n    //more specific messages, but I'm including this anyway just to be certain)\n}\nexports.wrapWithCases = wrapWithCases;\n//# sourceMappingURL=dispatch.js.map"]},"metadata":{},"sourceType":"script"}