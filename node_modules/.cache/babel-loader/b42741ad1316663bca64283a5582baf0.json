{"ast":null,"code":"const dangerousStrings = ['__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', '__proto__', 'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'apply', 'arguments', 'bind', 'call', 'caller', 'length', 'name', 'prototype', 'key', 'ref'];\n\nfunction computeCandidateString(dangerous, charArbitrary, stringSplitter) {\n  let candidate;\n\n  try {\n    candidate = stringSplitter(dangerous);\n  } catch (err) {\n    return undefined;\n  }\n\n  for (const entry of candidate) {\n    if (!charArbitrary.canShrinkWithoutContext(entry)) {\n      return undefined;\n    }\n  }\n\n  return candidate;\n}\n\nexport function createSlicesForString(charArbitrary, stringSplitter) {\n  const slicesForString = [];\n\n  for (const dangerous of dangerousStrings) {\n    const candidate = computeCandidateString(dangerous, charArbitrary, stringSplitter);\n\n    if (candidate !== undefined) {\n      slicesForString.push(candidate);\n    }\n  }\n\n  return slicesForString;\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/SlicesForStringBuilder.js"],"names":["dangerousStrings","computeCandidateString","dangerous","charArbitrary","stringSplitter","candidate","err","undefined","entry","canShrinkWithoutContext","createSlicesForString","slicesForString","push"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,CACrB,kBADqB,EAErB,kBAFqB,EAGrB,kBAHqB,EAIrB,kBAJqB,EAKrB,WALqB,EAMrB,aANqB,EAOrB,gBAPqB,EAQrB,eARqB,EASrB,sBATqB,EAUrB,gBAVqB,EAWrB,UAXqB,EAYrB,SAZqB,EAarB,OAbqB,EAcrB,WAdqB,EAerB,MAfqB,EAgBrB,MAhBqB,EAiBrB,QAjBqB,EAkBrB,QAlBqB,EAmBrB,MAnBqB,EAoBrB,WApBqB,EAqBrB,KArBqB,EAsBrB,KAtBqB,CAAzB;;AAwBA,SAASC,sBAAT,CAAgCC,SAAhC,EAA2CC,aAA3C,EAA0DC,cAA1D,EAA0E;AACtE,MAAIC,SAAJ;;AACA,MAAI;AACAA,IAAAA,SAAS,GAAGD,cAAc,CAACF,SAAD,CAA1B;AACH,GAFD,CAGA,OAAOI,GAAP,EAAY;AACR,WAAOC,SAAP;AACH;;AACD,OAAK,MAAMC,KAAX,IAAoBH,SAApB,EAA+B;AAC3B,QAAI,CAACF,aAAa,CAACM,uBAAd,CAAsCD,KAAtC,CAAL,EAAmD;AAC/C,aAAOD,SAAP;AACH;AACJ;;AACD,SAAOF,SAAP;AACH;;AACD,OAAO,SAASK,qBAAT,CAA+BP,aAA/B,EAA8CC,cAA9C,EAA8D;AACjE,QAAMO,eAAe,GAAG,EAAxB;;AACA,OAAK,MAAMT,SAAX,IAAwBF,gBAAxB,EAA0C;AACtC,UAAMK,SAAS,GAAGJ,sBAAsB,CAACC,SAAD,EAAYC,aAAZ,EAA2BC,cAA3B,CAAxC;;AACA,QAAIC,SAAS,KAAKE,SAAlB,EAA6B;AACzBI,MAAAA,eAAe,CAACC,IAAhB,CAAqBP,SAArB;AACH;AACJ;;AACD,SAAOM,eAAP;AACH","sourcesContent":["const dangerousStrings = [\n    '__defineGetter__',\n    '__defineSetter__',\n    '__lookupGetter__',\n    '__lookupSetter__',\n    '__proto__',\n    'constructor',\n    'hasOwnProperty',\n    'isPrototypeOf',\n    'propertyIsEnumerable',\n    'toLocaleString',\n    'toString',\n    'valueOf',\n    'apply',\n    'arguments',\n    'bind',\n    'call',\n    'caller',\n    'length',\n    'name',\n    'prototype',\n    'key',\n    'ref',\n];\nfunction computeCandidateString(dangerous, charArbitrary, stringSplitter) {\n    let candidate;\n    try {\n        candidate = stringSplitter(dangerous);\n    }\n    catch (err) {\n        return undefined;\n    }\n    for (const entry of candidate) {\n        if (!charArbitrary.canShrinkWithoutContext(entry)) {\n            return undefined;\n        }\n    }\n    return candidate;\n}\nexport function createSlicesForString(charArbitrary, stringSplitter) {\n    const slicesForString = [];\n    for (const dangerous of dangerousStrings) {\n        const candidate = computeCandidateString(dangerous, charArbitrary, stringSplitter);\n        if (candidate !== undefined) {\n            slicesForString.push(candidate);\n        }\n    }\n    return slicesForString;\n}\n"]},"metadata":{},"sourceType":"module"}