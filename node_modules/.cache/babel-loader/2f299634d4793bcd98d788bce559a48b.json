{"ast":null,"code":"import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\n\nfunction isSafeContext(context) {\n  return context !== undefined;\n}\n\nfunction toGeneratorValue(value) {\n  if (value.hasToBeCloned) {\n    return new Value(value.value_, {\n      generatorContext: value.context\n    }, () => value.value);\n  }\n\n  return new Value(value.value_, {\n    generatorContext: value.context\n  });\n}\n\nfunction toShrinkerValue(value) {\n  if (value.hasToBeCloned) {\n    return new Value(value.value_, {\n      shrinkerContext: value.context\n    }, () => value.value);\n  }\n\n  return new Value(value.value_, {\n    shrinkerContext: value.context\n  });\n}\n\nexport class WithShrinkFromOtherArbitrary extends Arbitrary {\n  constructor(generatorArbitrary, shrinkerArbitrary) {\n    super();\n    this.generatorArbitrary = generatorArbitrary;\n    this.shrinkerArbitrary = shrinkerArbitrary;\n  }\n\n  generate(mrng, biasFactor) {\n    return toGeneratorValue(this.generatorArbitrary.generate(mrng, biasFactor));\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.shrinkerArbitrary.canShrinkWithoutContext(value);\n  }\n\n  shrink(value, context) {\n    if (!isSafeContext(context)) {\n      return this.shrinkerArbitrary.shrink(value, undefined).map(toShrinkerValue);\n    }\n\n    if ('generatorContext' in context) {\n      return this.generatorArbitrary.shrink(value, context.generatorContext).map(toGeneratorValue);\n    }\n\n    return this.shrinkerArbitrary.shrink(value, context.shrinkerContext).map(toShrinkerValue);\n  }\n\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/WithShrinkFromOtherArbitrary.js"],"names":["Arbitrary","Value","isSafeContext","context","undefined","toGeneratorValue","value","hasToBeCloned","value_","generatorContext","toShrinkerValue","shrinkerContext","WithShrinkFromOtherArbitrary","constructor","generatorArbitrary","shrinkerArbitrary","generate","mrng","biasFactor","canShrinkWithoutContext","shrink","map"],"mappings":"AAAA,SAASA,SAAT,QAA0B,+CAA1B;AACA,SAASC,KAAT,QAAsB,2CAAtB;;AACA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC5B,SAAOA,OAAO,KAAKC,SAAnB;AACH;;AACD,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7B,MAAIA,KAAK,CAACC,aAAV,EAAyB;AACrB,WAAO,IAAIN,KAAJ,CAAUK,KAAK,CAACE,MAAhB,EAAwB;AAAEC,MAAAA,gBAAgB,EAAEH,KAAK,CAACH;AAA1B,KAAxB,EAA6D,MAAMG,KAAK,CAACA,KAAzE,CAAP;AACH;;AACD,SAAO,IAAIL,KAAJ,CAAUK,KAAK,CAACE,MAAhB,EAAwB;AAAEC,IAAAA,gBAAgB,EAAEH,KAAK,CAACH;AAA1B,GAAxB,CAAP;AACH;;AACD,SAASO,eAAT,CAAyBJ,KAAzB,EAAgC;AAC5B,MAAIA,KAAK,CAACC,aAAV,EAAyB;AACrB,WAAO,IAAIN,KAAJ,CAAUK,KAAK,CAACE,MAAhB,EAAwB;AAAEG,MAAAA,eAAe,EAAEL,KAAK,CAACH;AAAzB,KAAxB,EAA4D,MAAMG,KAAK,CAACA,KAAxE,CAAP;AACH;;AACD,SAAO,IAAIL,KAAJ,CAAUK,KAAK,CAACE,MAAhB,EAAwB;AAAEG,IAAAA,eAAe,EAAEL,KAAK,CAACH;AAAzB,GAAxB,CAAP;AACH;;AACD,OAAO,MAAMS,4BAAN,SAA2CZ,SAA3C,CAAqD;AACxDa,EAAAA,WAAW,CAACC,kBAAD,EAAqBC,iBAArB,EAAwC;AAC/C;AACA,SAAKD,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACH;;AACDC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmB;AACvB,WAAOb,gBAAgB,CAAC,KAAKS,kBAAL,CAAwBE,QAAxB,CAAiCC,IAAjC,EAAuCC,UAAvC,CAAD,CAAvB;AACH;;AACDC,EAAAA,uBAAuB,CAACb,KAAD,EAAQ;AAC3B,WAAO,KAAKS,iBAAL,CAAuBI,uBAAvB,CAA+Cb,KAA/C,CAAP;AACH;;AACDc,EAAAA,MAAM,CAACd,KAAD,EAAQH,OAAR,EAAiB;AACnB,QAAI,CAACD,aAAa,CAACC,OAAD,CAAlB,EAA6B;AACzB,aAAO,KAAKY,iBAAL,CAAuBK,MAAvB,CAA8Bd,KAA9B,EAAqCF,SAArC,EAAgDiB,GAAhD,CAAoDX,eAApD,CAAP;AACH;;AACD,QAAI,sBAAsBP,OAA1B,EAAmC;AAC/B,aAAO,KAAKW,kBAAL,CAAwBM,MAAxB,CAA+Bd,KAA/B,EAAsCH,OAAO,CAACM,gBAA9C,EAAgEY,GAAhE,CAAoEhB,gBAApE,CAAP;AACH;;AACD,WAAO,KAAKU,iBAAL,CAAuBK,MAAvB,CAA8Bd,KAA9B,EAAqCH,OAAO,CAACQ,eAA7C,EAA8DU,GAA9D,CAAkEX,eAAlE,CAAP;AACH;;AApBuD","sourcesContent":["import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nfunction isSafeContext(context) {\n    return context !== undefined;\n}\nfunction toGeneratorValue(value) {\n    if (value.hasToBeCloned) {\n        return new Value(value.value_, { generatorContext: value.context }, () => value.value);\n    }\n    return new Value(value.value_, { generatorContext: value.context });\n}\nfunction toShrinkerValue(value) {\n    if (value.hasToBeCloned) {\n        return new Value(value.value_, { shrinkerContext: value.context }, () => value.value);\n    }\n    return new Value(value.value_, { shrinkerContext: value.context });\n}\nexport class WithShrinkFromOtherArbitrary extends Arbitrary {\n    constructor(generatorArbitrary, shrinkerArbitrary) {\n        super();\n        this.generatorArbitrary = generatorArbitrary;\n        this.shrinkerArbitrary = shrinkerArbitrary;\n    }\n    generate(mrng, biasFactor) {\n        return toGeneratorValue(this.generatorArbitrary.generate(mrng, biasFactor));\n    }\n    canShrinkWithoutContext(value) {\n        return this.shrinkerArbitrary.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        if (!isSafeContext(context)) {\n            return this.shrinkerArbitrary.shrink(value, undefined).map(toShrinkerValue);\n        }\n        if ('generatorContext' in context) {\n            return this.generatorArbitrary.shrink(value, context.generatorContext).map(toGeneratorValue);\n        }\n        return this.shrinkerArbitrary.shrink(value, context.shrinkerContext).map(toShrinkerValue);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}