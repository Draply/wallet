{"ast":null,"code":"import { LazyArbitrary } from './_internals/LazyArbitrary.js';\nexport function letrec(builder) {\n  const lazyArbs = Object.create(null);\n\n  const tie = key => {\n    if (!Object.prototype.hasOwnProperty.call(lazyArbs, key)) {\n      lazyArbs[key] = new LazyArbitrary(String(key));\n    }\n\n    return lazyArbs[key];\n  };\n\n  const strictArbs = builder(tie);\n\n  for (const key in strictArbs) {\n    if (!Object.prototype.hasOwnProperty.call(strictArbs, key)) {\n      continue;\n    }\n\n    const lazyAtKey = lazyArbs[key];\n    const lazyArb = lazyAtKey !== undefined ? lazyAtKey : new LazyArbitrary(key);\n    lazyArb.underlying = strictArbs[key];\n    lazyArbs[key] = lazyArb;\n  }\n\n  return strictArbs;\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/letrec.js"],"names":["LazyArbitrary","letrec","builder","lazyArbs","Object","create","tie","key","prototype","hasOwnProperty","call","String","strictArbs","lazyAtKey","lazyArb","undefined","underlying"],"mappings":"AAAA,SAASA,aAAT,QAA8B,+BAA9B;AACA,OAAO,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AAC5B,QAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;;AACA,QAAMC,GAAG,GAAIC,GAAD,IAAS;AACjB,QAAI,CAACH,MAAM,CAACI,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,QAArC,EAA+CI,GAA/C,CAAL,EAA0D;AACtDJ,MAAAA,QAAQ,CAACI,GAAD,CAAR,GAAgB,IAAIP,aAAJ,CAAkBW,MAAM,CAACJ,GAAD,CAAxB,CAAhB;AACH;;AACD,WAAOJ,QAAQ,CAACI,GAAD,CAAf;AACH,GALD;;AAMA,QAAMK,UAAU,GAAGV,OAAO,CAACI,GAAD,CAA1B;;AACA,OAAK,MAAMC,GAAX,IAAkBK,UAAlB,EAA8B;AAC1B,QAAI,CAACR,MAAM,CAACI,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCE,UAArC,EAAiDL,GAAjD,CAAL,EAA4D;AACxD;AACH;;AACD,UAAMM,SAAS,GAAGV,QAAQ,CAACI,GAAD,CAA1B;AACA,UAAMO,OAAO,GAAGD,SAAS,KAAKE,SAAd,GAA0BF,SAA1B,GAAsC,IAAIb,aAAJ,CAAkBO,GAAlB,CAAtD;AACAO,IAAAA,OAAO,CAACE,UAAR,GAAqBJ,UAAU,CAACL,GAAD,CAA/B;AACAJ,IAAAA,QAAQ,CAACI,GAAD,CAAR,GAAgBO,OAAhB;AACH;;AACD,SAAOF,UAAP;AACH","sourcesContent":["import { LazyArbitrary } from './_internals/LazyArbitrary.js';\nexport function letrec(builder) {\n    const lazyArbs = Object.create(null);\n    const tie = (key) => {\n        if (!Object.prototype.hasOwnProperty.call(lazyArbs, key)) {\n            lazyArbs[key] = new LazyArbitrary(String(key));\n        }\n        return lazyArbs[key];\n    };\n    const strictArbs = builder(tie);\n    for (const key in strictArbs) {\n        if (!Object.prototype.hasOwnProperty.call(strictArbs, key)) {\n            continue;\n        }\n        const lazyAtKey = lazyArbs[key];\n        const lazyArb = lazyAtKey !== undefined ? lazyAtKey : new LazyArbitrary(key);\n        lazyArb.underlying = strictArbs[key];\n        lazyArbs[key] = lazyArb;\n    }\n    return strictArbs;\n}\n"]},"metadata":{},"sourceType":"module"}