{"ast":null,"code":"import { array } from './array.js';\nimport { patternsToStringMapper, patternsToStringUnmapperFor } from './_internals/mappers/PatternsToString.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\nexport function stringOf(charArb) {\n  let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const unmapper = patternsToStringUnmapperFor(charArb, constraints);\n  const experimentalCustomSlices = createSlicesForString(charArb, unmapper);\n  const enrichedConstraints = Object.assign(Object.assign({}, constraints), {\n    experimentalCustomSlices\n  });\n  return array(charArb, enrichedConstraints).map(patternsToStringMapper, unmapper);\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/stringOf.js"],"names":["array","patternsToStringMapper","patternsToStringUnmapperFor","createSlicesForString","stringOf","charArb","constraints","unmapper","experimentalCustomSlices","enrichedConstraints","Object","assign","map"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,sBAAT,EAAiCC,2BAAjC,QAAoE,0CAApE;AACA,SAASC,qBAAT,QAAsC,gDAAtC;AACA,OAAO,SAASC,QAAT,CAAkBC,OAAlB,EAA6C;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;AAChD,QAAMC,QAAQ,GAAGL,2BAA2B,CAACG,OAAD,EAAUC,WAAV,CAA5C;AACA,QAAME,wBAAwB,GAAGL,qBAAqB,CAACE,OAAD,EAAUE,QAAV,CAAtD;AACA,QAAME,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,WAAlB,CAAd,EAA8C;AAAEE,IAAAA;AAAF,GAA9C,CAA5B;AACA,SAAOR,KAAK,CAACK,OAAD,EAAUI,mBAAV,CAAL,CAAoCG,GAApC,CAAwCX,sBAAxC,EAAgEM,QAAhE,CAAP;AACH","sourcesContent":["import { array } from './array.js';\nimport { patternsToStringMapper, patternsToStringUnmapperFor } from './_internals/mappers/PatternsToString.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\nexport function stringOf(charArb, constraints = {}) {\n    const unmapper = patternsToStringUnmapperFor(charArb, constraints);\n    const experimentalCustomSlices = createSlicesForString(charArb, unmapper);\n    const enrichedConstraints = Object.assign(Object.assign({}, constraints), { experimentalCustomSlices });\n    return array(charArb, enrichedConstraints).map(patternsToStringMapper, unmapper);\n}\n"]},"metadata":{},"sourceType":"module"}