{"ast":null,"code":"import { Tokenizer, TokenizerMode } from '../tokenizer/index.js';\nimport { OpenElementStack } from './open-element-stack.js';\nimport { FormattingElementList, EntryType } from './formatting-element-list.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\nimport * as doctype from '../common/doctype.js';\nimport * as foreignContent from '../common/foreign-content.js';\nimport { ERR } from '../common/error-codes.js';\nimport * as unicode from '../common/unicode.js';\nimport { TAG_ID as $, TAG_NAMES as TN, NS, ATTRS, SPECIAL_ELEMENTS, DOCUMENT_MODE, isNumberedHeader, getTagID } from '../common/html.js';\nimport { TokenType, getTokenAttr } from '../common/token.js'; //Misc constants\n\nconst HIDDEN_INPUT_TYPE = 'hidden'; //Adoption agency loops iteration count\n\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3; //Insertion modes\n\nvar InsertionMode;\n\n(function (InsertionMode) {\n  InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n  InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n  InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n  InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n  InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n  InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n  InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n  InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n  InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n  InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n  InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n  InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n  InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n  InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n  InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n  InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n  InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n  InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n  InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n  InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n  InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n  InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n  InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\n\nconst BASE_LOC = {\n  startLine: -1,\n  startCol: -1,\n  startOffset: -1,\n  endLine: -1,\n  endCol: -1,\n  endOffset: -1\n};\nconst TABLE_STRUCTURE_TAGS = new Set([$.TABLE, $.TBODY, $.TFOOT, $.THEAD, $.TR]);\nconst defaultParserOptions = {\n  scriptingEnabled: true,\n  sourceCodeLocationInfo: false,\n  treeAdapter: defaultTreeAdapter,\n  onParseError: null\n}; //Parser\n\nexport class Parser {\n  constructor(options, document) {\n    let fragmentContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let scriptHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    this.fragmentContext = fragmentContext;\n    this.scriptHandler = scriptHandler;\n    this.currentToken = null;\n    this.stopped = false;\n    this.insertionMode = InsertionMode.INITIAL;\n    this.originalInsertionMode = InsertionMode.INITIAL;\n    this.headElement = null;\n    this.formElement = null;\n    /** Indicates that the current node is not an element in the HTML namespace */\n\n    this.currentNotInHTML = false;\n    /**\n     * The template insertion mode stack is maintained from the left.\n     * Ie. the topmost element will always have index 0.\n     */\n\n    this.tmplInsertionModeStack = [];\n    this.pendingCharacterTokens = [];\n    this.hasNonWhitespacePendingCharacterToken = false;\n    this.framesetOk = true;\n    this.skipNextNewLine = false;\n    this.fosterParentingEnabled = false;\n    this.options = { ...defaultParserOptions,\n      ...options\n    };\n    this.treeAdapter = this.options.treeAdapter;\n    this.onParseError = this.options.onParseError; // Always enable location info if we report parse errors.\n\n    if (this.onParseError) {\n      this.options.sourceCodeLocationInfo = true;\n    }\n\n    this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n    this.tokenizer = new Tokenizer(this.options, this);\n    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n    this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : $.UNKNOWN;\n\n    this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n\n    this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);\n  } // API\n\n\n  static parse(html, options) {\n    const parser = new this(options);\n    parser.tokenizer.write(html, true);\n    return parser.document;\n  }\n\n  static getFragmentParser(fragmentContext, options) {\n    const opts = { ...defaultParserOptions,\n      ...options\n    }; //NOTE: use a <template> element as the fragment context if no context element was provided,\n    //so we will parse in a \"forgiving\" manner\n\n    fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : fragmentContext = opts.treeAdapter.createElement(TN.TEMPLATE, NS.HTML, []); //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n    //This is important for jsdom, where a new `document` cannot be created. This led to\n    //fragment parsing messing with the main `document`.\n\n    const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);\n    const parser = new this(opts, documentMock, fragmentContext);\n\n    if (parser.fragmentContextID === $.TEMPLATE) {\n      parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n    }\n\n    parser._initTokenizerForFragmentParsing();\n\n    parser._insertFakeRootElement();\n\n    parser._resetInsertionMode();\n\n    parser._findFormInFragmentContext();\n\n    return parser;\n  }\n\n  getFragment() {\n    const rootElement = this.treeAdapter.getFirstChild(this.document);\n    const fragment = this.treeAdapter.createDocumentFragment();\n\n    this._adoptNodes(rootElement, fragment);\n\n    return fragment;\n  } //Errors\n\n\n  _err(token, code, beforeToken) {\n    var _a;\n\n    if (!this.onParseError) return;\n    const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n    const err = {\n      code,\n      startLine: loc.startLine,\n      startCol: loc.startCol,\n      startOffset: loc.startOffset,\n      endLine: beforeToken ? loc.startLine : loc.endLine,\n      endCol: beforeToken ? loc.startCol : loc.endCol,\n      endOffset: beforeToken ? loc.startOffset : loc.endOffset\n    };\n    this.onParseError(err);\n  } //Stack events\n\n\n  onItemPush(node, tid, isTop) {\n    var _a, _b;\n\n    (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    if (isTop && this.openElements.stackTop > 0) this._setContextModes(node, tid);\n  }\n\n  onItemPop(node, isTop) {\n    var _a, _b;\n\n    if (this.options.sourceCodeLocationInfo) {\n      this._setEndLocation(node, this.currentToken);\n    }\n\n    (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n\n    if (isTop) {\n      let current;\n      let currentTagId;\n\n      if (this.openElements.stackTop === 0 && this.fragmentContext) {\n        current = this.fragmentContext;\n        currentTagId = this.fragmentContextID;\n      } else {\n        ({\n          current,\n          currentTagId\n        } = this.openElements);\n      }\n\n      this._setContextModes(current, currentTagId);\n    }\n  }\n\n  _setContextModes(current, tid) {\n    const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;\n    this.currentNotInHTML = !isHTML;\n    this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);\n  }\n\n  _switchToTextParsing(currentToken, nextTokenizerState) {\n    this._insertElement(currentToken, NS.HTML);\n\n    this.tokenizer.state = nextTokenizerState;\n    this.originalInsertionMode = this.insertionMode;\n    this.insertionMode = InsertionMode.TEXT;\n  }\n\n  switchToPlaintextParsing() {\n    this.insertionMode = InsertionMode.TEXT;\n    this.originalInsertionMode = InsertionMode.IN_BODY;\n    this.tokenizer.state = TokenizerMode.PLAINTEXT;\n  } //Fragment parsing\n\n\n  _getAdjustedCurrentElement() {\n    return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;\n  }\n\n  _findFormInFragmentContext() {\n    let node = this.fragmentContext;\n\n    while (node) {\n      if (this.treeAdapter.getTagName(node) === TN.FORM) {\n        this.formElement = node;\n        break;\n      }\n\n      node = this.treeAdapter.getParentNode(node);\n    }\n  }\n\n  _initTokenizerForFragmentParsing() {\n    if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {\n      return;\n    }\n\n    switch (this.fragmentContextID) {\n      case $.TITLE:\n      case $.TEXTAREA:\n        {\n          this.tokenizer.state = TokenizerMode.RCDATA;\n          break;\n        }\n\n      case $.STYLE:\n      case $.XMP:\n      case $.IFRAME:\n      case $.NOEMBED:\n      case $.NOFRAMES:\n      case $.NOSCRIPT:\n        {\n          this.tokenizer.state = TokenizerMode.RAWTEXT;\n          break;\n        }\n\n      case $.SCRIPT:\n        {\n          this.tokenizer.state = TokenizerMode.SCRIPT_DATA;\n          break;\n        }\n\n      case $.PLAINTEXT:\n        {\n          this.tokenizer.state = TokenizerMode.PLAINTEXT;\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  } //Tree mutation\n\n\n  _setDocumentType(token) {\n    const name = token.name || '';\n    const publicId = token.publicId || '';\n    const systemId = token.systemId || '';\n    this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n\n    if (token.location) {\n      const documentChildren = this.treeAdapter.getChildNodes(this.document);\n      const docTypeNode = documentChildren.find(node => this.treeAdapter.isDocumentTypeNode(node));\n\n      if (docTypeNode) {\n        this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n      }\n    }\n  }\n\n  _attachElementToTree(element, location) {\n    if (this.options.sourceCodeLocationInfo) {\n      const loc = location && { ...location,\n        startTag: location\n      };\n      this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n    }\n\n    if (this._shouldFosterParentOnInsertion()) {\n      this._fosterParentElement(element);\n    } else {\n      const parent = this.openElements.currentTmplContentOrNode;\n      this.treeAdapter.appendChild(parent, element);\n    }\n  }\n\n  _appendElement(token, namespaceURI) {\n    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n\n    this._attachElementToTree(element, token.location);\n  }\n\n  _insertElement(token, namespaceURI) {\n    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n\n    this._attachElementToTree(element, token.location);\n\n    this.openElements.push(element, token.tagID);\n  }\n\n  _insertFakeElement(tagName, tagID) {\n    const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n\n    this._attachElementToTree(element, null);\n\n    this.openElements.push(element, tagID);\n  }\n\n  _insertTemplate(token) {\n    const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n    const content = this.treeAdapter.createDocumentFragment();\n    this.treeAdapter.setTemplateContent(tmpl, content);\n\n    this._attachElementToTree(tmpl, token.location);\n\n    this.openElements.push(tmpl, token.tagID);\n    if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(content, null);\n  }\n\n  _insertFakeRootElement() {\n    const element = this.treeAdapter.createElement(TN.HTML, NS.HTML, []);\n    if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(element, null);\n    this.treeAdapter.appendChild(this.openElements.current, element);\n    this.openElements.push(element, $.HTML);\n  }\n\n  _appendCommentNode(token, parent) {\n    const commentNode = this.treeAdapter.createCommentNode(token.data);\n    this.treeAdapter.appendChild(parent, commentNode);\n\n    if (this.options.sourceCodeLocationInfo) {\n      this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n    }\n  }\n\n  _insertCharacters(token) {\n    let parent;\n    let beforeElement;\n\n    if (this._shouldFosterParentOnInsertion()) {\n      ({\n        parent,\n        beforeElement\n      } = this._findFosterParentingLocation());\n\n      if (beforeElement) {\n        this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n      } else {\n        this.treeAdapter.insertText(parent, token.chars);\n      }\n    } else {\n      parent = this.openElements.currentTmplContentOrNode;\n      this.treeAdapter.insertText(parent, token.chars);\n    }\n\n    if (!token.location) return;\n    const siblings = this.treeAdapter.getChildNodes(parent);\n    const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n    const textNode = siblings[textNodeIdx - 1]; //NOTE: if we have a location assigned by another token, then just update the end position\n\n    const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n\n    if (tnLoc) {\n      const {\n        endLine,\n        endCol,\n        endOffset\n      } = token.location;\n      this.treeAdapter.updateNodeSourceCodeLocation(textNode, {\n        endLine,\n        endCol,\n        endOffset\n      });\n    } else if (this.options.sourceCodeLocationInfo) {\n      this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n    }\n  }\n\n  _adoptNodes(donor, recipient) {\n    for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n      this.treeAdapter.detachNode(child);\n      this.treeAdapter.appendChild(recipient, child);\n    }\n  }\n\n  _setEndLocation(element, closingToken) {\n    if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n      const ctLoc = closingToken.location;\n      const tn = this.treeAdapter.getTagName(element);\n      const endLoc = // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n      // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n      closingToken.type === TokenType.END_TAG && tn === closingToken.tagName ? {\n        endTag: { ...ctLoc\n        },\n        endLine: ctLoc.endLine,\n        endCol: ctLoc.endCol,\n        endOffset: ctLoc.endOffset\n      } : {\n        endLine: ctLoc.startLine,\n        endCol: ctLoc.startCol,\n        endOffset: ctLoc.startOffset\n      };\n      this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n    }\n  } //Token processing\n\n\n  shouldProcessStartTagTokenInForeignContent(token) {\n    // Check that neither current === document, or ns === NS.HTML\n    if (!this.currentNotInHTML) return false;\n    let current;\n    let currentTagId;\n\n    if (this.openElements.stackTop === 0 && this.fragmentContext) {\n      current = this.fragmentContext;\n      currentTagId = this.fragmentContextID;\n    } else {\n      ({\n        current,\n        currentTagId\n      } = this.openElements);\n    }\n\n    if (token.tagID === $.SVG && this.treeAdapter.getTagName(current) === TN.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {\n      return false;\n    }\n\n    return (// Check that `current` is not an integration point for HTML or MathML elements.\n      this.tokenizer.inForeignNode || // If it _is_ an integration point, then we might have to check that it is not an HTML\n      // integration point.\n      (token.tagID === $.MGLYPH || token.tagID === $.MALIGNMARK) && !this._isIntegrationPoint(currentTagId, current, NS.HTML)\n    );\n  }\n\n  _processToken(token) {\n    switch (token.type) {\n      case TokenType.CHARACTER:\n        {\n          this.onCharacter(token);\n          break;\n        }\n\n      case TokenType.NULL_CHARACTER:\n        {\n          this.onNullCharacter(token);\n          break;\n        }\n\n      case TokenType.COMMENT:\n        {\n          this.onComment(token);\n          break;\n        }\n\n      case TokenType.DOCTYPE:\n        {\n          this.onDoctype(token);\n          break;\n        }\n\n      case TokenType.START_TAG:\n        {\n          this._processStartTag(token);\n\n          break;\n        }\n\n      case TokenType.END_TAG:\n        {\n          this.onEndTag(token);\n          break;\n        }\n\n      case TokenType.EOF:\n        {\n          this.onEof(token);\n          break;\n        }\n\n      case TokenType.WHITESPACE_CHARACTER:\n        {\n          this.onWhitespaceCharacter(token);\n          break;\n        }\n    }\n  } //Integration points\n\n\n  _isIntegrationPoint(tid, element, foreignNS) {\n    const ns = this.treeAdapter.getNamespaceURI(element);\n    const attrs = this.treeAdapter.getAttrList(element);\n    return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n  } //Active formatting elements reconstruction\n\n\n  _reconstructActiveFormattingElements() {\n    const listLength = this.activeFormattingElements.entries.length;\n\n    if (listLength) {\n      const endIndex = this.activeFormattingElements.entries.findIndex(entry => entry.type === EntryType.Marker || this.openElements.contains(entry.element));\n      const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;\n\n      for (let i = unopenIdx; i >= 0; i--) {\n        const entry = this.activeFormattingElements.entries[i];\n\n        this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n\n        entry.element = this.openElements.current;\n      }\n    }\n  } //Close elements\n\n\n  _closeTableCell() {\n    this.openElements.generateImpliedEndTags();\n    this.openElements.popUntilTableCellPopped();\n    this.activeFormattingElements.clearToLastMarker();\n    this.insertionMode = InsertionMode.IN_ROW;\n  }\n\n  _closePElement() {\n    this.openElements.generateImpliedEndTagsWithExclusion($.P);\n    this.openElements.popUntilTagNamePopped($.P);\n  } //Insertion modes\n\n\n  _resetInsertionMode() {\n    for (let i = this.openElements.stackTop; i >= 0; i--) {\n      //Insertion mode reset map\n      switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n        case $.TR:\n          {\n            this.insertionMode = InsertionMode.IN_ROW;\n            return;\n          }\n\n        case $.TBODY:\n        case $.THEAD:\n        case $.TFOOT:\n          {\n            this.insertionMode = InsertionMode.IN_TABLE_BODY;\n            return;\n          }\n\n        case $.CAPTION:\n          {\n            this.insertionMode = InsertionMode.IN_CAPTION;\n            return;\n          }\n\n        case $.COLGROUP:\n          {\n            this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n            return;\n          }\n\n        case $.TABLE:\n          {\n            this.insertionMode = InsertionMode.IN_TABLE;\n            return;\n          }\n\n        case $.BODY:\n          {\n            this.insertionMode = InsertionMode.IN_BODY;\n            return;\n          }\n\n        case $.FRAMESET:\n          {\n            this.insertionMode = InsertionMode.IN_FRAMESET;\n            return;\n          }\n\n        case $.SELECT:\n          {\n            this._resetInsertionModeForSelect(i);\n\n            return;\n          }\n\n        case $.TEMPLATE:\n          {\n            this.insertionMode = this.tmplInsertionModeStack[0];\n            return;\n          }\n\n        case $.HTML:\n          {\n            this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n            return;\n          }\n\n        case $.TD:\n        case $.TH:\n          {\n            if (i > 0) {\n              this.insertionMode = InsertionMode.IN_CELL;\n              return;\n            }\n\n            break;\n          }\n\n        case $.HEAD:\n          {\n            if (i > 0) {\n              this.insertionMode = InsertionMode.IN_HEAD;\n              return;\n            }\n\n            break;\n          }\n      }\n    }\n\n    this.insertionMode = InsertionMode.IN_BODY;\n  }\n\n  _resetInsertionModeForSelect(selectIdx) {\n    if (selectIdx > 0) {\n      for (let i = selectIdx - 1; i > 0; i--) {\n        const tn = this.openElements.tagIDs[i];\n\n        if (tn === $.TEMPLATE) {\n          break;\n        } else if (tn === $.TABLE) {\n          this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n          return;\n        }\n      }\n    }\n\n    this.insertionMode = InsertionMode.IN_SELECT;\n  } //Foster parenting\n\n\n  _isElementCausesFosterParenting(tn) {\n    return TABLE_STRUCTURE_TAGS.has(tn);\n  }\n\n  _shouldFosterParentOnInsertion() {\n    return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n  }\n\n  _findFosterParentingLocation() {\n    for (let i = this.openElements.stackTop; i >= 0; i--) {\n      const openElement = this.openElements.items[i];\n\n      switch (this.openElements.tagIDs[i]) {\n        case $.TEMPLATE:\n          {\n            if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {\n              return {\n                parent: this.treeAdapter.getTemplateContent(openElement),\n                beforeElement: null\n              };\n            }\n\n            break;\n          }\n\n        case $.TABLE:\n          {\n            const parent = this.treeAdapter.getParentNode(openElement);\n\n            if (parent) {\n              return {\n                parent,\n                beforeElement: openElement\n              };\n            }\n\n            return {\n              parent: this.openElements.items[i - 1],\n              beforeElement: null\n            };\n          }\n\n        default: // Do nothing\n\n      }\n    }\n\n    return {\n      parent: this.openElements.items[0],\n      beforeElement: null\n    };\n  }\n\n  _fosterParentElement(element) {\n    const location = this._findFosterParentingLocation();\n\n    if (location.beforeElement) {\n      this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n    } else {\n      this.treeAdapter.appendChild(location.parent, element);\n    }\n  } //Special elements\n\n\n  _isSpecialElement(element, id) {\n    const ns = this.treeAdapter.getNamespaceURI(element);\n    return SPECIAL_ELEMENTS[ns].has(id);\n  }\n\n  onCharacter(token) {\n    this.skipNextNewLine = false;\n\n    if (this.tokenizer.inForeignNode) {\n      characterInForeignContent(this, token);\n      return;\n    }\n\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HTML:\n        {\n          tokenBeforeHtml(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HEAD:\n        {\n          tokenBeforeHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD:\n        {\n          tokenInHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          tokenInHeadNoScript(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_HEAD:\n        {\n          tokenAfterHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_TEMPLATE:\n        {\n          characterInBody(this, token);\n          break;\n        }\n\n      case InsertionMode.TEXT:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        {\n          this._insertCharacters(token);\n\n          break;\n        }\n\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n        {\n          characterInTable(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          characterInTableText(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_COLUMN_GROUP:\n        {\n          tokenInColumnGroup(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_BODY:\n        {\n          tokenAfterBody(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_AFTER_BODY:\n        {\n          tokenAfterAfterBody(this, token);\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  }\n\n  onNullCharacter(token) {\n    this.skipNextNewLine = false;\n\n    if (this.tokenizer.inForeignNode) {\n      nullCharacterInForeignContent(this, token);\n      return;\n    }\n\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HTML:\n        {\n          tokenBeforeHtml(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HEAD:\n        {\n          tokenBeforeHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD:\n        {\n          tokenInHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          tokenInHeadNoScript(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_HEAD:\n        {\n          tokenAfterHead(this, token);\n          break;\n        }\n\n      case InsertionMode.TEXT:\n        {\n          this._insertCharacters(token);\n\n          break;\n        }\n\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n        {\n          characterInTable(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_COLUMN_GROUP:\n        {\n          tokenInColumnGroup(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_BODY:\n        {\n          tokenAfterBody(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_AFTER_BODY:\n        {\n          tokenAfterAfterBody(this, token);\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  }\n\n  onComment(token) {\n    this.skipNextNewLine = false;\n\n    if (this.currentNotInHTML) {\n      appendComment(this, token);\n      return;\n    }\n\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n      case InsertionMode.BEFORE_HTML:\n      case InsertionMode.BEFORE_HEAD:\n      case InsertionMode.IN_HEAD:\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n      case InsertionMode.AFTER_HEAD:\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_COLUMN_GROUP:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n      case InsertionMode.IN_TEMPLATE:\n      case InsertionMode.IN_FRAMESET:\n      case InsertionMode.AFTER_FRAMESET:\n        {\n          appendComment(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_BODY:\n        {\n          appendCommentToRootHtmlElement(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        {\n          appendCommentToDocument(this, token);\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  }\n\n  onDoctype(token) {\n    this.skipNextNewLine = false;\n\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          doctypeInInitialMode(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HEAD:\n      case InsertionMode.IN_HEAD:\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n      case InsertionMode.AFTER_HEAD:\n        {\n          this._err(token, ERR.misplacedDoctype);\n\n          break;\n        }\n\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  }\n\n  onStartTag(token) {\n    this.skipNextNewLine = false;\n    this.currentToken = token;\n\n    this._processStartTag(token);\n\n    if (token.selfClosing && !token.ackSelfClosing) {\n      this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n    }\n  }\n  /**\n   * Processes a given start tag.\n   *\n   * `onStartTag` checks if a self-closing tag was recognized. When a token\n   * is moved inbetween multiple insertion modes, this check for self-closing\n   * could lead to false positives. To avoid this, `_processStartTag` is used\n   * for nested calls.\n   *\n   * @param token The token to process.\n   */\n\n\n  _processStartTag(token) {\n    if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n      startTagInForeignContent(this, token);\n    } else {\n      this._startTagOutsideForeignContent(token);\n    }\n  }\n\n  _startTagOutsideForeignContent(token) {\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HTML:\n        {\n          startTagBeforeHtml(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HEAD:\n        {\n          startTagBeforeHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD:\n        {\n          startTagInHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          startTagInHeadNoScript(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_HEAD:\n        {\n          startTagAfterHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_BODY:\n        {\n          startTagInBody(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE:\n        {\n          startTagInTable(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_CAPTION:\n        {\n          startTagInCaption(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_COLUMN_GROUP:\n        {\n          startTagInColumnGroup(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE_BODY:\n        {\n          startTagInTableBody(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_ROW:\n        {\n          startTagInRow(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_CELL:\n        {\n          startTagInCell(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_SELECT:\n        {\n          startTagInSelect(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        {\n          startTagInSelectInTable(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TEMPLATE:\n        {\n          startTagInTemplate(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_BODY:\n        {\n          startTagAfterBody(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_FRAMESET:\n        {\n          startTagInFrameset(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_FRAMESET:\n        {\n          startTagAfterFrameset(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_AFTER_BODY:\n        {\n          startTagAfterAfterBody(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        {\n          startTagAfterAfterFrameset(this, token);\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  }\n\n  onEndTag(token) {\n    this.skipNextNewLine = false;\n    this.currentToken = token;\n\n    if (this.currentNotInHTML) {\n      endTagInForeignContent(this, token);\n    } else {\n      this._endTagOutsideForeignContent(token);\n    }\n  }\n\n  _endTagOutsideForeignContent(token) {\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HTML:\n        {\n          endTagBeforeHtml(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HEAD:\n        {\n          endTagBeforeHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD:\n        {\n          endTagInHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          endTagInHeadNoScript(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_HEAD:\n        {\n          endTagAfterHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_BODY:\n        {\n          endTagInBody(this, token);\n          break;\n        }\n\n      case InsertionMode.TEXT:\n        {\n          endTagInText(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE:\n        {\n          endTagInTable(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_CAPTION:\n        {\n          endTagInCaption(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_COLUMN_GROUP:\n        {\n          endTagInColumnGroup(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE_BODY:\n        {\n          endTagInTableBody(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_ROW:\n        {\n          endTagInRow(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_CELL:\n        {\n          endTagInCell(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_SELECT:\n        {\n          endTagInSelect(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        {\n          endTagInSelectInTable(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TEMPLATE:\n        {\n          endTagInTemplate(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_BODY:\n        {\n          endTagAfterBody(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_FRAMESET:\n        {\n          endTagInFrameset(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_FRAMESET:\n        {\n          endTagAfterFrameset(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_AFTER_BODY:\n        {\n          tokenAfterAfterBody(this, token);\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  }\n\n  onEof(token) {\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        {\n          tokenInInitialMode(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HTML:\n        {\n          tokenBeforeHtml(this, token);\n          break;\n        }\n\n      case InsertionMode.BEFORE_HEAD:\n        {\n          tokenBeforeHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD:\n        {\n          tokenInHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        {\n          tokenInHeadNoScript(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_HEAD:\n        {\n          tokenAfterHead(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_COLUMN_GROUP:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        {\n          eofInBody(this, token);\n          break;\n        }\n\n      case InsertionMode.TEXT:\n        {\n          eofInText(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          tokenInTableText(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TEMPLATE:\n        {\n          eofInTemplate(this, token);\n          break;\n        }\n\n      case InsertionMode.AFTER_BODY:\n      case InsertionMode.IN_FRAMESET:\n      case InsertionMode.AFTER_FRAMESET:\n      case InsertionMode.AFTER_AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        {\n          stopParsing(this, token);\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  }\n\n  onWhitespaceCharacter(token) {\n    if (this.skipNextNewLine) {\n      this.skipNextNewLine = false;\n\n      if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n        if (token.chars.length === 1) {\n          return;\n        }\n\n        token.chars = token.chars.substr(1);\n      }\n    }\n\n    if (this.tokenizer.inForeignNode) {\n      this._insertCharacters(token);\n\n      return;\n    }\n\n    switch (this.insertionMode) {\n      case InsertionMode.IN_HEAD:\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n      case InsertionMode.AFTER_HEAD:\n      case InsertionMode.TEXT:\n      case InsertionMode.IN_COLUMN_GROUP:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n      case InsertionMode.IN_FRAMESET:\n      case InsertionMode.AFTER_FRAMESET:\n        {\n          this._insertCharacters(token);\n\n          break;\n        }\n\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_TEMPLATE:\n      case InsertionMode.AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        {\n          whitespaceCharacterInBody(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n        {\n          characterInTable(this, token);\n          break;\n        }\n\n      case InsertionMode.IN_TABLE_TEXT:\n        {\n          whitespaceCharacterInTableText(this, token);\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  }\n\n} //Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\n\nfunction aaObtainFormattingElementEntry(p, token) {\n  let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n\n  if (formattingElementEntry) {\n    if (!p.openElements.contains(formattingElementEntry.element)) {\n      p.activeFormattingElements.removeEntry(formattingElementEntry);\n      formattingElementEntry = null;\n    } else if (!p.openElements.hasInScope(token.tagID)) {\n      formattingElementEntry = null;\n    }\n  } else {\n    genericEndTagInBody(p, token);\n  }\n\n  return formattingElementEntry;\n} //Steps 9 and 10 of the algorithm\n\n\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n  let furthestBlock = null;\n  let idx = p.openElements.stackTop;\n\n  for (; idx >= 0; idx--) {\n    const element = p.openElements.items[idx];\n\n    if (element === formattingElementEntry.element) {\n      break;\n    }\n\n    if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n      furthestBlock = element;\n    }\n  }\n\n  if (!furthestBlock) {\n    p.openElements.shortenToLength(idx < 0 ? 0 : idx);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n  }\n\n  return furthestBlock;\n} //Step 13 of the algorithm\n\n\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n  let lastElement = furthestBlock;\n  let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n\n  for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n    //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n    nextElement = p.openElements.getCommonAncestor(element);\n    const elementEntry = p.activeFormattingElements.getElementEntry(element);\n    const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n    const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n\n    if (shouldRemoveFromOpenElements) {\n      if (counterOverflow) {\n        p.activeFormattingElements.removeEntry(elementEntry);\n      }\n\n      p.openElements.remove(element);\n    } else {\n      element = aaRecreateElementFromEntry(p, elementEntry);\n\n      if (lastElement === furthestBlock) {\n        p.activeFormattingElements.bookmark = elementEntry;\n      }\n\n      p.treeAdapter.detachNode(lastElement);\n      p.treeAdapter.appendChild(element, lastElement);\n      lastElement = element;\n    }\n  }\n\n  return lastElement;\n} //Step 13.7 of the algorithm\n\n\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n  const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n  const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n  p.openElements.replace(elementEntry.element, newElement);\n  elementEntry.element = newElement;\n  return newElement;\n} //Step 14 of the algorithm\n\n\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n  const tn = p.treeAdapter.getTagName(commonAncestor);\n  const tid = getTagID(tn);\n\n  if (p._isElementCausesFosterParenting(tid)) {\n    p._fosterParentElement(lastElement);\n  } else {\n    const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n\n    if (tid === $.TEMPLATE && ns === NS.HTML) {\n      commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n    }\n\n    p.treeAdapter.appendChild(commonAncestor, lastElement);\n  }\n} //Steps 15-19 of the algorithm\n\n\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n  const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n  const {\n    token\n  } = formattingElementEntry;\n  const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n\n  p._adoptNodes(furthestBlock, newElement);\n\n  p.treeAdapter.appendChild(furthestBlock, newElement);\n  p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n  p.activeFormattingElements.removeEntry(formattingElementEntry);\n  p.openElements.remove(formattingElementEntry.element);\n  p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n} //Algorithm entry point\n\n\nfunction callAdoptionAgency(p, token) {\n  for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n    const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n\n    if (!formattingElementEntry) {\n      break;\n    }\n\n    const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n\n    if (!furthestBlock) {\n      break;\n    }\n\n    p.activeFormattingElements.bookmark = formattingElementEntry;\n    const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n    const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n    p.treeAdapter.detachNode(lastElement);\n    if (commonAncestor) aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n    aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n  }\n} //Generic token handlers\n//------------------------------------------------------------------\n\n\nfunction appendComment(p, token) {\n  p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\n\nfunction appendCommentToRootHtmlElement(p, token) {\n  p._appendCommentNode(token, p.openElements.items[0]);\n}\n\nfunction appendCommentToDocument(p, token) {\n  p._appendCommentNode(token, p.document);\n}\n\nfunction stopParsing(p, token) {\n  p.stopped = true; // NOTE: Set end locations for elements that remain on the open element stack.\n\n  if (token.location) {\n    // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n    // This is a problem, as we might overwrite their end position here.\n    const target = p.fragmentContext ? 0 : 2;\n\n    for (let i = p.openElements.stackTop; i >= target; i--) {\n      p._setEndLocation(p.openElements.items[i], token);\n    } // Handle `html` and `body`\n\n\n    if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n      const htmlElement = p.openElements.items[0];\n      const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n\n      if (htmlLocation && !htmlLocation.endTag) {\n        p._setEndLocation(htmlElement, token);\n\n        if (p.openElements.stackTop >= 1) {\n          const bodyElement = p.openElements.items[1];\n          const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n\n          if (bodyLocation && !bodyLocation.endTag) {\n            p._setEndLocation(bodyElement, token);\n          }\n        }\n      }\n    }\n  }\n} // The \"initial\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction doctypeInInitialMode(p, token) {\n  p._setDocumentType(token);\n\n  const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n\n  if (!doctype.isConforming(token)) {\n    p._err(token, ERR.nonConformingDoctype);\n  }\n\n  p.treeAdapter.setDocumentMode(p.document, mode);\n  p.insertionMode = InsertionMode.BEFORE_HTML;\n}\n\nfunction tokenInInitialMode(p, token) {\n  p._err(token, ERR.missingDoctype, true);\n\n  p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);\n  p.insertionMode = InsertionMode.BEFORE_HTML;\n\n  p._processToken(token);\n} // The \"before html\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagBeforeHtml(p, token) {\n  if (token.tagID === $.HTML) {\n    p._insertElement(token, NS.HTML);\n\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n  } else {\n    tokenBeforeHtml(p, token);\n  }\n}\n\nfunction endTagBeforeHtml(p, token) {\n  const tn = token.tagID;\n\n  if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n    tokenBeforeHtml(p, token);\n  }\n}\n\nfunction tokenBeforeHtml(p, token) {\n  p._insertFakeRootElement();\n\n  p.insertionMode = InsertionMode.BEFORE_HEAD;\n\n  p._processToken(token);\n} // The \"before head\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagBeforeHead(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case $.HEAD:\n      {\n        p._insertElement(token, NS.HTML);\n\n        p.headElement = p.openElements.current;\n        p.insertionMode = InsertionMode.IN_HEAD;\n        break;\n      }\n\n    default:\n      {\n        tokenBeforeHead(p, token);\n      }\n  }\n}\n\nfunction endTagBeforeHead(p, token) {\n  const tn = token.tagID;\n\n  if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n    tokenBeforeHead(p, token);\n  } else {\n    p._err(token, ERR.endTagWithoutMatchingOpenElement);\n  }\n}\n\nfunction tokenBeforeHead(p, token) {\n  p._insertFakeElement(TN.HEAD, $.HEAD);\n\n  p.headElement = p.openElements.current;\n  p.insertionMode = InsertionMode.IN_HEAD;\n\n  p._processToken(token);\n} // The \"in head\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInHead(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case $.BASE:\n    case $.BASEFONT:\n    case $.BGSOUND:\n    case $.LINK:\n    case $.META:\n      {\n        p._appendElement(token, NS.HTML);\n\n        token.ackSelfClosing = true;\n        break;\n      }\n\n    case $.TITLE:\n      {\n        p._switchToTextParsing(token, TokenizerMode.RCDATA);\n\n        break;\n      }\n\n    case $.NOSCRIPT:\n      {\n        if (p.options.scriptingEnabled) {\n          p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n        } else {\n          p._insertElement(token, NS.HTML);\n\n          p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n        }\n\n        break;\n      }\n\n    case $.NOFRAMES:\n    case $.STYLE:\n      {\n        p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n\n        break;\n      }\n\n    case $.SCRIPT:\n      {\n        p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);\n\n        break;\n      }\n\n    case $.TEMPLATE:\n      {\n        p._insertTemplate(token);\n\n        p.activeFormattingElements.insertMarker();\n        p.framesetOk = false;\n        p.insertionMode = InsertionMode.IN_TEMPLATE;\n        p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        break;\n      }\n\n    case $.HEAD:\n      {\n        p._err(token, ERR.misplacedStartTagForHeadElement);\n\n        break;\n      }\n\n    default:\n      {\n        tokenInHead(p, token);\n      }\n  }\n}\n\nfunction endTagInHead(p, token) {\n  switch (token.tagID) {\n    case $.HEAD:\n      {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.AFTER_HEAD;\n        break;\n      }\n\n    case $.BODY:\n    case $.BR:\n    case $.HTML:\n      {\n        tokenInHead(p, token);\n        break;\n      }\n\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n\n    default:\n      {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n      }\n  }\n}\n\nfunction templateEndTagInHead(p, token) {\n  if (p.openElements.tmplCount > 0) {\n    p.openElements.generateImpliedEndTagsThoroughly();\n\n    if (p.openElements.currentTagId !== $.TEMPLATE) {\n      p._err(token, ERR.closingOfElementWithOpenChildElements);\n    }\n\n    p.openElements.popUntilTagNamePopped($.TEMPLATE);\n    p.activeFormattingElements.clearToLastMarker();\n    p.tmplInsertionModeStack.shift();\n\n    p._resetInsertionMode();\n  } else {\n    p._err(token, ERR.endTagWithoutMatchingOpenElement);\n  }\n}\n\nfunction tokenInHead(p, token) {\n  p.openElements.pop();\n  p.insertionMode = InsertionMode.AFTER_HEAD;\n\n  p._processToken(token);\n} // The \"in head no script\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInHeadNoScript(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case $.BASEFONT:\n    case $.BGSOUND:\n    case $.HEAD:\n    case $.LINK:\n    case $.META:\n    case $.NOFRAMES:\n    case $.STYLE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n\n    case $.NOSCRIPT:\n      {\n        p._err(token, ERR.nestedNoscriptInHead);\n\n        break;\n      }\n\n    default:\n      {\n        tokenInHeadNoScript(p, token);\n      }\n  }\n}\n\nfunction endTagInHeadNoScript(p, token) {\n  switch (token.tagID) {\n    case $.NOSCRIPT:\n      {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_HEAD;\n        break;\n      }\n\n    case $.BR:\n      {\n        tokenInHeadNoScript(p, token);\n        break;\n      }\n\n    default:\n      {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n      }\n  }\n}\n\nfunction tokenInHeadNoScript(p, token) {\n  const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n\n  p._err(token, errCode);\n\n  p.openElements.pop();\n  p.insertionMode = InsertionMode.IN_HEAD;\n\n  p._processToken(token);\n} // The \"after head\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagAfterHead(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case $.BODY:\n      {\n        p._insertElement(token, NS.HTML);\n\n        p.framesetOk = false;\n        p.insertionMode = InsertionMode.IN_BODY;\n        break;\n      }\n\n    case $.FRAMESET:\n      {\n        p._insertElement(token, NS.HTML);\n\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n        break;\n      }\n\n    case $.BASE:\n    case $.BASEFONT:\n    case $.BGSOUND:\n    case $.LINK:\n    case $.META:\n    case $.NOFRAMES:\n    case $.SCRIPT:\n    case $.STYLE:\n    case $.TEMPLATE:\n    case $.TITLE:\n      {\n        p._err(token, ERR.abandonedHeadElementChild);\n\n        p.openElements.push(p.headElement, $.HEAD);\n        startTagInHead(p, token);\n        p.openElements.remove(p.headElement);\n        break;\n      }\n\n    case $.HEAD:\n      {\n        p._err(token, ERR.misplacedStartTagForHeadElement);\n\n        break;\n      }\n\n    default:\n      {\n        tokenAfterHead(p, token);\n      }\n  }\n}\n\nfunction endTagAfterHead(p, token) {\n  switch (token.tagID) {\n    case $.BODY:\n    case $.HTML:\n    case $.BR:\n      {\n        tokenAfterHead(p, token);\n        break;\n      }\n\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n\n    default:\n      {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n      }\n  }\n}\n\nfunction tokenAfterHead(p, token) {\n  p._insertFakeElement(TN.BODY, $.BODY);\n\n  p.insertionMode = InsertionMode.IN_BODY;\n  modeInBody(p, token);\n} // The \"in body\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction modeInBody(p, token) {\n  switch (token.type) {\n    case TokenType.CHARACTER:\n      {\n        characterInBody(p, token);\n        break;\n      }\n\n    case TokenType.WHITESPACE_CHARACTER:\n      {\n        whitespaceCharacterInBody(p, token);\n        break;\n      }\n\n    case TokenType.COMMENT:\n      {\n        appendComment(p, token);\n        break;\n      }\n\n    case TokenType.START_TAG:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case TokenType.END_TAG:\n      {\n        endTagInBody(p, token);\n        break;\n      }\n\n    case TokenType.EOF:\n      {\n        eofInBody(p, token);\n        break;\n      }\n\n    default: // Do nothing\n\n  }\n}\n\nfunction whitespaceCharacterInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  p._insertCharacters(token);\n}\n\nfunction characterInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  p._insertCharacters(token);\n\n  p.framesetOk = false;\n}\n\nfunction htmlStartTagInBody(p, token) {\n  if (p.openElements.tmplCount === 0) {\n    p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n  }\n}\n\nfunction bodyStartTagInBody(p, token) {\n  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n\n  if (bodyElement && p.openElements.tmplCount === 0) {\n    p.framesetOk = false;\n    p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n  }\n}\n\nfunction framesetStartTagInBody(p, token) {\n  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n\n  if (p.framesetOk && bodyElement) {\n    p.treeAdapter.detachNode(bodyElement);\n    p.openElements.popAllUpToHtmlElement();\n\n    p._insertElement(token, NS.HTML);\n\n    p.insertionMode = InsertionMode.IN_FRAMESET;\n  }\n}\n\nfunction addressStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n\n  p._insertElement(token, NS.HTML);\n}\n\nfunction numberedHeaderStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n\n  if (isNumberedHeader(p.openElements.currentTagId)) {\n    p.openElements.pop();\n  }\n\n  p._insertElement(token, NS.HTML);\n}\n\nfunction preStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n\n  p._insertElement(token, NS.HTML); //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n  //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n\n\n  p.skipNextNewLine = true;\n  p.framesetOk = false;\n}\n\nfunction formStartTagInBody(p, token) {\n  const inTemplate = p.openElements.tmplCount > 0;\n\n  if (!p.formElement || inTemplate) {\n    if (p.openElements.hasInButtonScope($.P)) {\n      p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n\n    if (!inTemplate) {\n      p.formElement = p.openElements.current;\n    }\n  }\n}\n\nfunction listItemStartTagInBody(p, token) {\n  p.framesetOk = false;\n  const tn = token.tagID;\n\n  for (let i = p.openElements.stackTop; i >= 0; i--) {\n    const elementId = p.openElements.tagIDs[i];\n\n    if (tn === $.LI && elementId === $.LI || (tn === $.DD || tn === $.DT) && (elementId === $.DD || elementId === $.DT)) {\n      p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n      p.openElements.popUntilTagNamePopped(elementId);\n      break;\n    }\n\n    if (elementId !== $.ADDRESS && elementId !== $.DIV && elementId !== $.P && p._isSpecialElement(p.openElements.items[i], elementId)) {\n      break;\n    }\n  }\n\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n\n  p._insertElement(token, NS.HTML);\n}\n\nfunction plaintextStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n\n  p._insertElement(token, NS.HTML);\n\n  p.tokenizer.state = TokenizerMode.PLAINTEXT;\n}\n\nfunction buttonStartTagInBody(p, token) {\n  if (p.openElements.hasInScope($.BUTTON)) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilTagNamePopped($.BUTTON);\n  }\n\n  p._reconstructActiveFormattingElements();\n\n  p._insertElement(token, NS.HTML);\n\n  p.framesetOk = false;\n}\n\nfunction aStartTagInBody(p, token) {\n  const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TN.A);\n\n  if (activeElementEntry) {\n    callAdoptionAgency(p, token);\n    p.openElements.remove(activeElementEntry.element);\n    p.activeFormattingElements.removeEntry(activeElementEntry);\n  }\n\n  p._reconstructActiveFormattingElements();\n\n  p._insertElement(token, NS.HTML);\n\n  p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction bStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  p._insertElement(token, NS.HTML);\n\n  p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction nobrStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  if (p.openElements.hasInScope($.NOBR)) {\n    callAdoptionAgency(p, token);\n\n    p._reconstructActiveFormattingElements();\n  }\n\n  p._insertElement(token, NS.HTML);\n\n  p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction appletStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  p._insertElement(token, NS.HTML);\n\n  p.activeFormattingElements.insertMarker();\n  p.framesetOk = false;\n}\n\nfunction tableStartTagInBody(p, token) {\n  if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n\n  p._insertElement(token, NS.HTML);\n\n  p.framesetOk = false;\n  p.insertionMode = InsertionMode.IN_TABLE;\n}\n\nfunction areaStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  p._appendElement(token, NS.HTML);\n\n  p.framesetOk = false;\n  token.ackSelfClosing = true;\n}\n\nfunction isHiddenInput(token) {\n  const inputType = getTokenAttr(token, ATTRS.TYPE);\n  return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\n\nfunction inputStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  p._appendElement(token, NS.HTML);\n\n  if (!isHiddenInput(token)) {\n    p.framesetOk = false;\n  }\n\n  token.ackSelfClosing = true;\n}\n\nfunction paramStartTagInBody(p, token) {\n  p._appendElement(token, NS.HTML);\n\n  token.ackSelfClosing = true;\n}\n\nfunction hrStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n\n  p._appendElement(token, NS.HTML);\n\n  p.framesetOk = false;\n  token.ackSelfClosing = true;\n}\n\nfunction imageStartTagInBody(p, token) {\n  token.tagName = TN.IMG;\n  token.tagID = $.IMG;\n  areaStartTagInBody(p, token);\n}\n\nfunction textareaStartTagInBody(p, token) {\n  p._insertElement(token, NS.HTML); //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n  //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n\n\n  p.skipNextNewLine = true;\n  p.tokenizer.state = TokenizerMode.RCDATA;\n  p.originalInsertionMode = p.insertionMode;\n  p.framesetOk = false;\n  p.insertionMode = InsertionMode.TEXT;\n}\n\nfunction xmpStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope($.P)) {\n    p._closePElement();\n  }\n\n  p._reconstructActiveFormattingElements();\n\n  p.framesetOk = false;\n\n  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n\nfunction iframeStartTagInBody(p, token) {\n  p.framesetOk = false;\n\n  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n} //NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse\n//<noembed> as rawtext.\n\n\nfunction noembedStartTagInBody(p, token) {\n  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n\nfunction selectStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  p._insertElement(token, NS.HTML);\n\n  p.framesetOk = false;\n  p.insertionMode = p.insertionMode === InsertionMode.IN_TABLE || p.insertionMode === InsertionMode.IN_CAPTION || p.insertionMode === InsertionMode.IN_TABLE_BODY || p.insertionMode === InsertionMode.IN_ROW || p.insertionMode === InsertionMode.IN_CELL ? InsertionMode.IN_SELECT_IN_TABLE : InsertionMode.IN_SELECT;\n}\n\nfunction optgroupStartTagInBody(p, token) {\n  if (p.openElements.currentTagId === $.OPTION) {\n    p.openElements.pop();\n  }\n\n  p._reconstructActiveFormattingElements();\n\n  p._insertElement(token, NS.HTML);\n}\n\nfunction rbStartTagInBody(p, token) {\n  if (p.openElements.hasInScope($.RUBY)) {\n    p.openElements.generateImpliedEndTags();\n  }\n\n  p._insertElement(token, NS.HTML);\n}\n\nfunction rtStartTagInBody(p, token) {\n  if (p.openElements.hasInScope($.RUBY)) {\n    p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n  }\n\n  p._insertElement(token, NS.HTML);\n}\n\nfunction mathStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  foreignContent.adjustTokenMathMLAttrs(token);\n  foreignContent.adjustTokenXMLAttrs(token);\n\n  if (token.selfClosing) {\n    p._appendElement(token, NS.MATHML);\n  } else {\n    p._insertElement(token, NS.MATHML);\n  }\n\n  token.ackSelfClosing = true;\n}\n\nfunction svgStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  foreignContent.adjustTokenSVGAttrs(token);\n  foreignContent.adjustTokenXMLAttrs(token);\n\n  if (token.selfClosing) {\n    p._appendElement(token, NS.SVG);\n  } else {\n    p._insertElement(token, NS.SVG);\n  }\n\n  token.ackSelfClosing = true;\n}\n\nfunction genericStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n\n  p._insertElement(token, NS.HTML);\n}\n\nfunction startTagInBody(p, token) {\n  switch (token.tagID) {\n    case $.I:\n    case $.S:\n    case $.B:\n    case $.U:\n    case $.EM:\n    case $.TT:\n    case $.BIG:\n    case $.CODE:\n    case $.FONT:\n    case $.SMALL:\n    case $.STRIKE:\n    case $.STRONG:\n      {\n        bStartTagInBody(p, token);\n        break;\n      }\n\n    case $.A:\n      {\n        aStartTagInBody(p, token);\n        break;\n      }\n\n    case $.H1:\n    case $.H2:\n    case $.H3:\n    case $.H4:\n    case $.H5:\n    case $.H6:\n      {\n        numberedHeaderStartTagInBody(p, token);\n        break;\n      }\n\n    case $.P:\n    case $.DL:\n    case $.OL:\n    case $.UL:\n    case $.DIV:\n    case $.DIR:\n    case $.NAV:\n    case $.MAIN:\n    case $.MENU:\n    case $.ASIDE:\n    case $.CENTER:\n    case $.FIGURE:\n    case $.FOOTER:\n    case $.HEADER:\n    case $.HGROUP:\n    case $.DIALOG:\n    case $.DETAILS:\n    case $.ADDRESS:\n    case $.ARTICLE:\n    case $.SECTION:\n    case $.SUMMARY:\n    case $.FIELDSET:\n    case $.BLOCKQUOTE:\n    case $.FIGCAPTION:\n      {\n        addressStartTagInBody(p, token);\n        break;\n      }\n\n    case $.LI:\n    case $.DD:\n    case $.DT:\n      {\n        listItemStartTagInBody(p, token);\n        break;\n      }\n\n    case $.BR:\n    case $.IMG:\n    case $.WBR:\n    case $.AREA:\n    case $.EMBED:\n    case $.KEYGEN:\n      {\n        areaStartTagInBody(p, token);\n        break;\n      }\n\n    case $.HR:\n      {\n        hrStartTagInBody(p, token);\n        break;\n      }\n\n    case $.RB:\n    case $.RTC:\n      {\n        rbStartTagInBody(p, token);\n        break;\n      }\n\n    case $.RT:\n    case $.RP:\n      {\n        rtStartTagInBody(p, token);\n        break;\n      }\n\n    case $.PRE:\n    case $.LISTING:\n      {\n        preStartTagInBody(p, token);\n        break;\n      }\n\n    case $.XMP:\n      {\n        xmpStartTagInBody(p, token);\n        break;\n      }\n\n    case $.SVG:\n      {\n        svgStartTagInBody(p, token);\n        break;\n      }\n\n    case $.HTML:\n      {\n        htmlStartTagInBody(p, token);\n        break;\n      }\n\n    case $.BASE:\n    case $.LINK:\n    case $.META:\n    case $.STYLE:\n    case $.TITLE:\n    case $.SCRIPT:\n    case $.BGSOUND:\n    case $.BASEFONT:\n    case $.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n\n    case $.BODY:\n      {\n        bodyStartTagInBody(p, token);\n        break;\n      }\n\n    case $.FORM:\n      {\n        formStartTagInBody(p, token);\n        break;\n      }\n\n    case $.NOBR:\n      {\n        nobrStartTagInBody(p, token);\n        break;\n      }\n\n    case $.MATH:\n      {\n        mathStartTagInBody(p, token);\n        break;\n      }\n\n    case $.TABLE:\n      {\n        tableStartTagInBody(p, token);\n        break;\n      }\n\n    case $.INPUT:\n      {\n        inputStartTagInBody(p, token);\n        break;\n      }\n\n    case $.PARAM:\n    case $.TRACK:\n    case $.SOURCE:\n      {\n        paramStartTagInBody(p, token);\n        break;\n      }\n\n    case $.IMAGE:\n      {\n        imageStartTagInBody(p, token);\n        break;\n      }\n\n    case $.BUTTON:\n      {\n        buttonStartTagInBody(p, token);\n        break;\n      }\n\n    case $.APPLET:\n    case $.OBJECT:\n    case $.MARQUEE:\n      {\n        appletStartTagInBody(p, token);\n        break;\n      }\n\n    case $.IFRAME:\n      {\n        iframeStartTagInBody(p, token);\n        break;\n      }\n\n    case $.SELECT:\n      {\n        selectStartTagInBody(p, token);\n        break;\n      }\n\n    case $.OPTION:\n    case $.OPTGROUP:\n      {\n        optgroupStartTagInBody(p, token);\n        break;\n      }\n\n    case $.NOEMBED:\n      {\n        noembedStartTagInBody(p, token);\n        break;\n      }\n\n    case $.FRAMESET:\n      {\n        framesetStartTagInBody(p, token);\n        break;\n      }\n\n    case $.TEXTAREA:\n      {\n        textareaStartTagInBody(p, token);\n        break;\n      }\n\n    case $.NOSCRIPT:\n      {\n        if (p.options.scriptingEnabled) {\n          noembedStartTagInBody(p, token);\n        } else {\n          genericStartTagInBody(p, token);\n        }\n\n        break;\n      }\n\n    case $.PLAINTEXT:\n      {\n        plaintextStartTagInBody(p, token);\n        break;\n      }\n\n    case $.COL:\n    case $.TH:\n    case $.TD:\n    case $.TR:\n    case $.HEAD:\n    case $.FRAME:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n    case $.CAPTION:\n    case $.COLGROUP:\n      {\n        // Ignore token\n        break;\n      }\n\n    default:\n      {\n        genericStartTagInBody(p, token);\n      }\n  }\n}\n\nfunction bodyEndTagInBody(p, token) {\n  if (p.openElements.hasInScope($.BODY)) {\n    p.insertionMode = InsertionMode.AFTER_BODY; //NOTE: <body> is never popped from the stack, so we need to updated\n    //the end location explicitly.\n\n    if (p.options.sourceCodeLocationInfo) {\n      const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n\n      if (bodyElement) {\n        p._setEndLocation(bodyElement, token);\n      }\n    }\n  }\n}\n\nfunction htmlEndTagInBody(p, token) {\n  if (p.openElements.hasInScope($.BODY)) {\n    p.insertionMode = InsertionMode.AFTER_BODY;\n    endTagAfterBody(p, token);\n  }\n}\n\nfunction addressEndTagInBody(p, token) {\n  const tn = token.tagID;\n\n  if (p.openElements.hasInScope(tn)) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilTagNamePopped(tn);\n  }\n}\n\nfunction formEndTagInBody(p) {\n  const inTemplate = p.openElements.tmplCount > 0;\n  const {\n    formElement\n  } = p;\n\n  if (!inTemplate) {\n    p.formElement = null;\n  }\n\n  if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n    p.openElements.generateImpliedEndTags();\n\n    if (inTemplate) {\n      p.openElements.popUntilTagNamePopped($.FORM);\n    } else if (formElement) {\n      p.openElements.remove(formElement);\n    }\n  }\n}\n\nfunction pEndTagInBody(p) {\n  if (!p.openElements.hasInButtonScope($.P)) {\n    p._insertFakeElement(TN.P, $.P);\n  }\n\n  p._closePElement();\n}\n\nfunction liEndTagInBody(p) {\n  if (p.openElements.hasInListItemScope($.LI)) {\n    p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n    p.openElements.popUntilTagNamePopped($.LI);\n  }\n}\n\nfunction ddEndTagInBody(p, token) {\n  const tn = token.tagID;\n\n  if (p.openElements.hasInScope(tn)) {\n    p.openElements.generateImpliedEndTagsWithExclusion(tn);\n    p.openElements.popUntilTagNamePopped(tn);\n  }\n}\n\nfunction numberedHeaderEndTagInBody(p) {\n  if (p.openElements.hasNumberedHeaderInScope()) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilNumberedHeaderPopped();\n  }\n}\n\nfunction appletEndTagInBody(p, token) {\n  const tn = token.tagID;\n\n  if (p.openElements.hasInScope(tn)) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilTagNamePopped(tn);\n    p.activeFormattingElements.clearToLastMarker();\n  }\n}\n\nfunction brEndTagInBody(p) {\n  p._reconstructActiveFormattingElements();\n\n  p._insertFakeElement(TN.BR, $.BR);\n\n  p.openElements.pop();\n  p.framesetOk = false;\n}\n\nfunction genericEndTagInBody(p, token) {\n  const tn = token.tagName;\n  const tid = token.tagID;\n\n  for (let i = p.openElements.stackTop; i > 0; i--) {\n    const element = p.openElements.items[i];\n    const elementId = p.openElements.tagIDs[i]; // Compare the tag name here, as the tag might not be a known tag with an ID.\n\n    if (tid === elementId && (tid !== $.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n      p.openElements.generateImpliedEndTagsWithExclusion(tid);\n      if (p.openElements.stackTop >= i) p.openElements.shortenToLength(i);\n      break;\n    }\n\n    if (p._isSpecialElement(element, elementId)) {\n      break;\n    }\n  }\n}\n\nfunction endTagInBody(p, token) {\n  switch (token.tagID) {\n    case $.A:\n    case $.B:\n    case $.I:\n    case $.S:\n    case $.U:\n    case $.EM:\n    case $.TT:\n    case $.BIG:\n    case $.CODE:\n    case $.FONT:\n    case $.NOBR:\n    case $.SMALL:\n    case $.STRIKE:\n    case $.STRONG:\n      {\n        callAdoptionAgency(p, token);\n        break;\n      }\n\n    case $.P:\n      {\n        pEndTagInBody(p);\n        break;\n      }\n\n    case $.DL:\n    case $.UL:\n    case $.OL:\n    case $.DIR:\n    case $.DIV:\n    case $.NAV:\n    case $.PRE:\n    case $.MAIN:\n    case $.MENU:\n    case $.ASIDE:\n    case $.BUTTON:\n    case $.CENTER:\n    case $.FIGURE:\n    case $.FOOTER:\n    case $.HEADER:\n    case $.HGROUP:\n    case $.DIALOG:\n    case $.ADDRESS:\n    case $.ARTICLE:\n    case $.DETAILS:\n    case $.SECTION:\n    case $.SUMMARY:\n    case $.LISTING:\n    case $.FIELDSET:\n    case $.BLOCKQUOTE:\n    case $.FIGCAPTION:\n      {\n        addressEndTagInBody(p, token);\n        break;\n      }\n\n    case $.LI:\n      {\n        liEndTagInBody(p);\n        break;\n      }\n\n    case $.DD:\n    case $.DT:\n      {\n        ddEndTagInBody(p, token);\n        break;\n      }\n\n    case $.H1:\n    case $.H2:\n    case $.H3:\n    case $.H4:\n    case $.H5:\n    case $.H6:\n      {\n        numberedHeaderEndTagInBody(p);\n        break;\n      }\n\n    case $.BR:\n      {\n        brEndTagInBody(p);\n        break;\n      }\n\n    case $.BODY:\n      {\n        bodyEndTagInBody(p, token);\n        break;\n      }\n\n    case $.HTML:\n      {\n        htmlEndTagInBody(p, token);\n        break;\n      }\n\n    case $.FORM:\n      {\n        formEndTagInBody(p);\n        break;\n      }\n\n    case $.APPLET:\n    case $.OBJECT:\n    case $.MARQUEE:\n      {\n        appletEndTagInBody(p, token);\n        break;\n      }\n\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n\n    default:\n      {\n        genericEndTagInBody(p, token);\n      }\n  }\n}\n\nfunction eofInBody(p, token) {\n  if (p.tmplInsertionModeStack.length > 0) {\n    eofInTemplate(p, token);\n  } else {\n    stopParsing(p, token);\n  }\n} // The \"text\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction endTagInText(p, token) {\n  var _a;\n\n  if (token.tagID === $.SCRIPT) {\n    (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n  }\n\n  p.openElements.pop();\n  p.insertionMode = p.originalInsertionMode;\n}\n\nfunction eofInText(p, token) {\n  p._err(token, ERR.eofInElementThatCanContainOnlyText);\n\n  p.openElements.pop();\n  p.insertionMode = p.originalInsertionMode;\n  p.onEof(token);\n} // The \"in table\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction characterInTable(p, token) {\n  if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n    p.pendingCharacterTokens.length = 0;\n    p.hasNonWhitespacePendingCharacterToken = false;\n    p.originalInsertionMode = p.insertionMode;\n    p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n\n    switch (token.type) {\n      case TokenType.CHARACTER:\n        {\n          characterInTableText(p, token);\n          break;\n        }\n\n      case TokenType.WHITESPACE_CHARACTER:\n        {\n          whitespaceCharacterInTableText(p, token);\n          break;\n        }\n      // Ignore null\n    }\n  } else {\n    tokenInTable(p, token);\n  }\n}\n\nfunction captionStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p.activeFormattingElements.insertMarker();\n\n  p._insertElement(token, NS.HTML);\n\n  p.insertionMode = InsertionMode.IN_CAPTION;\n}\n\nfunction colgroupStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n\n  p._insertElement(token, NS.HTML);\n\n  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\n\nfunction colStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n\n  p._insertFakeElement(TN.COLGROUP, $.COLGROUP);\n\n  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n  startTagInColumnGroup(p, token);\n}\n\nfunction tbodyStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n\n  p._insertElement(token, NS.HTML);\n\n  p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\n\nfunction tdStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n\n  p._insertFakeElement(TN.TBODY, $.TBODY);\n\n  p.insertionMode = InsertionMode.IN_TABLE_BODY;\n  startTagInTableBody(p, token);\n}\n\nfunction tableStartTagInTable(p, token) {\n  if (p.openElements.hasInTableScope($.TABLE)) {\n    p.openElements.popUntilTagNamePopped($.TABLE);\n\n    p._resetInsertionMode();\n\n    p._processStartTag(token);\n  }\n}\n\nfunction inputStartTagInTable(p, token) {\n  if (isHiddenInput(token)) {\n    p._appendElement(token, NS.HTML);\n  } else {\n    tokenInTable(p, token);\n  }\n\n  token.ackSelfClosing = true;\n}\n\nfunction formStartTagInTable(p, token) {\n  if (!p.formElement && p.openElements.tmplCount === 0) {\n    p._insertElement(token, NS.HTML);\n\n    p.formElement = p.openElements.current;\n    p.openElements.pop();\n  }\n}\n\nfunction startTagInTable(p, token) {\n  switch (token.tagID) {\n    case $.TD:\n    case $.TH:\n    case $.TR:\n      {\n        tdStartTagInTable(p, token);\n        break;\n      }\n\n    case $.STYLE:\n    case $.SCRIPT:\n    case $.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n\n    case $.COL:\n      {\n        colStartTagInTable(p, token);\n        break;\n      }\n\n    case $.FORM:\n      {\n        formStartTagInTable(p, token);\n        break;\n      }\n\n    case $.TABLE:\n      {\n        tableStartTagInTable(p, token);\n        break;\n      }\n\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        tbodyStartTagInTable(p, token);\n        break;\n      }\n\n    case $.INPUT:\n      {\n        inputStartTagInTable(p, token);\n        break;\n      }\n\n    case $.CAPTION:\n      {\n        captionStartTagInTable(p, token);\n        break;\n      }\n\n    case $.COLGROUP:\n      {\n        colgroupStartTagInTable(p, token);\n        break;\n      }\n\n    default:\n      {\n        tokenInTable(p, token);\n      }\n  }\n}\n\nfunction endTagInTable(p, token) {\n  switch (token.tagID) {\n    case $.TABLE:\n      {\n        if (p.openElements.hasInTableScope($.TABLE)) {\n          p.openElements.popUntilTagNamePopped($.TABLE);\n\n          p._resetInsertionMode();\n        }\n\n        break;\n      }\n\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n\n    case $.BODY:\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n    case $.TBODY:\n    case $.TD:\n    case $.TFOOT:\n    case $.TH:\n    case $.THEAD:\n    case $.TR:\n      {\n        // Ignore token\n        break;\n      }\n\n    default:\n      {\n        tokenInTable(p, token);\n      }\n  }\n}\n\nfunction tokenInTable(p, token) {\n  const savedFosterParentingState = p.fosterParentingEnabled;\n  p.fosterParentingEnabled = true; // Process token in `In Body` mode\n\n  modeInBody(p, token);\n  p.fosterParentingEnabled = savedFosterParentingState;\n} // The \"in table text\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction whitespaceCharacterInTableText(p, token) {\n  p.pendingCharacterTokens.push(token);\n}\n\nfunction characterInTableText(p, token) {\n  p.pendingCharacterTokens.push(token);\n  p.hasNonWhitespacePendingCharacterToken = true;\n}\n\nfunction tokenInTableText(p, token) {\n  let i = 0;\n\n  if (p.hasNonWhitespacePendingCharacterToken) {\n    for (; i < p.pendingCharacterTokens.length; i++) {\n      tokenInTable(p, p.pendingCharacterTokens[i]);\n    }\n  } else {\n    for (; i < p.pendingCharacterTokens.length; i++) {\n      p._insertCharacters(p.pendingCharacterTokens[i]);\n    }\n  }\n\n  p.insertionMode = p.originalInsertionMode;\n\n  p._processToken(token);\n} // The \"in caption\" insertion mode\n//------------------------------------------------------------------\n\n\nconst TABLE_VOID_ELEMENTS = new Set([$.CAPTION, $.COL, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\n\nfunction startTagInCaption(p, token) {\n  const tn = token.tagID;\n\n  if (TABLE_VOID_ELEMENTS.has(tn)) {\n    if (p.openElements.hasInTableScope($.CAPTION)) {\n      p.openElements.generateImpliedEndTags();\n      p.openElements.popUntilTagNamePopped($.CAPTION);\n      p.activeFormattingElements.clearToLastMarker();\n      p.insertionMode = InsertionMode.IN_TABLE;\n      startTagInTable(p, token);\n    }\n  } else {\n    startTagInBody(p, token);\n  }\n}\n\nfunction endTagInCaption(p, token) {\n  const tn = token.tagID;\n\n  switch (tn) {\n    case $.CAPTION:\n    case $.TABLE:\n      {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n          p.openElements.generateImpliedEndTags();\n          p.openElements.popUntilTagNamePopped($.CAPTION);\n          p.activeFormattingElements.clearToLastMarker();\n          p.insertionMode = InsertionMode.IN_TABLE;\n\n          if (tn === $.TABLE) {\n            endTagInTable(p, token);\n          }\n        }\n\n        break;\n      }\n\n    case $.BODY:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n    case $.TBODY:\n    case $.TD:\n    case $.TFOOT:\n    case $.TH:\n    case $.THEAD:\n    case $.TR:\n      {\n        // Ignore token\n        break;\n      }\n\n    default:\n      {\n        endTagInBody(p, token);\n      }\n  }\n} // The \"in column group\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInColumnGroup(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case $.COL:\n      {\n        p._appendElement(token, NS.HTML);\n\n        token.ackSelfClosing = true;\n        break;\n      }\n\n    case $.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n\n    default:\n      {\n        tokenInColumnGroup(p, token);\n      }\n  }\n}\n\nfunction endTagInColumnGroup(p, token) {\n  switch (token.tagID) {\n    case $.COLGROUP:\n      {\n        if (p.openElements.currentTagId === $.COLGROUP) {\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n        }\n\n        break;\n      }\n\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n\n    case $.COL:\n      {\n        // Ignore token\n        break;\n      }\n\n    default:\n      {\n        tokenInColumnGroup(p, token);\n      }\n  }\n}\n\nfunction tokenInColumnGroup(p, token) {\n  if (p.openElements.currentTagId === $.COLGROUP) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_TABLE;\n\n    p._processToken(token);\n  }\n} // The \"in table body\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInTableBody(p, token) {\n  switch (token.tagID) {\n    case $.TR:\n      {\n        p.openElements.clearBackToTableBodyContext();\n\n        p._insertElement(token, NS.HTML);\n\n        p.insertionMode = InsertionMode.IN_ROW;\n        break;\n      }\n\n    case $.TH:\n    case $.TD:\n      {\n        p.openElements.clearBackToTableBodyContext();\n\n        p._insertFakeElement(TN.TR, $.TR);\n\n        p.insertionMode = InsertionMode.IN_ROW;\n        startTagInRow(p, token);\n        break;\n      }\n\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n          p.openElements.clearBackToTableBodyContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n          startTagInTable(p, token);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        startTagInTable(p, token);\n      }\n  }\n}\n\nfunction endTagInTableBody(p, token) {\n  const tn = token.tagID;\n\n  switch (token.tagID) {\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        if (p.openElements.hasInTableScope(tn)) {\n          p.openElements.clearBackToTableBodyContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n        }\n\n        break;\n      }\n\n    case $.TABLE:\n      {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n          p.openElements.clearBackToTableBodyContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n          endTagInTable(p, token);\n        }\n\n        break;\n      }\n\n    case $.BODY:\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n    case $.TD:\n    case $.TH:\n    case $.TR:\n      {\n        // Ignore token\n        break;\n      }\n\n    default:\n      {\n        endTagInTable(p, token);\n      }\n  }\n} // The \"in row\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInRow(p, token) {\n  switch (token.tagID) {\n    case $.TH:\n    case $.TD:\n      {\n        p.openElements.clearBackToTableRowContext();\n\n        p._insertElement(token, NS.HTML);\n\n        p.insertionMode = InsertionMode.IN_CELL;\n        p.activeFormattingElements.insertMarker();\n        break;\n      }\n\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n    case $.TR:\n      {\n        if (p.openElements.hasInTableScope($.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n          startTagInTableBody(p, token);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        startTagInTable(p, token);\n      }\n  }\n}\n\nfunction endTagInRow(p, token) {\n  switch (token.tagID) {\n    case $.TR:\n      {\n        if (p.openElements.hasInTableScope($.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n        }\n\n        break;\n      }\n\n    case $.TABLE:\n      {\n        if (p.openElements.hasInTableScope($.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n          endTagInTableBody(p, token);\n        }\n\n        break;\n      }\n\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope($.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n          endTagInTableBody(p, token);\n        }\n\n        break;\n      }\n\n    case $.BODY:\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n    case $.TD:\n    case $.TH:\n      {\n        // Ignore end tag\n        break;\n      }\n\n    default:\n      {\n        endTagInTable(p, token);\n      }\n  }\n} // The \"in cell\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInCell(p, token) {\n  const tn = token.tagID;\n\n  if (TABLE_VOID_ELEMENTS.has(tn)) {\n    if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n      p._closeTableCell();\n\n      startTagInRow(p, token);\n    }\n  } else {\n    startTagInBody(p, token);\n  }\n}\n\nfunction endTagInCell(p, token) {\n  const tn = token.tagID;\n\n  switch (tn) {\n    case $.TD:\n    case $.TH:\n      {\n        if (p.openElements.hasInTableScope(tn)) {\n          p.openElements.generateImpliedEndTags();\n          p.openElements.popUntilTagNamePopped(tn);\n          p.activeFormattingElements.clearToLastMarker();\n          p.insertionMode = InsertionMode.IN_ROW;\n        }\n\n        break;\n      }\n\n    case $.TABLE:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n    case $.TR:\n      {\n        if (p.openElements.hasInTableScope(tn)) {\n          p._closeTableCell();\n\n          endTagInRow(p, token);\n        }\n\n        break;\n      }\n\n    case $.BODY:\n    case $.CAPTION:\n    case $.COL:\n    case $.COLGROUP:\n    case $.HTML:\n      {\n        // Ignore token\n        break;\n      }\n\n    default:\n      {\n        endTagInBody(p, token);\n      }\n  }\n} // The \"in select\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInSelect(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case $.OPTION:\n      {\n        if (p.openElements.currentTagId === $.OPTION) {\n          p.openElements.pop();\n        }\n\n        p._insertElement(token, NS.HTML);\n\n        break;\n      }\n\n    case $.OPTGROUP:\n      {\n        if (p.openElements.currentTagId === $.OPTION) {\n          p.openElements.pop();\n        }\n\n        if (p.openElements.currentTagId === $.OPTGROUP) {\n          p.openElements.pop();\n        }\n\n        p._insertElement(token, NS.HTML);\n\n        break;\n      }\n\n    case $.INPUT:\n    case $.KEYGEN:\n    case $.TEXTAREA:\n    case $.SELECT:\n      {\n        if (p.openElements.hasInSelectScope($.SELECT)) {\n          p.openElements.popUntilTagNamePopped($.SELECT);\n\n          p._resetInsertionMode();\n\n          if (token.tagID !== $.SELECT) {\n            p._processStartTag(token);\n          }\n        }\n\n        break;\n      }\n\n    case $.SCRIPT:\n    case $.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n\n    default: // Do nothing\n\n  }\n}\n\nfunction endTagInSelect(p, token) {\n  switch (token.tagID) {\n    case $.OPTGROUP:\n      {\n        if (p.openElements.stackTop > 0 && p.openElements.currentTagId === $.OPTION && p.openElements.tagIDs[p.openElements.stackTop - 1] === $.OPTGROUP) {\n          p.openElements.pop();\n        }\n\n        if (p.openElements.currentTagId === $.OPTGROUP) {\n          p.openElements.pop();\n        }\n\n        break;\n      }\n\n    case $.OPTION:\n      {\n        if (p.openElements.currentTagId === $.OPTION) {\n          p.openElements.pop();\n        }\n\n        break;\n      }\n\n    case $.SELECT:\n      {\n        if (p.openElements.hasInSelectScope($.SELECT)) {\n          p.openElements.popUntilTagNamePopped($.SELECT);\n\n          p._resetInsertionMode();\n        }\n\n        break;\n      }\n\n    case $.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n\n    default: // Do nothing\n\n  }\n} // The \"in select in table\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInSelectInTable(p, token) {\n  const tn = token.tagID;\n\n  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {\n    p.openElements.popUntilTagNamePopped($.SELECT);\n\n    p._resetInsertionMode();\n\n    p._processStartTag(token);\n  } else {\n    startTagInSelect(p, token);\n  }\n}\n\nfunction endTagInSelectInTable(p, token) {\n  const tn = token.tagID;\n\n  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {\n    if (p.openElements.hasInTableScope(tn)) {\n      p.openElements.popUntilTagNamePopped($.SELECT);\n\n      p._resetInsertionMode();\n\n      p.onEndTag(token);\n    }\n  } else {\n    endTagInSelect(p, token);\n  }\n} // The \"in template\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInTemplate(p, token) {\n  switch (token.tagID) {\n    // First, handle tags that can start without a mode change\n    case $.BASE:\n    case $.BASEFONT:\n    case $.BGSOUND:\n    case $.LINK:\n    case $.META:\n    case $.NOFRAMES:\n    case $.SCRIPT:\n    case $.STYLE:\n    case $.TEMPLATE:\n    case $.TITLE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    // Re-process the token in the appropriate mode\n\n    case $.CAPTION:\n    case $.COLGROUP:\n    case $.TBODY:\n    case $.TFOOT:\n    case $.THEAD:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n        p.insertionMode = InsertionMode.IN_TABLE;\n        startTagInTable(p, token);\n        break;\n      }\n\n    case $.COL:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n        p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n        startTagInColumnGroup(p, token);\n        break;\n      }\n\n    case $.TR:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n        p.insertionMode = InsertionMode.IN_TABLE_BODY;\n        startTagInTableBody(p, token);\n        break;\n      }\n\n    case $.TD:\n    case $.TH:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n        p.insertionMode = InsertionMode.IN_ROW;\n        startTagInRow(p, token);\n        break;\n      }\n\n    default:\n      {\n        p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n        p.insertionMode = InsertionMode.IN_BODY;\n        startTagInBody(p, token);\n      }\n  }\n}\n\nfunction endTagInTemplate(p, token) {\n  if (token.tagID === $.TEMPLATE) {\n    templateEndTagInHead(p, token);\n  }\n}\n\nfunction eofInTemplate(p, token) {\n  if (p.openElements.tmplCount > 0) {\n    p.openElements.popUntilTagNamePopped($.TEMPLATE);\n    p.activeFormattingElements.clearToLastMarker();\n    p.tmplInsertionModeStack.shift();\n\n    p._resetInsertionMode();\n\n    p.onEof(token);\n  } else {\n    stopParsing(p, token);\n  }\n} // The \"after body\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagAfterBody(p, token) {\n  if (token.tagID === $.HTML) {\n    startTagInBody(p, token);\n  } else {\n    tokenAfterBody(p, token);\n  }\n}\n\nfunction endTagAfterBody(p, token) {\n  var _a;\n\n  if (token.tagID === $.HTML) {\n    if (!p.fragmentContext) {\n      p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n    } //NOTE: <html> is never popped from the stack, so we need to updated\n    //the end location explicitly.\n\n\n    if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === $.HTML) {\n      p._setEndLocation(p.openElements.items[0], token); // Update the body element, if it doesn't have an end tag\n\n\n      const bodyElement = p.openElements.items[1];\n\n      if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n        p._setEndLocation(bodyElement, token);\n      }\n    }\n  } else {\n    tokenAfterBody(p, token);\n  }\n}\n\nfunction tokenAfterBody(p, token) {\n  p.insertionMode = InsertionMode.IN_BODY;\n  modeInBody(p, token);\n} // The \"in frameset\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagInFrameset(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case $.FRAMESET:\n      {\n        p._insertElement(token, NS.HTML);\n\n        break;\n      }\n\n    case $.FRAME:\n      {\n        p._appendElement(token, NS.HTML);\n\n        token.ackSelfClosing = true;\n        break;\n      }\n\n    case $.NOFRAMES:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n\n    default: // Do nothing\n\n  }\n}\n\nfunction endTagInFrameset(p, token) {\n  if (token.tagID === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n    p.openElements.pop();\n\n    if (!p.fragmentContext && p.openElements.currentTagId !== $.FRAMESET) {\n      p.insertionMode = InsertionMode.AFTER_FRAMESET;\n    }\n  }\n} // The \"after frameset\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagAfterFrameset(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case $.NOFRAMES:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n\n    default: // Do nothing\n\n  }\n}\n\nfunction endTagAfterFrameset(p, token) {\n  if (token.tagID === $.HTML) {\n    p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n  }\n} // The \"after after body\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagAfterAfterBody(p, token) {\n  if (token.tagID === $.HTML) {\n    startTagInBody(p, token);\n  } else {\n    tokenAfterAfterBody(p, token);\n  }\n}\n\nfunction tokenAfterAfterBody(p, token) {\n  p.insertionMode = InsertionMode.IN_BODY;\n  modeInBody(p, token);\n} // The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\n\n\nfunction startTagAfterAfterFrameset(p, token) {\n  switch (token.tagID) {\n    case $.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n\n    case $.NOFRAMES:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n\n    default: // Do nothing\n\n  }\n} // The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\n\n\nfunction nullCharacterInForeignContent(p, token) {\n  token.chars = unicode.REPLACEMENT_CHARACTER;\n\n  p._insertCharacters(token);\n}\n\nfunction characterInForeignContent(p, token) {\n  p._insertCharacters(token);\n\n  p.framesetOk = false;\n}\n\nfunction popUntilHtmlOrIntegrationPoint(p) {\n  while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n    p.openElements.pop();\n  }\n}\n\nfunction startTagInForeignContent(p, token) {\n  if (foreignContent.causesExit(token)) {\n    popUntilHtmlOrIntegrationPoint(p);\n\n    p._startTagOutsideForeignContent(token);\n  } else {\n    const current = p._getAdjustedCurrentElement();\n\n    const currentNs = p.treeAdapter.getNamespaceURI(current);\n\n    if (currentNs === NS.MATHML) {\n      foreignContent.adjustTokenMathMLAttrs(token);\n    } else if (currentNs === NS.SVG) {\n      foreignContent.adjustTokenSVGTagName(token);\n      foreignContent.adjustTokenSVGAttrs(token);\n    }\n\n    foreignContent.adjustTokenXMLAttrs(token);\n\n    if (token.selfClosing) {\n      p._appendElement(token, currentNs);\n    } else {\n      p._insertElement(token, currentNs);\n    }\n\n    token.ackSelfClosing = true;\n  }\n}\n\nfunction endTagInForeignContent(p, token) {\n  if (token.tagID === $.P || token.tagID === $.BR) {\n    popUntilHtmlOrIntegrationPoint(p);\n\n    p._endTagOutsideForeignContent(token);\n\n    return;\n  }\n\n  for (let i = p.openElements.stackTop; i > 0; i--) {\n    const element = p.openElements.items[i];\n\n    if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n      p._endTagOutsideForeignContent(token);\n\n      break;\n    }\n\n    const tagName = p.treeAdapter.getTagName(element);\n\n    if (tagName.toLowerCase() === token.tagName) {\n      //NOTE: update the token tag name for `_setEndLocation`.\n      token.tagName = tagName;\n      p.openElements.shortenToLength(i);\n      break;\n    }\n  }\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/cheerio/node_modules/parse5/dist/parser/index.js"],"names":["Tokenizer","TokenizerMode","OpenElementStack","FormattingElementList","EntryType","defaultTreeAdapter","doctype","foreignContent","ERR","unicode","TAG_ID","$","TAG_NAMES","TN","NS","ATTRS","SPECIAL_ELEMENTS","DOCUMENT_MODE","isNumberedHeader","getTagID","TokenType","getTokenAttr","HIDDEN_INPUT_TYPE","AA_OUTER_LOOP_ITER","AA_INNER_LOOP_ITER","InsertionMode","BASE_LOC","startLine","startCol","startOffset","endLine","endCol","endOffset","TABLE_STRUCTURE_TAGS","Set","TABLE","TBODY","TFOOT","THEAD","TR","defaultParserOptions","scriptingEnabled","sourceCodeLocationInfo","treeAdapter","onParseError","Parser","constructor","options","document","fragmentContext","scriptHandler","currentToken","stopped","insertionMode","INITIAL","originalInsertionMode","headElement","formElement","currentNotInHTML","tmplInsertionModeStack","pendingCharacterTokens","hasNonWhitespacePendingCharacterToken","framesetOk","skipNextNewLine","fosterParentingEnabled","createDocument","tokenizer","activeFormattingElements","fragmentContextID","getTagName","UNKNOWN","_setContextModes","openElements","parse","html","parser","write","getFragmentParser","opts","createElement","TEMPLATE","HTML","documentMock","unshift","IN_TEMPLATE","_initTokenizerForFragmentParsing","_insertFakeRootElement","_resetInsertionMode","_findFormInFragmentContext","getFragment","rootElement","getFirstChild","fragment","createDocumentFragment","_adoptNodes","_err","token","code","beforeToken","_a","loc","location","err","onItemPush","node","tid","isTop","_b","call","stackTop","onItemPop","_setEndLocation","current","currentTagId","isHTML","getNamespaceURI","inForeignNode","_isIntegrationPoint","_switchToTextParsing","nextTokenizerState","_insertElement","state","TEXT","switchToPlaintextParsing","IN_BODY","PLAINTEXT","_getAdjustedCurrentElement","FORM","getParentNode","TITLE","TEXTAREA","RCDATA","STYLE","XMP","IFRAME","NOEMBED","NOFRAMES","NOSCRIPT","RAWTEXT","SCRIPT","SCRIPT_DATA","_setDocumentType","name","publicId","systemId","setDocumentType","documentChildren","getChildNodes","docTypeNode","find","isDocumentTypeNode","setNodeSourceCodeLocation","_attachElementToTree","element","startTag","_shouldFosterParentOnInsertion","_fosterParentElement","parent","currentTmplContentOrNode","appendChild","_appendElement","namespaceURI","tagName","attrs","push","tagID","_insertFakeElement","_insertTemplate","tmpl","content","setTemplateContent","_appendCommentNode","commentNode","createCommentNode","data","_insertCharacters","beforeElement","_findFosterParentingLocation","insertTextBefore","chars","insertText","siblings","textNodeIdx","lastIndexOf","length","textNode","tnLoc","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","donor","recipient","child","detachNode","closingToken","ctLoc","tn","endLoc","type","END_TAG","endTag","shouldProcessStartTagTokenInForeignContent","SVG","ANNOTATION_XML","MATHML","MGLYPH","MALIGNMARK","_processToken","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","COMMENT","onComment","DOCTYPE","onDoctype","START_TAG","_processStartTag","onEndTag","EOF","onEof","WHITESPACE_CHARACTER","onWhitespaceCharacter","foreignNS","ns","getAttrList","isIntegrationPoint","_reconstructActiveFormattingElements","listLength","entries","endIndex","findIndex","entry","Marker","contains","unopenIdx","i","_closeTableCell","generateImpliedEndTags","popUntilTableCellPopped","clearToLastMarker","IN_ROW","_closePElement","generateImpliedEndTagsWithExclusion","P","popUntilTagNamePopped","tagIDs","IN_TABLE_BODY","CAPTION","IN_CAPTION","COLGROUP","IN_COLUMN_GROUP","IN_TABLE","BODY","FRAMESET","IN_FRAMESET","SELECT","_resetInsertionModeForSelect","AFTER_HEAD","BEFORE_HEAD","TD","TH","IN_CELL","HEAD","IN_HEAD","selectIdx","IN_SELECT_IN_TABLE","IN_SELECT","_isElementCausesFosterParenting","has","openElement","items","getTemplateContent","insertBefore","_isSpecialElement","id","characterInForeignContent","tokenInInitialMode","BEFORE_HTML","tokenBeforeHtml","tokenBeforeHead","tokenInHead","IN_HEAD_NO_SCRIPT","tokenInHeadNoScript","tokenAfterHead","characterInBody","characterInTable","IN_TABLE_TEXT","characterInTableText","tokenInColumnGroup","AFTER_BODY","tokenAfterBody","AFTER_AFTER_BODY","tokenAfterAfterBody","nullCharacterInForeignContent","appendComment","AFTER_FRAMESET","tokenInTableText","appendCommentToRootHtmlElement","AFTER_AFTER_FRAMESET","appendCommentToDocument","doctypeInInitialMode","misplacedDoctype","onStartTag","selfClosing","ackSelfClosing","nonVoidHtmlElementStartTagWithTrailingSolidus","startTagInForeignContent","_startTagOutsideForeignContent","startTagBeforeHtml","startTagBeforeHead","startTagInHead","startTagInHeadNoScript","startTagAfterHead","startTagInBody","startTagInTable","startTagInCaption","startTagInColumnGroup","startTagInTableBody","startTagInRow","startTagInCell","startTagInSelect","startTagInSelectInTable","startTagInTemplate","startTagAfterBody","startTagInFrameset","startTagAfterFrameset","startTagAfterAfterBody","startTagAfterAfterFrameset","endTagInForeignContent","_endTagOutsideForeignContent","endTagBeforeHtml","endTagBeforeHead","endTagInHead","endTagInHeadNoScript","endTagAfterHead","endTagInBody","endTagInText","endTagInTable","endTagInCaption","endTagInColumnGroup","endTagInTableBody","endTagInRow","endTagInCell","endTagInSelect","endTagInSelectInTable","endTagInTemplate","endTagAfterBody","endTagInFrameset","endTagAfterFrameset","eofInBody","eofInText","eofInTemplate","stopParsing","charCodeAt","CODE_POINTS","LINE_FEED","substr","whitespaceCharacterInBody","whitespaceCharacterInTableText","aaObtainFormattingElementEntry","p","formattingElementEntry","getElementEntryInScopeWithTagName","removeEntry","hasInScope","genericEndTagInBody","aaObtainFurthestBlock","furthestBlock","idx","shortenToLength","aaInnerLoop","formattingElement","lastElement","nextElement","getCommonAncestor","elementEntry","getElementEntry","counterOverflow","shouldRemoveFromOpenElements","remove","aaRecreateElementFromEntry","bookmark","newElement","replace","aaInsertLastNodeInCommonAncestor","commonAncestor","aaReplaceFormattingElement","insertElementAfterBookmark","insertAfter","callAdoptionAgency","target","htmlElement","htmlLocation","bodyElement","bodyLocation","mode","forceQuirks","QUIRKS","getDocumentMode","isConforming","nonConformingDoctype","setDocumentMode","missingDoctype","BR","endTagWithoutMatchingOpenElement","BASE","BASEFONT","BGSOUND","LINK","META","insertMarker","misplacedStartTagForHeadElement","pop","templateEndTagInHead","tmplCount","generateImpliedEndTagsThoroughly","closingOfElementWithOpenChildElements","shift","nestedNoscriptInHead","errCode","openElementsLeftAfterEof","disallowedContentInNoscriptInHead","abandonedHeadElementChild","modeInBody","htmlStartTagInBody","adoptAttributes","bodyStartTagInBody","tryPeekProperlyNestedBodyElement","framesetStartTagInBody","popAllUpToHtmlElement","addressStartTagInBody","hasInButtonScope","numberedHeaderStartTagInBody","preStartTagInBody","formStartTagInBody","inTemplate","listItemStartTagInBody","elementId","LI","DD","DT","ADDRESS","DIV","plaintextStartTagInBody","buttonStartTagInBody","BUTTON","aStartTagInBody","activeElementEntry","A","pushElement","bStartTagInBody","nobrStartTagInBody","NOBR","appletStartTagInBody","tableStartTagInBody","areaStartTagInBody","isHiddenInput","inputType","TYPE","toLowerCase","inputStartTagInBody","paramStartTagInBody","hrStartTagInBody","imageStartTagInBody","IMG","textareaStartTagInBody","xmpStartTagInBody","iframeStartTagInBody","noembedStartTagInBody","selectStartTagInBody","optgroupStartTagInBody","OPTION","rbStartTagInBody","RUBY","rtStartTagInBody","RTC","mathStartTagInBody","adjustTokenMathMLAttrs","adjustTokenXMLAttrs","svgStartTagInBody","adjustTokenSVGAttrs","genericStartTagInBody","I","S","B","U","EM","TT","BIG","CODE","FONT","SMALL","STRIKE","STRONG","H1","H2","H3","H4","H5","H6","DL","OL","UL","DIR","NAV","MAIN","MENU","ASIDE","CENTER","FIGURE","FOOTER","HEADER","HGROUP","DIALOG","DETAILS","ARTICLE","SECTION","SUMMARY","FIELDSET","BLOCKQUOTE","FIGCAPTION","WBR","AREA","EMBED","KEYGEN","HR","RB","RT","RP","PRE","LISTING","MATH","INPUT","PARAM","TRACK","SOURCE","IMAGE","APPLET","OBJECT","MARQUEE","OPTGROUP","COL","FRAME","bodyEndTagInBody","htmlEndTagInBody","addressEndTagInBody","formEndTagInBody","pEndTagInBody","liEndTagInBody","hasInListItemScope","ddEndTagInBody","numberedHeaderEndTagInBody","hasNumberedHeaderInScope","popUntilNumberedHeaderPopped","appletEndTagInBody","brEndTagInBody","eofInElementThatCanContainOnlyText","tokenInTable","captionStartTagInTable","clearBackToTableContext","colgroupStartTagInTable","colStartTagInTable","tbodyStartTagInTable","tdStartTagInTable","tableStartTagInTable","hasInTableScope","inputStartTagInTable","formStartTagInTable","savedFosterParentingState","TABLE_VOID_ELEMENTS","clearBackToTableBodyContext","hasTableBodyContextInTableScope","clearBackToTableRowContext","hasInSelectScope","isRootHtmlElementCurrent","REPLACEMENT_CHARACTER","popUntilHtmlOrIntegrationPoint","causesExit","currentNs","adjustTokenSVGTagName"],"mappings":"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","sourcesContent":["import { Tokenizer, TokenizerMode } from '../tokenizer/index.js';\nimport { OpenElementStack } from './open-element-stack.js';\nimport { FormattingElementList, EntryType } from './formatting-element-list.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\nimport * as doctype from '../common/doctype.js';\nimport * as foreignContent from '../common/foreign-content.js';\nimport { ERR } from '../common/error-codes.js';\nimport * as unicode from '../common/unicode.js';\nimport { TAG_ID as $, TAG_NAMES as TN, NS, ATTRS, SPECIAL_ELEMENTS, DOCUMENT_MODE, isNumberedHeader, getTagID, } from '../common/html.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function (InsertionMode) {\n    InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n    InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n    InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n    InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n    InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n    InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n    InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n    InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n    InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n    InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n    InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n    InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n    InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n    InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n    InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n    InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n    startLine: -1,\n    startCol: -1,\n    startOffset: -1,\n    endLine: -1,\n    endCol: -1,\n    endOffset: -1,\n};\nconst TABLE_STRUCTURE_TAGS = new Set([$.TABLE, $.TBODY, $.TFOOT, $.THEAD, $.TR]);\nconst defaultParserOptions = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    treeAdapter: defaultTreeAdapter,\n    onParseError: null,\n};\n//Parser\nexport class Parser {\n    constructor(options, document, fragmentContext = null, scriptHandler = null) {\n        this.fragmentContext = fragmentContext;\n        this.scriptHandler = scriptHandler;\n        this.currentToken = null;\n        this.stopped = false;\n        this.insertionMode = InsertionMode.INITIAL;\n        this.originalInsertionMode = InsertionMode.INITIAL;\n        this.headElement = null;\n        this.formElement = null;\n        /** Indicates that the current node is not an element in the HTML namespace */\n        this.currentNotInHTML = false;\n        /**\n         * The template insertion mode stack is maintained from the left.\n         * Ie. the topmost element will always have index 0.\n         */\n        this.tmplInsertionModeStack = [];\n        this.pendingCharacterTokens = [];\n        this.hasNonWhitespacePendingCharacterToken = false;\n        this.framesetOk = true;\n        this.skipNextNewLine = false;\n        this.fosterParentingEnabled = false;\n        this.options = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        this.treeAdapter = this.options.treeAdapter;\n        this.onParseError = this.options.onParseError;\n        // Always enable location info if we report parse errors.\n        if (this.onParseError) {\n            this.options.sourceCodeLocationInfo = true;\n        }\n        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n        this.tokenizer = new Tokenizer(this.options, this);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n        this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : $.UNKNOWN;\n        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);\n    }\n    // API\n    static parse(html, options) {\n        const parser = new this(options);\n        parser.tokenizer.write(html, true);\n        return parser.document;\n    }\n    static getFragmentParser(fragmentContext, options) {\n        const opts = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        //NOTE: use a <template> element as the fragment context if no context element was provided,\n        //so we will parse in a \"forgiving\" manner\n        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TN.TEMPLATE, NS.HTML, []));\n        //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n        //This is important for jsdom, where a new `document` cannot be created. This led to\n        //fragment parsing messing with the main `document`.\n        const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);\n        const parser = new this(opts, documentMock, fragmentContext);\n        if (parser.fragmentContextID === $.TEMPLATE) {\n            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        }\n        parser._initTokenizerForFragmentParsing();\n        parser._insertFakeRootElement();\n        parser._resetInsertionMode();\n        parser._findFormInFragmentContext();\n        return parser;\n    }\n    getFragment() {\n        const rootElement = this.treeAdapter.getFirstChild(this.document);\n        const fragment = this.treeAdapter.createDocumentFragment();\n        this._adoptNodes(rootElement, fragment);\n        return fragment;\n    }\n    //Errors\n    _err(token, code, beforeToken) {\n        var _a;\n        if (!this.onParseError)\n            return;\n        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n        const err = {\n            code,\n            startLine: loc.startLine,\n            startCol: loc.startCol,\n            startOffset: loc.startOffset,\n            endLine: beforeToken ? loc.startLine : loc.endLine,\n            endCol: beforeToken ? loc.startCol : loc.endCol,\n            endOffset: beforeToken ? loc.startOffset : loc.endOffset,\n        };\n        this.onParseError(err);\n    }\n    //Stack events\n    onItemPush(node, tid, isTop) {\n        var _a, _b;\n        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n        if (isTop && this.openElements.stackTop > 0)\n            this._setContextModes(node, tid);\n    }\n    onItemPop(node, isTop) {\n        var _a, _b;\n        if (this.options.sourceCodeLocationInfo) {\n            this._setEndLocation(node, this.currentToken);\n        }\n        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n        if (isTop) {\n            let current;\n            let currentTagId;\n            if (this.openElements.stackTop === 0 && this.fragmentContext) {\n                current = this.fragmentContext;\n                currentTagId = this.fragmentContextID;\n            }\n            else {\n                ({ current, currentTagId } = this.openElements);\n            }\n            this._setContextModes(current, currentTagId);\n        }\n    }\n    _setContextModes(current, tid) {\n        const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;\n        this.currentNotInHTML = !isHTML;\n        this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);\n    }\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = InsertionMode.TEXT;\n    }\n    switchToPlaintextParsing() {\n        this.insertionMode = InsertionMode.TEXT;\n        this.originalInsertionMode = InsertionMode.IN_BODY;\n        this.tokenizer.state = TokenizerMode.PLAINTEXT;\n    }\n    //Fragment parsing\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TN.FORM) {\n                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {\n            return;\n        }\n        switch (this.fragmentContextID) {\n            case $.TITLE:\n            case $.TEXTAREA: {\n                this.tokenizer.state = TokenizerMode.RCDATA;\n                break;\n            }\n            case $.STYLE:\n            case $.XMP:\n            case $.IFRAME:\n            case $.NOEMBED:\n            case $.NOFRAMES:\n            case $.NOSCRIPT: {\n                this.tokenizer.state = TokenizerMode.RAWTEXT;\n                break;\n            }\n            case $.SCRIPT: {\n                this.tokenizer.state = TokenizerMode.SCRIPT_DATA;\n                break;\n            }\n            case $.PLAINTEXT: {\n                this.tokenizer.state = TokenizerMode.PLAINTEXT;\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    //Tree mutation\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n        if (token.location) {\n            const documentChildren = this.treeAdapter.getChildNodes(this.document);\n            const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));\n            if (docTypeNode) {\n                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n            }\n        }\n    }\n    _attachElementToTree(element, location) {\n        if (this.options.sourceCodeLocationInfo) {\n            const loc = location && {\n                ...location,\n                startTag: location,\n            };\n            this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n        }\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        }\n        else {\n            const parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n    }\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n        this.openElements.push(element, token.tagID);\n    }\n    _insertFakeElement(tagName, tagID) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n        this._attachElementToTree(element, null);\n        this.openElements.push(element, tagID);\n    }\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl, token.location);\n        this.openElements.push(tmpl, token.tagID);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(content, null);\n    }\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement(TN.HTML, NS.HTML, []);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(element, null);\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element, $.HTML);\n    }\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n        this.treeAdapter.appendChild(parent, commentNode);\n        if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        }\n    }\n    _insertCharacters(token) {\n        let parent;\n        let beforeElement;\n        if (this._shouldFosterParentOnInsertion()) {\n            ({ parent, beforeElement } = this._findFosterParentingLocation());\n            if (beforeElement) {\n                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n            }\n            else {\n                this.treeAdapter.insertText(parent, token.chars);\n            }\n        }\n        else {\n            parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n        if (!token.location)\n            return;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n        const textNode = siblings[textNodeIdx - 1];\n        //NOTE: if we have a location assigned by another token, then just update the end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n            const { endLine, endCol, endOffset } = token.location;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n        }\n        else if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n    }\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n    _setEndLocation(element, closingToken) {\n        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n            const ctLoc = closingToken.location;\n            const tn = this.treeAdapter.getTagName(element);\n            const endLoc = \n            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n            closingToken.type === TokenType.END_TAG && tn === closingToken.tagName\n                ? {\n                    endTag: { ...ctLoc },\n                    endLine: ctLoc.endLine,\n                    endCol: ctLoc.endCol,\n                    endOffset: ctLoc.endOffset,\n                }\n                : {\n                    endLine: ctLoc.startLine,\n                    endCol: ctLoc.startCol,\n                    endOffset: ctLoc.startOffset,\n                };\n            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n    }\n    //Token processing\n    shouldProcessStartTagTokenInForeignContent(token) {\n        // Check that neither current === document, or ns === NS.HTML\n        if (!this.currentNotInHTML)\n            return false;\n        let current;\n        let currentTagId;\n        if (this.openElements.stackTop === 0 && this.fragmentContext) {\n            current = this.fragmentContext;\n            currentTagId = this.fragmentContextID;\n        }\n        else {\n            ({ current, currentTagId } = this.openElements);\n        }\n        if (token.tagID === $.SVG &&\n            this.treeAdapter.getTagName(current) === TN.ANNOTATION_XML &&\n            this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {\n            return false;\n        }\n        return (\n        // Check that `current` is not an integration point for HTML or MathML elements.\n        this.tokenizer.inForeignNode ||\n            // If it _is_ an integration point, then we might have to check that it is not an HTML\n            // integration point.\n            ((token.tagID === $.MGLYPH || token.tagID === $.MALIGNMARK) &&\n                !this._isIntegrationPoint(currentTagId, current, NS.HTML)));\n    }\n    _processToken(token) {\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                this.onCharacter(token);\n                break;\n            }\n            case TokenType.NULL_CHARACTER: {\n                this.onNullCharacter(token);\n                break;\n            }\n            case TokenType.COMMENT: {\n                this.onComment(token);\n                break;\n            }\n            case TokenType.DOCTYPE: {\n                this.onDoctype(token);\n                break;\n            }\n            case TokenType.START_TAG: {\n                this._processStartTag(token);\n                break;\n            }\n            case TokenType.END_TAG: {\n                this.onEndTag(token);\n                break;\n            }\n            case TokenType.EOF: {\n                this.onEof(token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                this.onWhitespaceCharacter(token);\n                break;\n            }\n        }\n    }\n    //Integration points\n    _isIntegrationPoint(tid, element, foreignNS) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n        return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n    }\n    //Active formatting elements reconstruction\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.entries.length;\n        if (listLength) {\n            const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));\n            const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;\n            for (let i = unopenIdx; i >= 0; i--) {\n                const entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n    //Close elements\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = InsertionMode.IN_ROW;\n    }\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n    //Insertion modes\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            //Insertion mode reset map\n            switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n                case $.TR: {\n                    this.insertionMode = InsertionMode.IN_ROW;\n                    return;\n                }\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    this.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    return;\n                }\n                case $.CAPTION: {\n                    this.insertionMode = InsertionMode.IN_CAPTION;\n                    return;\n                }\n                case $.COLGROUP: {\n                    this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                    return;\n                }\n                case $.TABLE: {\n                    this.insertionMode = InsertionMode.IN_TABLE;\n                    return;\n                }\n                case $.BODY: {\n                    this.insertionMode = InsertionMode.IN_BODY;\n                    return;\n                }\n                case $.FRAMESET: {\n                    this.insertionMode = InsertionMode.IN_FRAMESET;\n                    return;\n                }\n                case $.SELECT: {\n                    this._resetInsertionModeForSelect(i);\n                    return;\n                }\n                case $.TEMPLATE: {\n                    this.insertionMode = this.tmplInsertionModeStack[0];\n                    return;\n                }\n                case $.HTML: {\n                    this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n                    return;\n                }\n                case $.TD:\n                case $.TH: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_CELL;\n                        return;\n                    }\n                    break;\n                }\n                case $.HEAD: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_HEAD;\n                        return;\n                    }\n                    break;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_BODY;\n    }\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const tn = this.openElements.tagIDs[i];\n                if (tn === $.TEMPLATE) {\n                    break;\n                }\n                else if (tn === $.TABLE) {\n                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n                    return;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_SELECT;\n    }\n    //Foster parenting\n    _isElementCausesFosterParenting(tn) {\n        return TABLE_STRUCTURE_TAGS.has(tn);\n    }\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n    }\n    _findFosterParentingLocation() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            switch (this.openElements.tagIDs[i]) {\n                case $.TEMPLATE: {\n                    if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {\n                        return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };\n                    }\n                    break;\n                }\n                case $.TABLE: {\n                    const parent = this.treeAdapter.getParentNode(openElement);\n                    if (parent) {\n                        return { parent, beforeElement: openElement };\n                    }\n                    return { parent: this.openElements.items[i - 1], beforeElement: null };\n                }\n                default:\n                // Do nothing\n            }\n        }\n        return { parent: this.openElements.items[0], beforeElement: null };\n    }\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        }\n        else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n    //Special elements\n    _isSpecialElement(element, id) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        return SPECIAL_ELEMENTS[ns].has(id);\n    }\n    onCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            characterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE: {\n                characterInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                characterInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onNullCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            nullCharacterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onComment(token) {\n        this.skipNextNewLine = false;\n        if (this.currentNotInHTML) {\n            appendComment(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL:\n            case InsertionMode.BEFORE_HTML:\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                appendComment(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                appendCommentToRootHtmlElement(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                appendCommentToDocument(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onDoctype(token) {\n        this.skipNextNewLine = false;\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                doctypeInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD: {\n                this._err(token, ERR.misplacedDoctype);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onStartTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        this._processStartTag(token);\n        if (token.selfClosing && !token.ackSelfClosing) {\n            this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n    /**\n     * Processes a given start tag.\n     *\n     * `onStartTag` checks if a self-closing tag was recognized. When a token\n     * is moved inbetween multiple insertion modes, this check for self-closing\n     * could lead to false positives. To avoid this, `_processStartTag` is used\n     * for nested calls.\n     *\n     * @param token The token to process.\n     */\n    _processStartTag(token) {\n        if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n            startTagInForeignContent(this, token);\n        }\n        else {\n            this._startTagOutsideForeignContent(token);\n        }\n    }\n    _startTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                startTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                startTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                startTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                startTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                startTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                startTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                startTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                startTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                startTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                startTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                startTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                startTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                startTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                startTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                startTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                startTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                startTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                startTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                startTagAfterAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                startTagAfterAfterFrameset(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onEndTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        if (this.currentNotInHTML) {\n            endTagInForeignContent(this, token);\n        }\n        else {\n            this._endTagOutsideForeignContent(token);\n        }\n    }\n    _endTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                endTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                endTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                endTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                endTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                endTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                endTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                endTagInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                endTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                endTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                endTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                endTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                endTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                endTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                endTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                endTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                endTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                endTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                endTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                endTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onEof(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                eofInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                eofInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                eofInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                stopParsing(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onWhitespaceCharacter(token) {\n        if (this.skipNextNewLine) {\n            this.skipNextNewLine = false;\n            if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n                if (token.chars.length === 1) {\n                    return;\n                }\n                token.chars = token.chars.substr(1);\n            }\n        }\n        if (this.tokenizer.inForeignNode) {\n            this._insertCharacters(token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                whitespaceCharacterInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                whitespaceCharacterInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n}\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        }\n        else if (!p.openElements.hasInScope(token.tagID)) {\n            formattingElementEntry = null;\n        }\n    }\n    else {\n        genericEndTagInBody(p, token);\n    }\n    return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n    let idx = p.openElements.stackTop;\n    for (; idx >= 0; idx--) {\n        const element = p.openElements.items[idx];\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n            furthestBlock = element;\n        }\n    }\n    if (!furthestBlock) {\n        p.openElements.shortenToLength(idx < 0 ? 0 : idx);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n    return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n            p.openElements.remove(element);\n        }\n        else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n    return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n    return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    const tn = p.treeAdapter.getTagName(commonAncestor);\n    const tid = getTagID(tn);\n    if (p._isElementCausesFosterParenting(tid)) {\n        p._fosterParentElement(lastElement);\n    }\n    else {\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n        if (tid === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const { token } = formattingElementEntry;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n        if (!formattingElementEntry) {\n            break;\n        }\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n        if (!furthestBlock) {\n            break;\n        }\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n        p.treeAdapter.detachNode(lastElement);\n        if (commonAncestor)\n            aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n    p.stopped = true;\n    // NOTE: Set end locations for elements that remain on the open element stack.\n    if (token.location) {\n        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n        // This is a problem, as we might overwrite their end position here.\n        const target = p.fragmentContext ? 0 : 2;\n        for (let i = p.openElements.stackTop; i >= target; i--) {\n            p._setEndLocation(p.openElements.items[i], token);\n        }\n        // Handle `html` and `body`\n        if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n            const htmlElement = p.openElements.items[0];\n            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n            if (htmlLocation && !htmlLocation.endTag) {\n                p._setEndLocation(htmlElement, token);\n                if (p.openElements.stackTop >= 1) {\n                    const bodyElement = p.openElements.items[1];\n                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n                    if (bodyLocation && !bodyLocation.endTag) {\n                        p._setEndLocation(bodyElement, token);\n                    }\n                }\n            }\n        }\n    }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n    if (!doctype.isConforming(token)) {\n        p._err(token, ERR.nonConformingDoctype);\n    }\n    p.treeAdapter.setDocumentMode(p.document, mode);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n    p._err(token, ERR.missingDoctype, true);\n    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n    p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagID === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.BEFORE_HEAD;\n    }\n    else {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n    p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.HEAD: {\n            p._insertElement(token, NS.HTML);\n            p.headElement = p.openElements.current;\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        default: {\n            tokenBeforeHead(p, token);\n        }\n    }\n}\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement(TN.HEAD, $.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TITLE: {\n            p._switchToTextParsing(token, TokenizerMode.RCDATA);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            }\n            else {\n                p._insertElement(token, NS.HTML);\n                p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n            }\n            break;\n        }\n        case $.NOFRAMES:\n        case $.STYLE: {\n            p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            break;\n        }\n        case $.SCRIPT: {\n            p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);\n            break;\n        }\n        case $.TEMPLATE: {\n            p._insertTemplate(token);\n            p.activeFormattingElements.insertMarker();\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_TEMPLATE;\n            p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenInHead(p, token);\n        }\n    }\n}\nfunction endTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HEAD: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.AFTER_HEAD;\n            break;\n        }\n        case $.BODY:\n        case $.BR:\n        case $.HTML: {\n            tokenInHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction templateEndTagInHead(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.generateImpliedEndTagsThoroughly();\n        if (p.openElements.currentTagId !== $.TEMPLATE) {\n            p._err(token, ERR.closingOfElementWithOpenChildElements);\n        }\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.AFTER_HEAD;\n    p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.HEAD:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.STYLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            p._err(token, ERR.nestedNoscriptInHead);\n            break;\n        }\n        default: {\n            tokenInHeadNoScript(p, token);\n        }\n    }\n}\nfunction endTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.NOSCRIPT: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        case $.BR: {\n            tokenInHeadNoScript(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenInHeadNoScript(p, token) {\n    const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n    p._err(token, errCode);\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BODY: {\n            p._insertElement(token, NS.HTML);\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_BODY;\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_FRAMESET;\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            p._err(token, ERR.abandonedHeadElementChild);\n            p.openElements.push(p.headElement, $.HEAD);\n            startTagInHead(p, token);\n            p.openElements.remove(p.headElement);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenAfterHead(p, token);\n        }\n    }\n}\nfunction endTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.BODY:\n        case $.HTML:\n        case $.BR: {\n            tokenAfterHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement(TN.BODY, $.BODY);\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n    switch (token.type) {\n        case TokenType.CHARACTER: {\n            characterInBody(p, token);\n            break;\n        }\n        case TokenType.WHITESPACE_CHARACTER: {\n            whitespaceCharacterInBody(p, token);\n            break;\n        }\n        case TokenType.COMMENT: {\n            appendComment(p, token);\n            break;\n        }\n        case TokenType.START_TAG: {\n            startTagInBody(p, token);\n            break;\n        }\n        case TokenType.END_TAG: {\n            endTagInBody(p, token);\n            break;\n        }\n        case TokenType.EOF: {\n            eofInBody(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n    }\n}\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    if (isNumberedHeader(p.openElements.currentTagId)) {\n        p.openElements.pop();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n        p._insertElement(token, NS.HTML);\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n    const tn = token.tagID;\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const elementId = p.openElements.tagIDs[i];\n        if ((tn === $.LI && elementId === $.LI) ||\n            ((tn === $.DD || tn === $.DT) && (elementId === $.DD || elementId === $.DT))) {\n            p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n            p.openElements.popUntilTagNamePopped(elementId);\n            break;\n        }\n        if (elementId !== $.ADDRESS &&\n            elementId !== $.DIV &&\n            elementId !== $.P &&\n            p._isSpecialElement(p.openElements.items[i], elementId)) {\n            break;\n        }\n    }\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TN.A);\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n    if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n    const inputType = getTokenAttr(token, ATTRS.TYPE);\n    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    if (!isHiddenInput(token)) {\n        p.framesetOk = false;\n    }\n    token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n    token.tagName = TN.IMG;\n    token.tagID = $.IMG;\n    areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = TokenizerMode.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse\n//<noembed> as rawtext.\nfunction noembedStartTagInBody(p, token) {\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode =\n        p.insertionMode === InsertionMode.IN_TABLE ||\n            p.insertionMode === InsertionMode.IN_CAPTION ||\n            p.insertionMode === InsertionMode.IN_TABLE_BODY ||\n            p.insertionMode === InsertionMode.IN_ROW ||\n            p.insertionMode === InsertionMode.IN_CELL\n            ? InsertionMode.IN_SELECT_IN_TABLE\n            : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagId === $.OPTION) {\n        p.openElements.pop();\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    }\n    else {\n        p._insertElement(token, NS.MATHML);\n    }\n    token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    }\n    else {\n        p._insertElement(token, NS.SVG);\n    }\n    token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction startTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.I:\n        case $.S:\n        case $.B:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            bStartTagInBody(p, token);\n            break;\n        }\n        case $.A: {\n            aStartTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderStartTagInBody(p, token);\n            break;\n        }\n        case $.P:\n        case $.DL:\n        case $.OL:\n        case $.UL:\n        case $.DIV:\n        case $.DIR:\n        case $.NAV:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.DETAILS:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressStartTagInBody(p, token);\n            break;\n        }\n        case $.LI:\n        case $.DD:\n        case $.DT: {\n            listItemStartTagInBody(p, token);\n            break;\n        }\n        case $.BR:\n        case $.IMG:\n        case $.WBR:\n        case $.AREA:\n        case $.EMBED:\n        case $.KEYGEN: {\n            areaStartTagInBody(p, token);\n            break;\n        }\n        case $.HR: {\n            hrStartTagInBody(p, token);\n            break;\n        }\n        case $.RB:\n        case $.RTC: {\n            rbStartTagInBody(p, token);\n            break;\n        }\n        case $.RT:\n        case $.RP: {\n            rtStartTagInBody(p, token);\n            break;\n        }\n        case $.PRE:\n        case $.LISTING: {\n            preStartTagInBody(p, token);\n            break;\n        }\n        case $.XMP: {\n            xmpStartTagInBody(p, token);\n            break;\n        }\n        case $.SVG: {\n            svgStartTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlStartTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.LINK:\n        case $.META:\n        case $.STYLE:\n        case $.TITLE:\n        case $.SCRIPT:\n        case $.BGSOUND:\n        case $.BASEFONT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.BODY: {\n            bodyStartTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInBody(p, token);\n            break;\n        }\n        case $.NOBR: {\n            nobrStartTagInBody(p, token);\n            break;\n        }\n        case $.MATH: {\n            mathStartTagInBody(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInBody(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInBody(p, token);\n            break;\n        }\n        case $.PARAM:\n        case $.TRACK:\n        case $.SOURCE: {\n            paramStartTagInBody(p, token);\n            break;\n        }\n        case $.IMAGE: {\n            imageStartTagInBody(p, token);\n            break;\n        }\n        case $.BUTTON: {\n            buttonStartTagInBody(p, token);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletStartTagInBody(p, token);\n            break;\n        }\n        case $.IFRAME: {\n            iframeStartTagInBody(p, token);\n            break;\n        }\n        case $.SELECT: {\n            selectStartTagInBody(p, token);\n            break;\n        }\n        case $.OPTION:\n        case $.OPTGROUP: {\n            optgroupStartTagInBody(p, token);\n            break;\n        }\n        case $.NOEMBED: {\n            noembedStartTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            framesetStartTagInBody(p, token);\n            break;\n        }\n        case $.TEXTAREA: {\n            textareaStartTagInBody(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                noembedStartTagInBody(p, token);\n            }\n            else {\n                genericStartTagInBody(p, token);\n            }\n            break;\n        }\n        case $.PLAINTEXT: {\n            plaintextStartTagInBody(p, token);\n            break;\n        }\n        case $.COL:\n        case $.TH:\n        case $.TD:\n        case $.TR:\n        case $.HEAD:\n        case $.FRAME:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.CAPTION:\n        case $.COLGROUP: {\n            // Ignore token\n            break;\n        }\n        default: {\n            genericStartTagInBody(p, token);\n        }\n    }\n}\nfunction bodyEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        //NOTE: <body> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo) {\n            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n            if (bodyElement) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n}\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        endTagAfterBody(p, token);\n    }\n}\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const { formElement } = p;\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        }\n        else if (formElement) {\n            p.openElements.remove(formElement);\n        }\n    }\n}\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement(TN.P, $.P);\n    }\n    p._closePElement();\n}\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement(TN.BR, $.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n    const tid = token.tagID;\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        const elementId = p.openElements.tagIDs[i];\n        // Compare the tag name here, as the tag might not be a known tag with an ID.\n        if (tid === elementId && (tid !== $.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tid);\n            if (p.openElements.stackTop >= i)\n                p.openElements.shortenToLength(i);\n            break;\n        }\n        if (p._isSpecialElement(element, elementId)) {\n            break;\n        }\n    }\n}\nfunction endTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.A:\n        case $.B:\n        case $.I:\n        case $.S:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.NOBR:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            callAdoptionAgency(p, token);\n            break;\n        }\n        case $.P: {\n            pEndTagInBody(p);\n            break;\n        }\n        case $.DL:\n        case $.UL:\n        case $.OL:\n        case $.DIR:\n        case $.DIV:\n        case $.NAV:\n        case $.PRE:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.BUTTON:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.DETAILS:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.LISTING:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressEndTagInBody(p, token);\n            break;\n        }\n        case $.LI: {\n            liEndTagInBody(p);\n            break;\n        }\n        case $.DD:\n        case $.DT: {\n            ddEndTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderEndTagInBody(p);\n            break;\n        }\n        case $.BR: {\n            brEndTagInBody(p);\n            break;\n        }\n        case $.BODY: {\n            bodyEndTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlEndTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formEndTagInBody(p);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletEndTagInBody(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            genericEndTagInBody(p, token);\n        }\n    }\n}\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStack.length > 0) {\n        eofInTemplate(p, token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    var _a;\n    if (token.tagID === $.SCRIPT) {\n        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n    }\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n    p._err(token, ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n        p.pendingCharacterTokens.length = 0;\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                characterInTableText(p, token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                whitespaceCharacterInTableText(p, token);\n                break;\n            }\n            // Ignore null\n        }\n    }\n    else {\n        tokenInTable(p, token);\n    }\n}\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.COLGROUP, $.COLGROUP);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n    startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.TBODY, $.TBODY);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n    startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n}\nfunction inputStartTagInTable(p, token) {\n    if (isHiddenInput(token)) {\n        p._appendElement(token, NS.HTML);\n    }\n    else {\n        tokenInTable(p, token);\n    }\n    token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\nfunction startTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            tdStartTagInTable(p, token);\n            break;\n        }\n        case $.STYLE:\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            colStartTagInTable(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInTable(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInTable(p, token);\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            tbodyStartTagInTable(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInTable(p, token);\n            break;\n        }\n        case $.CAPTION: {\n            captionStartTagInTable(p, token);\n            break;\n        }\n        case $.COLGROUP: {\n            colgroupStartTagInTable(p, token);\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction endTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TABLE)) {\n                p.openElements.popUntilTagNamePopped($.TABLE);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n    p.fosterParentingEnabled = true;\n    // Process token in `In Body` mode\n    modeInBody(p, token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n    let i = 0;\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    }\n    else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([$.CAPTION, $.COL, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\nfunction startTagInCaption(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCaption(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.CAPTION:\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.CAPTION)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped($.CAPTION);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                if (tn === $.TABLE) {\n                    endTagInTable(p, token);\n                }\n            }\n            break;\n        }\n        case $.BODY:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.COL: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction endTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.COLGROUP: {\n            if (p.openElements.currentTagId === $.COLGROUP) {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagId === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_TABLE;\n        p._processToken(token);\n    }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_ROW;\n            break;\n        }\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertFakeElement(TN.TR, $.TR);\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                startTagInTable(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagID;\n    switch (token.tagID) {\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                endTagInTable(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableRowContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_CELL;\n            p.activeFormattingElements.insertMarker();\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                startTagInTableBody(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH: {\n            // Ignore end tag\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            startTagInRow(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCell(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.TD:\n        case $.TH: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped(tn);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_ROW;\n            }\n            break;\n        }\n        case $.TABLE:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p._closeTableCell();\n                endTagInRow(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.OPTGROUP: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.INPUT:\n        case $.KEYGEN:\n        case $.TEXTAREA:\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n                if (token.tagID !== $.SELECT) {\n                    p._processStartTag(token);\n                }\n            }\n            break;\n        }\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.OPTGROUP: {\n            if (p.openElements.stackTop > 0 &&\n                p.openElements.currentTagId === $.OPTION &&\n                p.openElements.tagIDs[p.openElements.stackTop - 1] === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n    else {\n        startTagInSelect(p, token);\n    }\n}\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p.onEndTag(token);\n        }\n    }\n    else {\n        endTagInSelect(p, token);\n    }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    switch (token.tagID) {\n        // First, handle tags that can start without a mode change\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        // Re-process the token in the appropriate mode\n        case $.CAPTION:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n            break;\n        }\n        case $.COL: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n            p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n            startTagInColumnGroup(p, token);\n            break;\n        }\n        case $.TR: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n            p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            startTagInTableBody(p, token);\n            break;\n        }\n        case $.TD:\n        case $.TH: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        default: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n            p.insertionMode = InsertionMode.IN_BODY;\n            startTagInBody(p, token);\n        }\n    }\n}\nfunction endTagInTemplate(p, token) {\n    if (token.tagID === $.TEMPLATE) {\n        templateEndTagInHead(p, token);\n    }\n}\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n        p.onEof(token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction endTagAfterBody(p, token) {\n    var _a;\n    if (token.tagID === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n        }\n        //NOTE: <html> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === $.HTML) {\n            p._setEndLocation(p.openElements.items[0], token);\n            // Update the body element, if it doesn't have an end tag\n            const bodyElement = p.openElements.items[1];\n            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.FRAME: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInFrameset(p, token) {\n    if (token.tagID === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n        if (!p.fragmentContext && p.openElements.currentTagId !== $.FRAMESET) {\n            p.insertionMode = InsertionMode.AFTER_FRAMESET;\n        }\n    }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagID === $.HTML) {\n        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n    }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterAfterBody(p, token);\n    }\n}\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n        !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n        p.openElements.pop();\n    }\n}\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token)) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._startTagOutsideForeignContent(token);\n    }\n    else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        }\n        else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n        foreignContent.adjustTokenXMLAttrs(token);\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        }\n        else {\n            p._insertElement(token, currentNs);\n        }\n        token.ackSelfClosing = true;\n    }\n}\nfunction endTagInForeignContent(p, token) {\n    if (token.tagID === $.P || token.tagID === $.BR) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._endTagOutsideForeignContent(token);\n        return;\n    }\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._endTagOutsideForeignContent(token);\n            break;\n        }\n        const tagName = p.treeAdapter.getTagName(element);\n        if (tagName.toLowerCase() === token.tagName) {\n            //NOTE: update the token tag name for `_setEndLocation`.\n            token.tagName = tagName;\n            p.openElements.shortenToLength(i);\n            break;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}