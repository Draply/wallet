{"ast":null,"code":"const timeoutAfter = timeMs => {\n  let timeoutHandle = null;\n  const promise = new Promise(resolve => {\n    timeoutHandle = setTimeout(() => {\n      resolve({\n        error: undefined,\n        errorMessage: `Property timeout: exceeded limit of ${timeMs} milliseconds`\n      });\n    }, timeMs);\n  });\n  return {\n    clear: () => clearTimeout(timeoutHandle),\n    promise\n  };\n};\n\nexport class TimeoutProperty {\n  constructor(property, timeMs) {\n    this.property = property;\n    this.timeMs = timeMs;\n  }\n\n  isAsync() {\n    return true;\n  }\n\n  generate(mrng, runId) {\n    return this.property.generate(mrng, runId);\n  }\n\n  shrink(value) {\n    return this.property.shrink(value);\n  }\n\n  async run(v) {\n    const t = timeoutAfter(this.timeMs);\n    const propRun = Promise.race([this.property.run(v), t.promise]);\n    propRun.then(t.clear, t.clear);\n    return propRun;\n  }\n\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/check/property/TimeoutProperty.js"],"names":["timeoutAfter","timeMs","timeoutHandle","promise","Promise","resolve","setTimeout","error","undefined","errorMessage","clear","clearTimeout","TimeoutProperty","constructor","property","isAsync","generate","mrng","runId","shrink","value","run","v","t","propRun","race","then"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,MAAD,IAAY;AAC7B,MAAIC,aAAa,GAAG,IAApB;AACA,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACrCH,IAAAA,aAAa,GAAGI,UAAU,CAAC,MAAM;AAC7BD,MAAAA,OAAO,CAAC;AAAEE,QAAAA,KAAK,EAAEC,SAAT;AAAoBC,QAAAA,YAAY,EAAG,uCAAsCR,MAAO;AAAhF,OAAD,CAAP;AACH,KAFyB,EAEvBA,MAFuB,CAA1B;AAGH,GAJe,CAAhB;AAKA,SAAO;AACHS,IAAAA,KAAK,EAAE,MAAMC,YAAY,CAACT,aAAD,CADtB;AAEHC,IAAAA;AAFG,GAAP;AAIH,CAXD;;AAYA,OAAO,MAAMS,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,QAAD,EAAWb,MAAX,EAAmB;AAC1B,SAAKa,QAAL,GAAgBA,QAAhB;AACA,SAAKb,MAAL,GAAcA,MAAd;AACH;;AACDc,EAAAA,OAAO,GAAG;AACN,WAAO,IAAP;AACH;;AACDC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAc;AAClB,WAAO,KAAKJ,QAAL,CAAcE,QAAd,CAAuBC,IAAvB,EAA6BC,KAA7B,CAAP;AACH;;AACDC,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,WAAO,KAAKN,QAAL,CAAcK,MAAd,CAAqBC,KAArB,CAAP;AACH;;AACQ,QAAHC,GAAG,CAACC,CAAD,EAAI;AACT,UAAMC,CAAC,GAAGvB,YAAY,CAAC,KAAKC,MAAN,CAAtB;AACA,UAAMuB,OAAO,GAAGpB,OAAO,CAACqB,IAAR,CAAa,CAAC,KAAKX,QAAL,CAAcO,GAAd,CAAkBC,CAAlB,CAAD,EAAuBC,CAAC,CAACpB,OAAzB,CAAb,CAAhB;AACAqB,IAAAA,OAAO,CAACE,IAAR,CAAaH,CAAC,CAACb,KAAf,EAAsBa,CAAC,CAACb,KAAxB;AACA,WAAOc,OAAP;AACH;;AAnBwB","sourcesContent":["const timeoutAfter = (timeMs) => {\n    let timeoutHandle = null;\n    const promise = new Promise((resolve) => {\n        timeoutHandle = setTimeout(() => {\n            resolve({ error: undefined, errorMessage: `Property timeout: exceeded limit of ${timeMs} milliseconds` });\n        }, timeMs);\n    });\n    return {\n        clear: () => clearTimeout(timeoutHandle),\n        promise,\n    };\n};\nexport class TimeoutProperty {\n    constructor(property, timeMs) {\n        this.property = property;\n        this.timeMs = timeMs;\n    }\n    isAsync() {\n        return true;\n    }\n    generate(mrng, runId) {\n        return this.property.generate(mrng, runId);\n    }\n    shrink(value) {\n        return this.property.shrink(value);\n    }\n    async run(v) {\n        const t = timeoutAfter(this.timeMs);\n        const propRun = Promise.race([this.property.run(v), t.promise]);\n        propRun.then(t.clear, t.clear);\n        return propRun;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}