{"ast":null,"code":"import { bigUintN } from '../bigUintN.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { applyFlagsOnChars, computeFlagsFromChars, computeNextFlags, computeTogglePositions } from './helpers/ToggleFlags.js';\nexport class MixedCaseArbitrary extends Arbitrary {\n  constructor(stringArb, toggleCase, untoggleAll) {\n    super();\n    this.stringArb = stringArb;\n    this.toggleCase = toggleCase;\n    this.untoggleAll = untoggleAll;\n  }\n\n  buildContextFor(rawStringValue, flagsValue) {\n    return {\n      rawString: rawStringValue.value,\n      rawStringContext: rawStringValue.context,\n      flags: flagsValue.value,\n      flagsContext: flagsValue.context\n    };\n  }\n\n  generate(mrng, biasFactor) {\n    const rawStringValue = this.stringArb.generate(mrng, biasFactor);\n    const chars = [...rawStringValue.value];\n    const togglePositions = computeTogglePositions(chars, this.toggleCase);\n    const flagsArb = bigUintN(togglePositions.length);\n    const flagsValue = flagsArb.generate(mrng, undefined);\n    applyFlagsOnChars(chars, flagsValue.value, togglePositions, this.toggleCase);\n    return new Value(chars.join(''), this.buildContextFor(rawStringValue, flagsValue));\n  }\n\n  canShrinkWithoutContext(value) {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    return this.untoggleAll !== undefined ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value)) : this.stringArb.canShrinkWithoutContext(value);\n  }\n\n  shrink(value, context) {\n    let contextSafe;\n\n    if (context !== undefined) {\n      contextSafe = context;\n    } else {\n      if (this.untoggleAll !== undefined) {\n        const untoggledValue = this.untoggleAll(value);\n        const valueChars = [...value];\n        const untoggledValueChars = [...untoggledValue];\n        const togglePositions = computeTogglePositions(untoggledValueChars, this.toggleCase);\n        contextSafe = {\n          rawString: untoggledValue,\n          rawStringContext: undefined,\n          flags: computeFlagsFromChars(untoggledValueChars, valueChars, togglePositions),\n          flagsContext: undefined\n        };\n      } else {\n        contextSafe = {\n          rawString: value,\n          rawStringContext: undefined,\n          flags: BigInt(0),\n          flagsContext: undefined\n        };\n      }\n    }\n\n    const rawString = contextSafe.rawString;\n    const flags = contextSafe.flags;\n    return this.stringArb.shrink(rawString, contextSafe.rawStringContext).map(nRawStringValue => {\n      const nChars = [...nRawStringValue.value];\n      const nTogglePositions = computeTogglePositions(nChars, this.toggleCase);\n      const nFlags = computeNextFlags(flags, nTogglePositions.length);\n      applyFlagsOnChars(nChars, nFlags, nTogglePositions, this.toggleCase);\n      return new Value(nChars.join(''), this.buildContextFor(nRawStringValue, new Value(nFlags, undefined)));\n    }).join(makeLazy(() => {\n      const chars = [...rawString];\n      const togglePositions = computeTogglePositions(chars, this.toggleCase);\n      return bigUintN(togglePositions.length).shrink(flags, contextSafe.flagsContext).map(nFlagsValue => {\n        const nChars = chars.slice();\n        applyFlagsOnChars(nChars, nFlagsValue.value, togglePositions, this.toggleCase);\n        return new Value(nChars.join(''), this.buildContextFor(new Value(rawString, contextSafe.rawStringContext), nFlagsValue));\n      });\n    }));\n  }\n\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/MixedCaseArbitrary.js"],"names":["bigUintN","Arbitrary","Value","makeLazy","applyFlagsOnChars","computeFlagsFromChars","computeNextFlags","computeTogglePositions","MixedCaseArbitrary","constructor","stringArb","toggleCase","untoggleAll","buildContextFor","rawStringValue","flagsValue","rawString","value","rawStringContext","context","flags","flagsContext","generate","mrng","biasFactor","chars","togglePositions","flagsArb","length","undefined","join","canShrinkWithoutContext","shrink","contextSafe","untoggledValue","valueChars","untoggledValueChars","BigInt","map","nRawStringValue","nChars","nTogglePositions","nFlags","nFlagsValue","slice"],"mappings":"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","sourcesContent":["import { bigUintN } from '../bigUintN.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { applyFlagsOnChars, computeFlagsFromChars, computeNextFlags, computeTogglePositions, } from './helpers/ToggleFlags.js';\nexport class MixedCaseArbitrary extends Arbitrary {\n    constructor(stringArb, toggleCase, untoggleAll) {\n        super();\n        this.stringArb = stringArb;\n        this.toggleCase = toggleCase;\n        this.untoggleAll = untoggleAll;\n    }\n    buildContextFor(rawStringValue, flagsValue) {\n        return {\n            rawString: rawStringValue.value,\n            rawStringContext: rawStringValue.context,\n            flags: flagsValue.value,\n            flagsContext: flagsValue.context,\n        };\n    }\n    generate(mrng, biasFactor) {\n        const rawStringValue = this.stringArb.generate(mrng, biasFactor);\n        const chars = [...rawStringValue.value];\n        const togglePositions = computeTogglePositions(chars, this.toggleCase);\n        const flagsArb = bigUintN(togglePositions.length);\n        const flagsValue = flagsArb.generate(mrng, undefined);\n        applyFlagsOnChars(chars, flagsValue.value, togglePositions, this.toggleCase);\n        return new Value(chars.join(''), this.buildContextFor(rawStringValue, flagsValue));\n    }\n    canShrinkWithoutContext(value) {\n        if (typeof value !== 'string') {\n            return false;\n        }\n        return this.untoggleAll !== undefined\n            ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value))\n            :\n                this.stringArb.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        let contextSafe;\n        if (context !== undefined) {\n            contextSafe = context;\n        }\n        else {\n            if (this.untoggleAll !== undefined) {\n                const untoggledValue = this.untoggleAll(value);\n                const valueChars = [...value];\n                const untoggledValueChars = [...untoggledValue];\n                const togglePositions = computeTogglePositions(untoggledValueChars, this.toggleCase);\n                contextSafe = {\n                    rawString: untoggledValue,\n                    rawStringContext: undefined,\n                    flags: computeFlagsFromChars(untoggledValueChars, valueChars, togglePositions),\n                    flagsContext: undefined,\n                };\n            }\n            else {\n                contextSafe = {\n                    rawString: value,\n                    rawStringContext: undefined,\n                    flags: BigInt(0),\n                    flagsContext: undefined,\n                };\n            }\n        }\n        const rawString = contextSafe.rawString;\n        const flags = contextSafe.flags;\n        return this.stringArb\n            .shrink(rawString, contextSafe.rawStringContext)\n            .map((nRawStringValue) => {\n            const nChars = [...nRawStringValue.value];\n            const nTogglePositions = computeTogglePositions(nChars, this.toggleCase);\n            const nFlags = computeNextFlags(flags, nTogglePositions.length);\n            applyFlagsOnChars(nChars, nFlags, nTogglePositions, this.toggleCase);\n            return new Value(nChars.join(''), this.buildContextFor(nRawStringValue, new Value(nFlags, undefined)));\n        })\n            .join(makeLazy(() => {\n            const chars = [...rawString];\n            const togglePositions = computeTogglePositions(chars, this.toggleCase);\n            return bigUintN(togglePositions.length)\n                .shrink(flags, contextSafe.flagsContext)\n                .map((nFlagsValue) => {\n                const nChars = chars.slice();\n                applyFlagsOnChars(nChars, nFlagsValue.value, togglePositions, this.toggleCase);\n                return new Value(nChars.join(''), this.buildContextFor(new Value(rawString, contextSafe.rawStringContext), nFlagsValue));\n            });\n        }));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}