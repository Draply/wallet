{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\n\nfunction array(arb) {\n  const nextArb = convertToNext(arb);\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (args[0] === undefined) return convertFromNext(new ArrayArbitrary(nextArb, 0, maxLengthFromMinLength(0)));\n\n  if (typeof args[0] === 'object') {\n    const minLength = args[0].minLength || 0;\n    const specifiedMaxLength = args[0].maxLength;\n    const maxLength = specifiedMaxLength !== undefined ? specifiedMaxLength : maxLengthFromMinLength(minLength);\n    return convertFromNext(new ArrayArbitrary(nextArb, minLength, maxLength));\n  }\n\n  if (args[1] !== undefined) return convertFromNext(new ArrayArbitrary(nextArb, args[0], args[1]));\n  return convertFromNext(new ArrayArbitrary(nextArb, 0, args[0]));\n}\n\nexport { array };","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/array.js"],"names":["convertFromNext","convertToNext","ArrayArbitrary","maxLengthFromMinLength","array","arb","nextArb","args","undefined","minLength","specifiedMaxLength","maxLength"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,cAAT,QAA+B,gCAA/B;AACA,SAASC,sBAAT,QAAuC,gDAAvC;;AACA,SAASC,KAAT,CAAeC,GAAf,EAA6B;AACzB,QAAMC,OAAO,GAAGL,aAAa,CAACI,GAAD,CAA7B;;AADyB,oCAANE,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAEzB,MAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYC,SAAhB,EACI,OAAOR,eAAe,CAAC,IAAIE,cAAJ,CAAmBI,OAAnB,EAA4B,CAA5B,EAA+BH,sBAAsB,CAAC,CAAD,CAArD,CAAD,CAAtB;;AACJ,MAAI,OAAOI,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC7B,UAAME,SAAS,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQE,SAAR,IAAqB,CAAvC;AACA,UAAMC,kBAAkB,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,SAAnC;AACA,UAAMA,SAAS,GAAGD,kBAAkB,KAAKF,SAAvB,GAAmCE,kBAAnC,GAAwDP,sBAAsB,CAACM,SAAD,CAAhG;AACA,WAAOT,eAAe,CAAC,IAAIE,cAAJ,CAAmBI,OAAnB,EAA4BG,SAA5B,EAAuCE,SAAvC,CAAD,CAAtB;AACH;;AACD,MAAIJ,IAAI,CAAC,CAAD,CAAJ,KAAYC,SAAhB,EACI,OAAOR,eAAe,CAAC,IAAIE,cAAJ,CAAmBI,OAAnB,EAA4BC,IAAI,CAAC,CAAD,CAAhC,EAAqCA,IAAI,CAAC,CAAD,CAAzC,CAAD,CAAtB;AACJ,SAAOP,eAAe,CAAC,IAAIE,cAAJ,CAAmBI,OAAnB,EAA4B,CAA5B,EAA+BC,IAAI,CAAC,CAAD,CAAnC,CAAD,CAAtB;AACH;;AACD,SAASH,KAAT","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\nfunction array(arb, ...args) {\n    const nextArb = convertToNext(arb);\n    if (args[0] === undefined)\n        return convertFromNext(new ArrayArbitrary(nextArb, 0, maxLengthFromMinLength(0)));\n    if (typeof args[0] === 'object') {\n        const minLength = args[0].minLength || 0;\n        const specifiedMaxLength = args[0].maxLength;\n        const maxLength = specifiedMaxLength !== undefined ? specifiedMaxLength : maxLengthFromMinLength(minLength);\n        return convertFromNext(new ArrayArbitrary(nextArb, minLength, maxLength));\n    }\n    if (args[1] !== undefined)\n        return convertFromNext(new ArrayArbitrary(nextArb, args[0], args[1]));\n    return convertFromNext(new ArrayArbitrary(nextArb, 0, args[0]));\n}\nexport { array };\n"]},"metadata":{},"sourceType":"module"}