{"ast":null,"code":"export function buildValuesAndSeparateKeysToObjectMapper(keys, noKeyValue) {\n  return function valuesAndSeparateKeysToObjectMapper(gs) {\n    const obj = {};\n\n    for (let idx = 0; idx !== keys.length; ++idx) {\n      const valueWrapper = gs[idx];\n\n      if (valueWrapper !== noKeyValue) {\n        Object.defineProperty(obj, keys[idx], {\n          value: valueWrapper,\n          configurable: true,\n          enumerable: true,\n          writable: true\n        });\n      }\n    }\n\n    return obj;\n  };\n}\nexport function buildValuesAndSeparateKeysToObjectUnmapper(keys, noKeyValue) {\n  return function valuesAndSeparateKeysToObjectUnmapper(value) {\n    if (typeof value !== 'object' || value === null) {\n      throw new Error('Incompatible instance received: should be a non-null object');\n    }\n\n    if (!('constructor' in value) || value.constructor !== Object) {\n      throw new Error('Incompatible instance received: should be of exact type Object');\n    }\n\n    let extractedPropertiesCount = 0;\n    const extractedValues = [];\n\n    for (let idx = 0; idx !== keys.length; ++idx) {\n      const descriptor = Object.getOwnPropertyDescriptor(value, keys[idx]);\n\n      if (descriptor !== undefined) {\n        if (!descriptor.configurable || !descriptor.enumerable || !descriptor.writable) {\n          throw new Error('Incompatible instance received: should contain only c/e/w properties');\n        }\n\n        if (descriptor.get !== undefined || descriptor.set !== undefined) {\n          throw new Error('Incompatible instance received: should contain only no get/set properties');\n        }\n\n        ++extractedPropertiesCount;\n        extractedValues.push(descriptor.value);\n      } else {\n        extractedValues.push(noKeyValue);\n      }\n    }\n\n    const namePropertiesCount = Object.getOwnPropertyNames(value).length;\n    const symbolPropertiesCount = Object.getOwnPropertySymbols(value).length;\n\n    if (extractedPropertiesCount !== namePropertiesCount + symbolPropertiesCount) {\n      throw new Error('Incompatible instance received: should not contain extra properties');\n    }\n\n    return extractedValues;\n  };\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/ValuesAndSeparateKeysToObject.js"],"names":["buildValuesAndSeparateKeysToObjectMapper","keys","noKeyValue","valuesAndSeparateKeysToObjectMapper","gs","obj","idx","length","valueWrapper","Object","defineProperty","value","configurable","enumerable","writable","buildValuesAndSeparateKeysToObjectUnmapper","valuesAndSeparateKeysToObjectUnmapper","Error","constructor","extractedPropertiesCount","extractedValues","descriptor","getOwnPropertyDescriptor","undefined","get","set","push","namePropertiesCount","getOwnPropertyNames","symbolPropertiesCount","getOwnPropertySymbols"],"mappings":"AAAA,OAAO,SAASA,wCAAT,CAAkDC,IAAlD,EAAwDC,UAAxD,EAAoE;AACvE,SAAO,SAASC,mCAAT,CAA6CC,EAA7C,EAAiD;AACpD,UAAMC,GAAG,GAAG,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,KAAKL,IAAI,CAACM,MAA/B,EAAuC,EAAED,GAAzC,EAA8C;AAC1C,YAAME,YAAY,GAAGJ,EAAE,CAACE,GAAD,CAAvB;;AACA,UAAIE,YAAY,KAAKN,UAArB,EAAiC;AAC7BO,QAAAA,MAAM,CAACC,cAAP,CAAsBL,GAAtB,EAA2BJ,IAAI,CAACK,GAAD,CAA/B,EAAsC;AAClCK,UAAAA,KAAK,EAAEH,YAD2B;AAElCI,UAAAA,YAAY,EAAE,IAFoB;AAGlCC,UAAAA,UAAU,EAAE,IAHsB;AAIlCC,UAAAA,QAAQ,EAAE;AAJwB,SAAtC;AAMH;AACJ;;AACD,WAAOT,GAAP;AACH,GAdD;AAeH;AACD,OAAO,SAASU,0CAAT,CAAoDd,IAApD,EAA0DC,UAA1D,EAAsE;AACzE,SAAO,SAASc,qCAAT,CAA+CL,KAA/C,EAAsD;AACzD,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC7C,YAAM,IAAIM,KAAJ,CAAU,6DAAV,CAAN;AACH;;AACD,QAAI,EAAE,iBAAiBN,KAAnB,KAA6BA,KAAK,CAACO,WAAN,KAAsBT,MAAvD,EAA+D;AAC3D,YAAM,IAAIQ,KAAJ,CAAU,gEAAV,CAAN;AACH;;AACD,QAAIE,wBAAwB,GAAG,CAA/B;AACA,UAAMC,eAAe,GAAG,EAAxB;;AACA,SAAK,IAAId,GAAG,GAAG,CAAf,EAAkBA,GAAG,KAAKL,IAAI,CAACM,MAA/B,EAAuC,EAAED,GAAzC,EAA8C;AAC1C,YAAMe,UAAU,GAAGZ,MAAM,CAACa,wBAAP,CAAgCX,KAAhC,EAAuCV,IAAI,CAACK,GAAD,CAA3C,CAAnB;;AACA,UAAIe,UAAU,KAAKE,SAAnB,EAA8B;AAC1B,YAAI,CAACF,UAAU,CAACT,YAAZ,IAA4B,CAACS,UAAU,CAACR,UAAxC,IAAsD,CAACQ,UAAU,CAACP,QAAtE,EAAgF;AAC5E,gBAAM,IAAIG,KAAJ,CAAU,sEAAV,CAAN;AACH;;AACD,YAAII,UAAU,CAACG,GAAX,KAAmBD,SAAnB,IAAgCF,UAAU,CAACI,GAAX,KAAmBF,SAAvD,EAAkE;AAC9D,gBAAM,IAAIN,KAAJ,CAAU,2EAAV,CAAN;AACH;;AACD,UAAEE,wBAAF;AACAC,QAAAA,eAAe,CAACM,IAAhB,CAAqBL,UAAU,CAACV,KAAhC;AACH,OATD,MAUK;AACDS,QAAAA,eAAe,CAACM,IAAhB,CAAqBxB,UAArB;AACH;AACJ;;AACD,UAAMyB,mBAAmB,GAAGlB,MAAM,CAACmB,mBAAP,CAA2BjB,KAA3B,EAAkCJ,MAA9D;AACA,UAAMsB,qBAAqB,GAAGpB,MAAM,CAACqB,qBAAP,CAA6BnB,KAA7B,EAAoCJ,MAAlE;;AACA,QAAIY,wBAAwB,KAAKQ,mBAAmB,GAAGE,qBAAvD,EAA8E;AAC1E,YAAM,IAAIZ,KAAJ,CAAU,qEAAV,CAAN;AACH;;AACD,WAAOG,eAAP;AACH,GA/BD;AAgCH","sourcesContent":["export function buildValuesAndSeparateKeysToObjectMapper(keys, noKeyValue) {\n    return function valuesAndSeparateKeysToObjectMapper(gs) {\n        const obj = {};\n        for (let idx = 0; idx !== keys.length; ++idx) {\n            const valueWrapper = gs[idx];\n            if (valueWrapper !== noKeyValue) {\n                Object.defineProperty(obj, keys[idx], {\n                    value: valueWrapper,\n                    configurable: true,\n                    enumerable: true,\n                    writable: true,\n                });\n            }\n        }\n        return obj;\n    };\n}\nexport function buildValuesAndSeparateKeysToObjectUnmapper(keys, noKeyValue) {\n    return function valuesAndSeparateKeysToObjectUnmapper(value) {\n        if (typeof value !== 'object' || value === null) {\n            throw new Error('Incompatible instance received: should be a non-null object');\n        }\n        if (!('constructor' in value) || value.constructor !== Object) {\n            throw new Error('Incompatible instance received: should be of exact type Object');\n        }\n        let extractedPropertiesCount = 0;\n        const extractedValues = [];\n        for (let idx = 0; idx !== keys.length; ++idx) {\n            const descriptor = Object.getOwnPropertyDescriptor(value, keys[idx]);\n            if (descriptor !== undefined) {\n                if (!descriptor.configurable || !descriptor.enumerable || !descriptor.writable) {\n                    throw new Error('Incompatible instance received: should contain only c/e/w properties');\n                }\n                if (descriptor.get !== undefined || descriptor.set !== undefined) {\n                    throw new Error('Incompatible instance received: should contain only no get/set properties');\n                }\n                ++extractedPropertiesCount;\n                extractedValues.push(descriptor.value);\n            }\n            else {\n                extractedValues.push(noKeyValue);\n            }\n        }\n        const namePropertiesCount = Object.getOwnPropertyNames(value).length;\n        const symbolPropertiesCount = Object.getOwnPropertySymbols(value).length;\n        if (extractedPropertiesCount !== namePropertiesCount + symbolPropertiesCount) {\n            throw new Error('Incompatible instance received: should not contain extra properties');\n        }\n        return extractedValues;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}