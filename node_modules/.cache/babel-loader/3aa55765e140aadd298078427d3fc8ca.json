{"ast":null,"code":"import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint } from '../common/unicode.js';\nimport { TokenType, getTokenAttr } from '../common/token.js';\nimport { htmlDecodeTree, BinTrieFlags, determineBranch } from 'entities/lib/decode.js';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js'; //C1 Unicode control character reference replacements\n\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([[0x80, 8364], [0x82, 8218], [0x83, 402], [0x84, 8222], [0x85, 8230], [0x86, 8224], [0x87, 8225], [0x88, 710], [0x89, 8240], [0x8a, 352], [0x8b, 8249], [0x8c, 338], [0x8e, 381], [0x91, 8216], [0x92, 8217], [0x93, 8220], [0x94, 8221], [0x95, 8226], [0x96, 8211], [0x97, 8212], [0x98, 732], [0x99, 8482], [0x9a, 353], [0x9b, 8250], [0x9c, 339], [0x9e, 382], [0x9f, 376]]); //States\n\nvar State;\n\n(function (State) {\n  State[State[\"DATA\"] = 0] = \"DATA\";\n  State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n  State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n  State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n  State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n  State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n  State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n  State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n  State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n  State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n  State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n  State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n  State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n  State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n  State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n  State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n  State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n  State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n  State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n  State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n  State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n  State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n  State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n  State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n  State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n  State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n  State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n  State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n  State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n  State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n  State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n  State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n  State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n  State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n  State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n  State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n  State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n  State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n  State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n  State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n  State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n  State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n  State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n  State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {})); //Tokenizer initial states for different modes\n\n\nexport const TokenizerMode = {\n  DATA: State.DATA,\n  RCDATA: State.RCDATA,\n  RAWTEXT: State.RAWTEXT,\n  SCRIPT_DATA: State.SCRIPT_DATA,\n  PLAINTEXT: State.PLAINTEXT,\n  CDATA_SECTION: State.CDATA_SECTION\n}; //Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\n\nfunction isAsciiDigit(cp) {\n  return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n  return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n  return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLower(cp) {\n  return cp + 32;\n}\n\nfunction isWhitespace(cp) {\n  return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n  return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\n\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n  return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n} //Tokenizer\n\n\nexport class Tokenizer {\n  constructor(options, handler) {\n    this.options = options;\n    this.handler = handler;\n    this.paused = false;\n    /** Ensures that the parsing loop isn't run multiple times at once. */\n\n    this.inLoop = false;\n    /**\n     * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n     * and that it is not an integration point for either MathML or HTML.\n     *\n     * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n     */\n\n    this.inForeignNode = false;\n    this.lastStartTagName = '';\n    this.active = false;\n    this.state = State.DATA;\n    this.returnState = State.DATA;\n    this.charRefCode = -1;\n    this.consumedAfterSnapshot = -1;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = {\n      name: '',\n      value: ''\n    };\n    this.preprocessor = new Preprocessor(handler);\n    this.currentLocation = this.getCurrentLocation(-1);\n  } //Errors\n\n\n  _err(code) {\n    var _a, _b;\n\n    (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n  } // NOTE: `offset` may never run across line boundaries.\n\n\n  getCurrentLocation(offset) {\n    if (!this.options.sourceCodeLocationInfo) {\n      return null;\n    }\n\n    return {\n      startLine: this.preprocessor.line,\n      startCol: this.preprocessor.col - offset,\n      startOffset: this.preprocessor.offset - offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    };\n  }\n\n  _runParsingLoop() {\n    if (this.inLoop) return;\n    this.inLoop = true;\n\n    while (this.active && !this.paused) {\n      this.consumedAfterSnapshot = 0;\n\n      const cp = this._consume();\n\n      if (!this._ensureHibernation()) {\n        this._callState(cp);\n      }\n    }\n\n    this.inLoop = false;\n  } //API\n\n\n  pause() {\n    this.paused = true;\n  }\n\n  resume(writeCallback) {\n    if (!this.paused) {\n      throw new Error('Parser was already resumed');\n    }\n\n    this.paused = false; // Necessary for synchronous resume.\n\n    if (this.inLoop) return;\n\n    this._runParsingLoop();\n\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n\n  write(chunk, isLastChunk, writeCallback) {\n    this.active = true;\n    this.preprocessor.write(chunk, isLastChunk);\n\n    this._runParsingLoop();\n\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n\n  insertHtmlAtCurrentPos(chunk) {\n    this.active = true;\n    this.preprocessor.insertHtmlAtCurrentPos(chunk);\n\n    this._runParsingLoop();\n  } //Hibernation\n\n\n  _ensureHibernation() {\n    if (this.preprocessor.endOfChunkHit) {\n      this._unconsume(this.consumedAfterSnapshot);\n\n      this.active = false;\n      return true;\n    }\n\n    return false;\n  } //Consumption\n\n\n  _consume() {\n    this.consumedAfterSnapshot++;\n    return this.preprocessor.advance();\n  }\n\n  _unconsume(count) {\n    this.consumedAfterSnapshot -= count;\n    this.preprocessor.retreat(count);\n  }\n\n  _reconsumeInState(state, cp) {\n    this.state = state;\n\n    this._callState(cp);\n  }\n\n  _advanceBy(count) {\n    this.consumedAfterSnapshot += count;\n\n    for (let i = 0; i < count; i++) {\n      this.preprocessor.advance();\n    }\n  }\n\n  _consumeSequenceIfMatch(pattern, caseSensitive) {\n    if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n      // We will already have consumed one character before calling this method.\n      this._advanceBy(pattern.length - 1);\n\n      return true;\n    }\n\n    return false;\n  } //Token creation\n\n\n  _createStartTagToken() {\n    this.currentToken = {\n      type: TokenType.START_TAG,\n      tagName: '',\n      tagID: TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(1)\n    };\n  }\n\n  _createEndTagToken() {\n    this.currentToken = {\n      type: TokenType.END_TAG,\n      tagName: '',\n      tagID: TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(2)\n    };\n  }\n\n  _createCommentToken(offset) {\n    this.currentToken = {\n      type: TokenType.COMMENT,\n      data: '',\n      location: this.getCurrentLocation(offset)\n    };\n  }\n\n  _createDoctypeToken(initialName) {\n    this.currentToken = {\n      type: TokenType.DOCTYPE,\n      name: initialName,\n      forceQuirks: false,\n      publicId: null,\n      systemId: null,\n      location: this.currentLocation\n    };\n  }\n\n  _createCharacterToken(type, chars) {\n    this.currentCharacterToken = {\n      type,\n      chars,\n      location: this.currentLocation\n    };\n  } //Tag attributes\n\n\n  _createAttr(attrNameFirstCh) {\n    this.currentAttr = {\n      name: attrNameFirstCh,\n      value: ''\n    };\n    this.currentLocation = this.getCurrentLocation(0);\n  }\n\n  _leaveAttrName() {\n    var _a;\n\n    var _b;\n\n    const token = this.currentToken;\n\n    if (getTokenAttr(token, this.currentAttr.name) === null) {\n      token.attrs.push(this.currentAttr);\n\n      if (token.location && this.currentLocation) {\n        const attrLocations = (_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : _b.attrs = Object.create(null);\n        attrLocations[this.currentAttr.name] = this.currentLocation; // Set end location\n\n        this._leaveAttrValue();\n      }\n    } else {\n      this._err(ERR.duplicateAttribute);\n    }\n  }\n\n  _leaveAttrValue() {\n    if (this.currentLocation) {\n      this.currentLocation.endLine = this.preprocessor.line;\n      this.currentLocation.endCol = this.preprocessor.col;\n      this.currentLocation.endOffset = this.preprocessor.offset;\n    }\n  } //Token emission\n\n\n  prepareToken(ct) {\n    this._emitCurrentCharacterToken(ct.location);\n\n    this.currentToken = null;\n\n    if (ct.location) {\n      ct.location.endLine = this.preprocessor.line;\n      ct.location.endCol = this.preprocessor.col + 1;\n      ct.location.endOffset = this.preprocessor.offset + 1;\n    }\n\n    this.currentLocation = this.getCurrentLocation(-1);\n  }\n\n  emitCurrentTagToken() {\n    const ct = this.currentToken;\n    this.prepareToken(ct);\n    ct.tagID = getTagID(ct.tagName);\n\n    if (ct.type === TokenType.START_TAG) {\n      this.lastStartTagName = ct.tagName;\n      this.handler.onStartTag(ct);\n    } else {\n      if (ct.attrs.length > 0) {\n        this._err(ERR.endTagWithAttributes);\n      }\n\n      if (ct.selfClosing) {\n        this._err(ERR.endTagWithTrailingSolidus);\n      }\n\n      this.handler.onEndTag(ct);\n    }\n\n    this.preprocessor.dropParsedChunk();\n  }\n\n  emitCurrentComment(ct) {\n    this.prepareToken(ct);\n    this.handler.onComment(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n\n  emitCurrentDoctype(ct) {\n    this.prepareToken(ct);\n    this.handler.onDoctype(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n\n  _emitCurrentCharacterToken(nextLocation) {\n    if (this.currentCharacterToken) {\n      //NOTE: if we have a pending character token, make it's end location equal to the\n      //current token's start location.\n      if (nextLocation && this.currentCharacterToken.location) {\n        this.currentCharacterToken.location.endLine = nextLocation.startLine;\n        this.currentCharacterToken.location.endCol = nextLocation.startCol;\n        this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n      }\n\n      switch (this.currentCharacterToken.type) {\n        case TokenType.CHARACTER:\n          {\n            this.handler.onCharacter(this.currentCharacterToken);\n            break;\n          }\n\n        case TokenType.NULL_CHARACTER:\n          {\n            this.handler.onNullCharacter(this.currentCharacterToken);\n            break;\n          }\n\n        case TokenType.WHITESPACE_CHARACTER:\n          {\n            this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n            break;\n          }\n      }\n\n      this.currentCharacterToken = null;\n    }\n  }\n\n  _emitEOFToken() {\n    const location = this.getCurrentLocation(0);\n\n    if (location) {\n      location.endLine = location.startLine;\n      location.endCol = location.startCol;\n      location.endOffset = location.startOffset;\n    }\n\n    this._emitCurrentCharacterToken(location);\n\n    this.handler.onEof({\n      type: TokenType.EOF,\n      location\n    });\n    this.active = false;\n  } //Characters emission\n  //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n  //If we have a sequence of characters that belong to the same group, the parser can process it\n  //as a single solid character token.\n  //So, there are 3 types of character tokens in parse5:\n  //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n  //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n  //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n\n\n  _appendCharToCurrentCharacterToken(type, ch) {\n    if (this.currentCharacterToken) {\n      if (this.currentCharacterToken.type !== type) {\n        this.currentLocation = this.getCurrentLocation(0);\n\n        this._emitCurrentCharacterToken(this.currentLocation);\n\n        this.preprocessor.dropParsedChunk();\n      } else {\n        this.currentCharacterToken.chars += ch;\n        return;\n      }\n    }\n\n    this._createCharacterToken(type, ch);\n  }\n\n  _emitCodePoint(cp) {\n    const type = isWhitespace(cp) ? TokenType.WHITESPACE_CHARACTER : cp === $.NULL ? TokenType.NULL_CHARACTER : TokenType.CHARACTER;\n\n    this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n  } //NOTE: used when we emit characters explicitly.\n  //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n\n\n  _emitChars(ch) {\n    this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n  } // Character reference helpers\n\n\n  _matchNamedCharacterReference(cp) {\n    let result = null;\n    let excess = 0;\n    let withoutSemicolon = false;\n\n    for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n      i = determineBranch(htmlDecodeTree, current, i + 1, cp);\n      if (i < 0) break;\n      excess += 1;\n      current = htmlDecodeTree[i];\n      const masked = current & BinTrieFlags.VALUE_LENGTH; // If the branch is a value, store it and continue\n\n      if (masked) {\n        // The mask is the number of bytes of the value, including the current byte.\n        const valueLength = (masked >> 14) - 1; // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n        // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n\n        if (cp !== $.SEMICOLON && this._isCharacterReferenceInAttribute() && isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n          //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n          //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n          result = [$.AMPERSAND]; // Skip over the value.\n\n          i += valueLength;\n        } else {\n          // If this is a surrogate pair, consume the next two bytes.\n          result = valueLength === 0 ? [htmlDecodeTree[i] & ~BinTrieFlags.VALUE_LENGTH] : valueLength === 1 ? [htmlDecodeTree[++i]] : [htmlDecodeTree[++i], htmlDecodeTree[++i]];\n          excess = 0;\n          withoutSemicolon = cp !== $.SEMICOLON;\n        }\n\n        if (valueLength === 0) {\n          // If the value is zero-length, we're done.\n          this._consume();\n\n          break;\n        }\n      }\n    }\n\n    this._unconsume(excess);\n\n    if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n      this._err(ERR.missingSemicolonAfterCharacterReference);\n    } // We want to emit the error above on the code point after the entity.\n    // We always consume one code point too many in the loop, and we wait to\n    // unconsume it until after the error is emitted.\n\n\n    this._unconsume(1);\n\n    return result;\n  }\n\n  _isCharacterReferenceInAttribute() {\n    return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;\n  }\n\n  _flushCodePointConsumedAsCharacterReference(cp) {\n    if (this._isCharacterReferenceInAttribute()) {\n      this.currentAttr.value += String.fromCodePoint(cp);\n    } else {\n      this._emitCodePoint(cp);\n    }\n  } // Calling states this way turns out to be much faster than any other approach.\n\n\n  _callState(cp) {\n    switch (this.state) {\n      case State.DATA:\n        {\n          this._stateData(cp);\n\n          break;\n        }\n\n      case State.RCDATA:\n        {\n          this._stateRcdata(cp);\n\n          break;\n        }\n\n      case State.RAWTEXT:\n        {\n          this._stateRawtext(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA:\n        {\n          this._stateScriptData(cp);\n\n          break;\n        }\n\n      case State.PLAINTEXT:\n        {\n          this._statePlaintext(cp);\n\n          break;\n        }\n\n      case State.TAG_OPEN:\n        {\n          this._stateTagOpen(cp);\n\n          break;\n        }\n\n      case State.END_TAG_OPEN:\n        {\n          this._stateEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.TAG_NAME:\n        {\n          this._stateTagName(cp);\n\n          break;\n        }\n\n      case State.RCDATA_LESS_THAN_SIGN:\n        {\n          this._stateRcdataLessThanSign(cp);\n\n          break;\n        }\n\n      case State.RCDATA_END_TAG_OPEN:\n        {\n          this._stateRcdataEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.RCDATA_END_TAG_NAME:\n        {\n          this._stateRcdataEndTagName(cp);\n\n          break;\n        }\n\n      case State.RAWTEXT_LESS_THAN_SIGN:\n        {\n          this._stateRawtextLessThanSign(cp);\n\n          break;\n        }\n\n      case State.RAWTEXT_END_TAG_OPEN:\n        {\n          this._stateRawtextEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.RAWTEXT_END_TAG_NAME:\n        {\n          this._stateRawtextEndTagName(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataLessThanSign(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_END_TAG_OPEN:\n        {\n          this._stateScriptDataEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_END_TAG_NAME:\n        {\n          this._stateScriptDataEndTagName(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPE_START:\n        {\n          this._stateScriptDataEscapeStart(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPE_START_DASH:\n        {\n          this._stateScriptDataEscapeStartDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED:\n        {\n          this._stateScriptDataEscaped(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_DASH:\n        {\n          this._stateScriptDataEscapedDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataEscapedDashDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataEscapedLessThanSign(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:\n        {\n          this._stateScriptDataEscapedEndTagOpen(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME:\n        {\n          this._stateScriptDataEscapedEndTagName(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_START:\n        {\n          this._stateScriptDataDoubleEscapeStart(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED:\n        {\n          this._stateScriptDataDoubleEscaped(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDashDash(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataDoubleEscapedLessThanSign(cp);\n\n          break;\n        }\n\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_END:\n        {\n          this._stateScriptDataDoubleEscapeEnd(cp);\n\n          break;\n        }\n\n      case State.BEFORE_ATTRIBUTE_NAME:\n        {\n          this._stateBeforeAttributeName(cp);\n\n          break;\n        }\n\n      case State.ATTRIBUTE_NAME:\n        {\n          this._stateAttributeName(cp);\n\n          break;\n        }\n\n      case State.AFTER_ATTRIBUTE_NAME:\n        {\n          this._stateAfterAttributeName(cp);\n\n          break;\n        }\n\n      case State.BEFORE_ATTRIBUTE_VALUE:\n        {\n          this._stateBeforeAttributeValue(cp);\n\n          break;\n        }\n\n      case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED:\n        {\n          this._stateAttributeValueDoubleQuoted(cp);\n\n          break;\n        }\n\n      case State.ATTRIBUTE_VALUE_SINGLE_QUOTED:\n        {\n          this._stateAttributeValueSingleQuoted(cp);\n\n          break;\n        }\n\n      case State.ATTRIBUTE_VALUE_UNQUOTED:\n        {\n          this._stateAttributeValueUnquoted(cp);\n\n          break;\n        }\n\n      case State.AFTER_ATTRIBUTE_VALUE_QUOTED:\n        {\n          this._stateAfterAttributeValueQuoted(cp);\n\n          break;\n        }\n\n      case State.SELF_CLOSING_START_TAG:\n        {\n          this._stateSelfClosingStartTag(cp);\n\n          break;\n        }\n\n      case State.BOGUS_COMMENT:\n        {\n          this._stateBogusComment(cp);\n\n          break;\n        }\n\n      case State.MARKUP_DECLARATION_OPEN:\n        {\n          this._stateMarkupDeclarationOpen(cp);\n\n          break;\n        }\n\n      case State.COMMENT_START:\n        {\n          this._stateCommentStart(cp);\n\n          break;\n        }\n\n      case State.COMMENT_START_DASH:\n        {\n          this._stateCommentStartDash(cp);\n\n          break;\n        }\n\n      case State.COMMENT:\n        {\n          this._stateComment(cp);\n\n          break;\n        }\n\n      case State.COMMENT_LESS_THAN_SIGN:\n        {\n          this._stateCommentLessThanSign(cp);\n\n          break;\n        }\n\n      case State.COMMENT_LESS_THAN_SIGN_BANG:\n        {\n          this._stateCommentLessThanSignBang(cp);\n\n          break;\n        }\n\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH:\n        {\n          this._stateCommentLessThanSignBangDash(cp);\n\n          break;\n        }\n\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:\n        {\n          this._stateCommentLessThanSignBangDashDash(cp);\n\n          break;\n        }\n\n      case State.COMMENT_END_DASH:\n        {\n          this._stateCommentEndDash(cp);\n\n          break;\n        }\n\n      case State.COMMENT_END:\n        {\n          this._stateCommentEnd(cp);\n\n          break;\n        }\n\n      case State.COMMENT_END_BANG:\n        {\n          this._stateCommentEndBang(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE:\n        {\n          this._stateDoctype(cp);\n\n          break;\n        }\n\n      case State.BEFORE_DOCTYPE_NAME:\n        {\n          this._stateBeforeDoctypeName(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_NAME:\n        {\n          this._stateDoctypeName(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_NAME:\n        {\n          this._stateAfterDoctypeName(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_PUBLIC_KEYWORD:\n        {\n          this._stateAfterDoctypePublicKeyword(cp);\n\n          break;\n        }\n\n      case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateBeforeDoctypePublicIdentifier(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierSingleQuoted(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateAfterDoctypePublicIdentifier(cp);\n\n          break;\n        }\n\n      case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:\n        {\n          this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_SYSTEM_KEYWORD:\n        {\n          this._stateAfterDoctypeSystemKeyword(cp);\n\n          break;\n        }\n\n      case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateBeforeDoctypeSystemIdentifier(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n\n          break;\n        }\n\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n\n          break;\n        }\n\n      case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateAfterDoctypeSystemIdentifier(cp);\n\n          break;\n        }\n\n      case State.BOGUS_DOCTYPE:\n        {\n          this._stateBogusDoctype(cp);\n\n          break;\n        }\n\n      case State.CDATA_SECTION:\n        {\n          this._stateCdataSection(cp);\n\n          break;\n        }\n\n      case State.CDATA_SECTION_BRACKET:\n        {\n          this._stateCdataSectionBracket(cp);\n\n          break;\n        }\n\n      case State.CDATA_SECTION_END:\n        {\n          this._stateCdataSectionEnd(cp);\n\n          break;\n        }\n\n      case State.CHARACTER_REFERENCE:\n        {\n          this._stateCharacterReference(cp);\n\n          break;\n        }\n\n      case State.NAMED_CHARACTER_REFERENCE:\n        {\n          this._stateNamedCharacterReference(cp);\n\n          break;\n        }\n\n      case State.AMBIGUOUS_AMPERSAND:\n        {\n          this._stateAmbiguousAmpersand(cp);\n\n          break;\n        }\n\n      case State.NUMERIC_CHARACTER_REFERENCE:\n        {\n          this._stateNumericCharacterReference(cp);\n\n          break;\n        }\n\n      case State.HEXADEMICAL_CHARACTER_REFERENCE_START:\n        {\n          this._stateHexademicalCharacterReferenceStart(cp);\n\n          break;\n        }\n\n      case State.HEXADEMICAL_CHARACTER_REFERENCE:\n        {\n          this._stateHexademicalCharacterReference(cp);\n\n          break;\n        }\n\n      case State.DECIMAL_CHARACTER_REFERENCE:\n        {\n          this._stateDecimalCharacterReference(cp);\n\n          break;\n        }\n\n      case State.NUMERIC_CHARACTER_REFERENCE_END:\n        {\n          this._stateNumericCharacterReferenceEnd(cp);\n\n          break;\n        }\n\n      default:\n        {\n          throw new Error('Unknown state');\n        }\n    }\n  } // State machine\n  // Data state\n  //------------------------------------------------------------------\n\n\n  _stateData(cp) {\n    switch (cp) {\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.TAG_OPEN;\n          break;\n        }\n\n      case $.AMPERSAND:\n        {\n          this.returnState = State.DATA;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this._emitCodePoint(cp);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } //  RCDATA state\n  //------------------------------------------------------------------\n\n\n  _stateRcdata(cp) {\n    switch (cp) {\n      case $.AMPERSAND:\n        {\n          this.returnState = State.RCDATA;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.RCDATA_LESS_THAN_SIGN;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // RAWTEXT state\n  //------------------------------------------------------------------\n\n\n  _stateRawtext(cp) {\n    switch (cp) {\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.RAWTEXT_LESS_THAN_SIGN;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data state\n  //------------------------------------------------------------------\n\n\n  _stateScriptData(cp) {\n    switch (cp) {\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // PLAINTEXT state\n  //------------------------------------------------------------------\n\n\n  _statePlaintext(cp) {\n    switch (cp) {\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Tag open state\n  //------------------------------------------------------------------\n\n\n  _stateTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createStartTagToken();\n\n      this.state = State.TAG_NAME;\n\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case $.EXCLAMATION_MARK:\n        {\n          this.state = State.MARKUP_DECLARATION_OPEN;\n          break;\n        }\n\n      case $.SOLIDUS:\n        {\n          this.state = State.END_TAG_OPEN;\n          break;\n        }\n\n      case $.QUESTION_MARK:\n        {\n          this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n\n          this._createCommentToken(1);\n\n          this.state = State.BOGUS_COMMENT;\n\n          this._stateBogusComment(cp);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofBeforeTagName);\n\n          this._emitChars('<');\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.invalidFirstCharacterOfTagName);\n\n          this._emitChars('<');\n\n          this.state = State.DATA;\n\n          this._stateData(cp);\n        }\n    }\n  } // End tag open state\n  //------------------------------------------------------------------\n\n\n  _stateEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n\n      this.state = State.TAG_NAME;\n\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingEndTagName);\n\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofBeforeTagName);\n\n          this._emitChars('</');\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.invalidFirstCharacterOfTagName);\n\n          this._createCommentToken(2);\n\n          this.state = State.BOGUS_COMMENT;\n\n          this._stateBogusComment(cp);\n        }\n    }\n  } // Tag name state\n  //------------------------------------------------------------------\n\n\n  _stateTagName(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n\n      case $.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          token.tagName += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  } // RCDATA less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateRcdataLessThanSign(cp) {\n    if (cp === $.SOLIDUS) {\n      this.state = State.RCDATA_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n\n      this.state = State.RCDATA;\n\n      this._stateRcdata(cp);\n    }\n  } // RCDATA end tag open state\n  //------------------------------------------------------------------\n\n\n  _stateRcdataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RCDATA_END_TAG_NAME;\n\n      this._stateRcdataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n\n      this.state = State.RCDATA;\n\n      this._stateRcdata(cp);\n    }\n  }\n\n  handleSpecialEndTag(_cp) {\n    if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n      return !this._ensureHibernation();\n    }\n\n    this._createEndTagToken();\n\n    const token = this.currentToken;\n    token.tagName = this.lastStartTagName;\n    const cp = this.preprocessor.peek(this.lastStartTagName.length);\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          return false;\n        }\n\n      case $.SOLIDUS:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n\n          this.state = State.SELF_CLOSING_START_TAG;\n          return false;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n\n          this.emitCurrentTagToken();\n          this.state = State.DATA;\n          return false;\n        }\n\n      default:\n        {\n          return !this._ensureHibernation();\n        }\n    }\n  } // RCDATA end tag name state\n  //------------------------------------------------------------------\n\n\n  _stateRcdataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n\n      this.state = State.RCDATA;\n\n      this._stateRcdata(cp);\n    }\n  } // RAWTEXT less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateRawtextLessThanSign(cp) {\n    if (cp === $.SOLIDUS) {\n      this.state = State.RAWTEXT_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n\n      this.state = State.RAWTEXT;\n\n      this._stateRawtext(cp);\n    }\n  } // RAWTEXT end tag open state\n  //------------------------------------------------------------------\n\n\n  _stateRawtextEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RAWTEXT_END_TAG_NAME;\n\n      this._stateRawtextEndTagName(cp);\n    } else {\n      this._emitChars('</');\n\n      this.state = State.RAWTEXT;\n\n      this._stateRawtext(cp);\n    }\n  } // RAWTEXT end tag name state\n  //------------------------------------------------------------------\n\n\n  _stateRawtextEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n\n      this.state = State.RAWTEXT;\n\n      this._stateRawtext(cp);\n    }\n  } // Script data less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataLessThanSign(cp) {\n    switch (cp) {\n      case $.SOLIDUS:\n        {\n          this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n          break;\n        }\n\n      case $.EXCLAMATION_MARK:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPE_START;\n\n          this._emitChars('<!');\n\n          break;\n        }\n\n      default:\n        {\n          this._emitChars('<');\n\n          this.state = State.SCRIPT_DATA;\n\n          this._stateScriptData(cp);\n        }\n    }\n  } // Script data end tag open state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_END_TAG_NAME;\n\n      this._stateScriptDataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n\n      this.state = State.SCRIPT_DATA;\n\n      this._stateScriptData(cp);\n    }\n  } // Script data end tag name state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n\n      this.state = State.SCRIPT_DATA;\n\n      this._stateScriptData(cp);\n    }\n  } // Script data escape start state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapeStart(cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n\n      this._stateScriptData(cp);\n    }\n  } // Script data escape start dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapeStartDash(cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n\n      this._stateScriptData(cp);\n    }\n  } // Script data escaped state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscaped(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n\n          this._emitChars('-');\n\n          break;\n        }\n\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data escaped dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedDash(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n\n          this._emitChars('-');\n\n          break;\n        }\n\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this.state = State.SCRIPT_DATA_ESCAPED;\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data escaped dash dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedDashDash(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n\n          break;\n        }\n\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n\n          this._emitChars('>');\n\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this.state = State.SCRIPT_DATA_ESCAPED;\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data escaped less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedLessThanSign(cp) {\n    if (cp === $.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n    } else if (isAsciiLetter(cp)) {\n      this._emitChars('<');\n\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n\n      this._stateScriptDataDoubleEscapeStart(cp);\n    } else {\n      this._emitChars('<');\n\n      this.state = State.SCRIPT_DATA_ESCAPED;\n\n      this._stateScriptDataEscaped(cp);\n    }\n  } // Script data escaped end tag open state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n\n      this._stateScriptDataEscapedEndTagName(cp);\n    } else {\n      this._emitChars('</');\n\n      this.state = State.SCRIPT_DATA_ESCAPED;\n\n      this._stateScriptDataEscaped(cp);\n    }\n  } // Script data escaped end tag name state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataEscapedEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n\n      this.state = State.SCRIPT_DATA_ESCAPED;\n\n      this._stateScriptDataEscaped(cp);\n    }\n  } // Script data double escape start state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapeStart(cp) {\n    if (this.preprocessor.startsWith($$.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n\n      for (let i = 0; i < $$.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_ESCAPED;\n\n      this._stateScriptDataEscaped(cp);\n    }\n  } // Script data double escaped state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscaped(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n\n          this._emitChars('-');\n\n          break;\n        }\n\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n\n          this._emitChars('<');\n\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data double escaped dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapedDash(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n\n          this._emitChars('-');\n\n          break;\n        }\n\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n\n          this._emitChars('<');\n\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data double escaped dash dash state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapedDashDash(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n\n          break;\n        }\n\n      case $.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n\n          this._emitChars('<');\n\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n\n          this._emitChars('>');\n\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n          this._emitChars(REPLACEMENT_CHARACTER);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInScriptHtmlCommentLikeText);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n          this._emitCodePoint(cp);\n        }\n    }\n  } // Script data double escaped less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapedLessThanSign(cp) {\n    if (cp === $.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n\n      this._emitChars('/');\n    } else {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  } // Script data double escape end state\n  //------------------------------------------------------------------\n\n\n  _stateScriptDataDoubleEscapeEnd(cp) {\n    if (this.preprocessor.startsWith($$.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n\n      for (let i = 0; i < $$.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n\n      this.state = State.SCRIPT_DATA_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  } // Before attribute name state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeAttributeName(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case $.SOLIDUS:\n      case $.GREATER_THAN_SIGN:\n      case $.EOF:\n        {\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n\n          this._stateAfterAttributeName(cp);\n\n          break;\n        }\n\n      case $.EQUALS_SIGN:\n        {\n          this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n\n          this._createAttr('=');\n\n          this.state = State.ATTRIBUTE_NAME;\n          break;\n        }\n\n      default:\n        {\n          this._createAttr('');\n\n          this.state = State.ATTRIBUTE_NAME;\n\n          this._stateAttributeName(cp);\n        }\n    }\n  } // Attribute name state\n  //------------------------------------------------------------------\n\n\n  _stateAttributeName(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n      case $.SOLIDUS:\n      case $.GREATER_THAN_SIGN:\n      case $.EOF:\n        {\n          this._leaveAttrName();\n\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n\n          this._stateAfterAttributeName(cp);\n\n          break;\n        }\n\n      case $.EQUALS_SIGN:\n        {\n          this._leaveAttrName();\n\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n\n      case $.QUOTATION_MARK:\n      case $.APOSTROPHE:\n      case $.LESS_THAN_SIGN:\n        {\n          this._err(ERR.unexpectedCharacterInAttributeName);\n\n          this.currentAttr.name += String.fromCodePoint(cp);\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this.currentAttr.name += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      default:\n        {\n          this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  } // After attribute name state\n  //------------------------------------------------------------------\n\n\n  _stateAfterAttributeName(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case $.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n\n      case $.EQUALS_SIGN:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._createAttr('');\n\n          this.state = State.ATTRIBUTE_NAME;\n\n          this._stateAttributeName(cp);\n        }\n    }\n  } // Before attribute value state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeAttributeValue(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case $.QUOTATION_MARK:\n        {\n          this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n          break;\n        }\n\n      case $.APOSTROPHE:\n        {\n          this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingAttributeValue);\n\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      default:\n        {\n          this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n\n          this._stateAttributeValueUnquoted(cp);\n        }\n    }\n  } // Attribute value (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateAttributeValueDoubleQuoted(cp) {\n    switch (cp) {\n      case $.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n\n      case $.AMPERSAND:\n        {\n          this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this.currentAttr.value += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  } // Attribute value (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateAttributeValueSingleQuoted(cp) {\n    switch (cp) {\n      case $.APOSTROPHE:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n\n      case $.AMPERSAND:\n        {\n          this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this.currentAttr.value += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  } // Attribute value (unquoted) state\n  //------------------------------------------------------------------\n\n\n  _stateAttributeValueUnquoted(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n\n      case $.AMPERSAND:\n        {\n          this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this.currentAttr.value += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.QUOTATION_MARK:\n      case $.APOSTROPHE:\n      case $.LESS_THAN_SIGN:\n      case $.EQUALS_SIGN:\n      case $.GRAVE_ACCENT:\n        {\n          this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n\n          this.currentAttr.value += String.fromCodePoint(cp);\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  } // After attribute value (quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateAfterAttributeValueQuoted(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n\n      case $.SOLIDUS:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.missingWhitespaceBetweenAttributes);\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  } // Self-closing start tag state\n  //------------------------------------------------------------------\n\n\n  _stateSelfClosingStartTag(cp) {\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          const token = this.currentToken;\n          token.selfClosing = true;\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInTag);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.unexpectedSolidusInTag);\n\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  } // Bogus comment state\n  //------------------------------------------------------------------\n\n\n  _stateBogusComment(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      case $.EOF:\n        {\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          token.data += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  } // Markup declaration open state\n  //------------------------------------------------------------------\n\n\n  _stateMarkupDeclarationOpen(cp) {\n    if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n      this._createCommentToken($$.DASH_DASH.length + 1);\n\n      this.state = State.COMMENT_START;\n    } else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n      // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n      this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n      this.state = State.DOCTYPE;\n    } else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n      if (this.inForeignNode) {\n        this.state = State.CDATA_SECTION;\n      } else {\n        this._err(ERR.cdataInHtmlContent);\n\n        this._createCommentToken($$.CDATA_START.length + 1);\n\n        this.currentToken.data = '[CDATA[';\n        this.state = State.BOGUS_COMMENT;\n      }\n    } //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(ERR.incorrectlyOpenedComment);\n\n      this._createCommentToken(2);\n\n      this.state = State.BOGUS_COMMENT;\n\n      this._stateBogusComment(cp);\n    }\n  } // Comment start state\n  //------------------------------------------------------------------\n\n\n  _stateCommentStart(cp) {\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_START_DASH;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptClosingOfEmptyComment);\n\n          this.state = State.DATA;\n          const token = this.currentToken;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      default:\n        {\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment start dash state\n  //------------------------------------------------------------------\n\n\n  _stateCommentStartDash(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptClosingOfEmptyComment);\n\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment state\n  //------------------------------------------------------------------\n\n\n  _stateComment(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n\n      case $.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          this.state = State.COMMENT_LESS_THAN_SIGN;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          token.data += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  } // Comment less-than sign state\n  //------------------------------------------------------------------\n\n\n  _stateCommentLessThanSign(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.EXCLAMATION_MARK:\n        {\n          token.data += '!';\n          this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n          break;\n        }\n\n      case $.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          break;\n        }\n\n      default:\n        {\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment less-than sign bang state\n  //------------------------------------------------------------------\n\n\n  _stateCommentLessThanSignBang(cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n    } else {\n      this.state = State.COMMENT;\n\n      this._stateComment(cp);\n    }\n  } // Comment less-than sign bang dash state\n  //------------------------------------------------------------------\n\n\n  _stateCommentLessThanSignBangDash(cp) {\n    if (cp === $.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n    } else {\n      this.state = State.COMMENT_END_DASH;\n\n      this._stateCommentEndDash(cp);\n    }\n  } // Comment less-than sign bang dash dash state\n  //------------------------------------------------------------------\n\n\n  _stateCommentLessThanSignBangDashDash(cp) {\n    if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n      this._err(ERR.nestedComment);\n    }\n\n    this.state = State.COMMENT_END;\n\n    this._stateCommentEnd(cp);\n  } // Comment end dash state\n  //------------------------------------------------------------------\n\n\n  _stateCommentEndDash(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment end state\n  //------------------------------------------------------------------\n\n\n  _stateCommentEnd(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      case $.EXCLAMATION_MARK:\n        {\n          this.state = State.COMMENT_END_BANG;\n          break;\n        }\n\n      case $.HYPHEN_MINUS:\n        {\n          token.data += '-';\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += '--';\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // Comment end bang state\n  //------------------------------------------------------------------\n\n\n  _stateCommentEndBang(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.HYPHEN_MINUS:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.incorrectlyClosedComment);\n\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInComment);\n\n          this.emitCurrentComment(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT;\n\n          this._stateComment(cp);\n        }\n    }\n  } // DOCTYPE state\n  //------------------------------------------------------------------\n\n\n  _stateDoctype(cp) {\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n\n          this._stateBeforeDoctypeName(cp);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          this._createDoctypeToken(null);\n\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.missingWhitespaceBeforeDoctypeName);\n\n          this.state = State.BEFORE_DOCTYPE_NAME;\n\n          this._stateBeforeDoctypeName(cp);\n        }\n    }\n  } // Before DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeDoctypeName(cp) {\n    if (isAsciiUpper(cp)) {\n      this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n\n      this.state = State.DOCTYPE_NAME;\n    } else switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          this._createDoctypeToken(REPLACEMENT_CHARACTER);\n\n          this.state = State.DOCTYPE_NAME;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypeName);\n\n          this._createDoctypeToken(null);\n\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          this._createDoctypeToken(null);\n\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._createDoctypeToken(String.fromCodePoint(cp));\n\n          this.state = State.DOCTYPE_NAME;\n        }\n    }\n  } // DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypeName(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.AFTER_DOCTYPE_NAME;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          token.name += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  } // After DOCTYPE name state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypeName(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n            this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n          } else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n            this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n          } //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n          //results are no longer valid and we will need to start over.\n          else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n\n            this._stateBogusDoctype(cp);\n          }\n        }\n    }\n  } // After DOCTYPE public keyword state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypePublicKeyword(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n\n      case $.QUOTATION_MARK:\n        {\n          this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case $.APOSTROPHE:\n        {\n          this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // Before DOCTYPE public identifier state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case $.QUOTATION_MARK:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case $.APOSTROPHE:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // DOCTYPE public identifier (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          token.publicId += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  } // DOCTYPE public identifier (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypePublicIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          token.publicId += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptDoctypePublicIdentifier);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  } // After DOCTYPE public identifier state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case $.QUOTATION_MARK:\n        {\n          this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case $.APOSTROPHE:\n        {\n          this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // Between DOCTYPE public and system identifiers state\n  //------------------------------------------------------------------\n\n\n  _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case $.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // After DOCTYPE system keyword state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypeSystemKeyword(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n\n      case $.QUOTATION_MARK:\n        {\n          this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case $.APOSTROPHE:\n        {\n          this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // Before DOCTYPE system identifier state\n  //------------------------------------------------------------------\n\n\n  _stateBeforeDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case $.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n\n      case $.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.missingDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // DOCTYPE system identifier (double-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          token.systemId += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  } // DOCTYPE system identifier (single-quoted) state\n  //------------------------------------------------------------------\n\n\n  _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          token.systemId += REPLACEMENT_CHARACTER;\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this._err(ERR.abruptDoctypeSystemIdentifier);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  } // After DOCTYPE system identifier state\n  //------------------------------------------------------------------\n\n\n  _stateAfterDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.SPACE:\n      case $.LINE_FEED:\n      case $.TABULATION:\n      case $.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n\n      case $.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInDoctype);\n\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n\n          this.state = State.BOGUS_DOCTYPE;\n\n          this._stateBogusDoctype(cp);\n        }\n    }\n  } // Bogus DOCTYPE state\n  //------------------------------------------------------------------\n\n\n  _stateBogusDoctype(cp) {\n    const token = this.currentToken;\n\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.NULL:\n        {\n          this._err(ERR.unexpectedNullCharacter);\n\n          break;\n        }\n\n      case $.EOF:\n        {\n          this.emitCurrentDoctype(token);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default: // Do nothing\n\n    }\n  } // CDATA section state\n  //------------------------------------------------------------------\n\n\n  _stateCdataSection(cp) {\n    switch (cp) {\n      case $.RIGHT_SQUARE_BRACKET:\n        {\n          this.state = State.CDATA_SECTION_BRACKET;\n          break;\n        }\n\n      case $.EOF:\n        {\n          this._err(ERR.eofInCdata);\n\n          this._emitEOFToken();\n\n          break;\n        }\n\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  } // CDATA section bracket state\n  //------------------------------------------------------------------\n\n\n  _stateCdataSectionBracket(cp) {\n    if (cp === $.RIGHT_SQUARE_BRACKET) {\n      this.state = State.CDATA_SECTION_END;\n    } else {\n      this._emitChars(']');\n\n      this.state = State.CDATA_SECTION;\n\n      this._stateCdataSection(cp);\n    }\n  } // CDATA section end state\n  //------------------------------------------------------------------\n\n\n  _stateCdataSectionEnd(cp) {\n    switch (cp) {\n      case $.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          break;\n        }\n\n      case $.RIGHT_SQUARE_BRACKET:\n        {\n          this._emitChars(']');\n\n          break;\n        }\n\n      default:\n        {\n          this._emitChars(']]');\n\n          this.state = State.CDATA_SECTION;\n\n          this._stateCdataSection(cp);\n        }\n    }\n  } // Character reference state\n  //------------------------------------------------------------------\n\n\n  _stateCharacterReference(cp) {\n    if (cp === $.NUMBER_SIGN) {\n      this.state = State.NUMERIC_CHARACTER_REFERENCE;\n    } else if (isAsciiAlphaNumeric(cp)) {\n      this.state = State.NAMED_CHARACTER_REFERENCE;\n\n      this._stateNamedCharacterReference(cp);\n    } else {\n      this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n\n      this._reconsumeInState(this.returnState, cp);\n    }\n  } // Named character reference state\n  //------------------------------------------------------------------\n\n\n  _stateNamedCharacterReference(cp) {\n    const matchResult = this._matchNamedCharacterReference(cp); //NOTE: Matching can be abrupted by hibernation. In that case, match\n    //results are no longer valid and we will need to start over.\n\n\n    if (this._ensureHibernation()) {// Stay in the state, try again.\n    } else if (matchResult) {\n      for (let i = 0; i < matchResult.length; i++) {\n        this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n      }\n\n      this.state = this.returnState;\n    } else {\n      this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n\n      this.state = State.AMBIGUOUS_AMPERSAND;\n    }\n  } // Ambiguos ampersand state\n  //------------------------------------------------------------------\n\n\n  _stateAmbiguousAmpersand(cp) {\n    if (isAsciiAlphaNumeric(cp)) {\n      this._flushCodePointConsumedAsCharacterReference(cp);\n    } else {\n      if (cp === $.SEMICOLON) {\n        this._err(ERR.unknownNamedCharacterReference);\n      }\n\n      this._reconsumeInState(this.returnState, cp);\n    }\n  } // Numeric character reference state\n  //------------------------------------------------------------------\n\n\n  _stateNumericCharacterReference(cp) {\n    this.charRefCode = 0;\n\n    if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n    } // Inlined decimal character reference start state\n    else if (isAsciiDigit(cp)) {\n      this.state = State.DECIMAL_CHARACTER_REFERENCE;\n\n      this._stateDecimalCharacterReference(cp);\n    } else {\n      this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n\n      this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n\n      this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n\n      this._reconsumeInState(this.returnState, cp);\n    }\n  } // Hexademical character reference start state\n  //------------------------------------------------------------------\n\n\n  _stateHexademicalCharacterReferenceStart(cp) {\n    if (isAsciiHexDigit(cp)) {\n      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n\n      this._stateHexademicalCharacterReference(cp);\n    } else {\n      this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n\n      this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n\n      this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n\n      this._unconsume(2);\n\n      this.state = this.returnState;\n    }\n  } // Hexademical character reference state\n  //------------------------------------------------------------------\n\n\n  _stateHexademicalCharacterReference(cp) {\n    if (isAsciiUpperHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n    } else if (isAsciiLowerHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n    } else if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n    } else if (cp === $.SEMICOLON) {\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n    } else {\n      this._err(ERR.missingSemicolonAfterCharacterReference);\n\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n\n      this._stateNumericCharacterReferenceEnd(cp);\n    }\n  } // Decimal character reference state\n  //------------------------------------------------------------------\n\n\n  _stateDecimalCharacterReference(cp) {\n    if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n    } else if (cp === $.SEMICOLON) {\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n    } else {\n      this._err(ERR.missingSemicolonAfterCharacterReference);\n\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n\n      this._stateNumericCharacterReferenceEnd(cp);\n    }\n  } // Numeric character reference end state\n  //------------------------------------------------------------------\n\n\n  _stateNumericCharacterReferenceEnd(cp) {\n    if (this.charRefCode === $.NULL) {\n      this._err(ERR.nullCharacterReference);\n\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (this.charRefCode > 1114111) {\n      this._err(ERR.characterReferenceOutsideUnicodeRange);\n\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (isSurrogate(this.charRefCode)) {\n      this._err(ERR.surrogateCharacterReference);\n\n      this.charRefCode = $.REPLACEMENT_CHARACTER;\n    } else if (isUndefinedCodePoint(this.charRefCode)) {\n      this._err(ERR.noncharacterCharacterReference);\n    } else if (isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n      this._err(ERR.controlCharacterReference);\n\n      const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n\n      if (replacement !== undefined) {\n        this.charRefCode = replacement;\n      }\n    }\n\n    this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n\n    this._reconsumeInState(this.returnState, cp);\n  }\n\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/cheerio/node_modules/parse5/dist/tokenizer/index.js"],"names":["Preprocessor","CODE_POINTS","$","SEQUENCES","$$","REPLACEMENT_CHARACTER","isSurrogate","isUndefinedCodePoint","isControlCodePoint","TokenType","getTokenAttr","htmlDecodeTree","BinTrieFlags","determineBranch","ERR","TAG_ID","getTagID","C1_CONTROLS_REFERENCE_REPLACEMENTS","Map","State","TokenizerMode","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","CDATA_SECTION","isAsciiDigit","cp","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","isAsciiHexDigit","toAsciiLower","isWhitespace","SPACE","LINE_FEED","TABULATION","FORM_FEED","isEntityInAttributeInvalidEnd","nextCp","EQUALS_SIGN","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","Tokenizer","constructor","options","handler","paused","inLoop","inForeignNode","lastStartTagName","active","state","returnState","charRefCode","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","name","value","preprocessor","currentLocation","getCurrentLocation","_err","code","_a","_b","onParseError","call","getError","offset","sourceCodeLocationInfo","startLine","line","startCol","col","startOffset","endLine","endCol","endOffset","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","resume","writeCallback","Error","write","chunk","isLastChunk","insertHtmlAtCurrentPos","endOfChunkHit","_unconsume","advance","count","retreat","_reconsumeInState","_advanceBy","i","_consumeSequenceIfMatch","pattern","caseSensitive","startsWith","length","_createStartTagToken","type","START_TAG","tagName","tagID","UNKNOWN","selfClosing","ackSelfClosing","attrs","location","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","data","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","publicId","systemId","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","token","push","attrLocations","Object","create","_leaveAttrValue","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","dropParsedChunk","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","EOF","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","NULL","String","fromCodePoint","_emitChars","_matchNamedCharacterReference","result","excess","withoutSemicolon","current","masked","VALUE_LENGTH","valueLength","SEMICOLON","_isCharacterReferenceInAttribute","peek","AMPERSAND","missingSemicolonAfterCharacterReference","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_flushCodePointConsumedAsCharacterReference","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","CHARACTER_REFERENCE","_stateCharacterReference","NAMED_CHARACTER_REFERENCE","_stateNamedCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","NUMERIC_CHARACTER_REFERENCE","_stateNumericCharacterReference","HEXADEMICAL_CHARACTER_REFERENCE_START","_stateHexademicalCharacterReferenceStart","HEXADEMICAL_CHARACTER_REFERENCE","_stateHexademicalCharacterReference","DECIMAL_CHARACTER_REFERENCE","_stateDecimalCharacterReference","NUMERIC_CHARACTER_REFERENCE_END","_stateNumericCharacterReferenceEnd","LESS_THAN_SIGN","unexpectedNullCharacter","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","SCRIPT","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","DASH_DASH","CDATA_START","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","fromCharCode","missingDoctypeName","PUBLIC","SYSTEM","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","matchResult","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","absenceOfDigitsInNumericCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","surrogateCharacterReference","noncharacterCharacterReference","CARRIAGE_RETURN","controlCharacterReference","replacement","get","undefined"],"mappings":"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","sourcesContent":["import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint, } from '../common/unicode.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\nimport { htmlDecodeTree, BinTrieFlags, determineBranch } from 'entities/lib/decode.js';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([\n    [0x80, 8364],\n    [0x82, 8218],\n    [0x83, 402],\n    [0x84, 8222],\n    [0x85, 8230],\n    [0x86, 8224],\n    [0x87, 8225],\n    [0x88, 710],\n    [0x89, 8240],\n    [0x8a, 352],\n    [0x8b, 8249],\n    [0x8c, 338],\n    [0x8e, 381],\n    [0x91, 8216],\n    [0x92, 8217],\n    [0x93, 8220],\n    [0x94, 8221],\n    [0x95, 8226],\n    [0x96, 8211],\n    [0x97, 8212],\n    [0x98, 732],\n    [0x99, 8482],\n    [0x9a, 353],\n    [0x9b, 8250],\n    [0x9c, 339],\n    [0x9e, 382],\n    [0x9f, 376],\n]);\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n    State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\n//Tokenizer\nexport class Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.charRefCode = -1;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    //Errors\n    _err(code) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this._unconsume(this.consumedAfterSnapshot);\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _unconsume(count) {\n        this.consumedAfterSnapshot -= count;\n        this.preprocessor.retreat(count);\n    }\n    _reconsumeInState(state, cp) {\n        this.state = state;\n        this._callState(cp);\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: TokenType.START_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: TokenType.END_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if (getTokenAttr(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = getTagID(ct.tagName);\n        if (ct.type === TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type !== type) {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n            else {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === $.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _matchNamedCharacterReference(cp) {\n        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n            i = determineBranch(htmlDecodeTree, current, i + 1, cp);\n            if (i < 0)\n                break;\n            excess += 1;\n            current = htmlDecodeTree[i];\n            const masked = current & BinTrieFlags.VALUE_LENGTH;\n            // If the branch is a value, store it and continue\n            if (masked) {\n                // The mask is the number of bytes of the value, including the current byte.\n                const valueLength = (masked >> 14) - 1;\n                // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n                // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n                if (cp !== $.SEMICOLON &&\n                    this._isCharacterReferenceInAttribute() &&\n                    isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n                    //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n                    //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n                    result = [$.AMPERSAND];\n                    // Skip over the value.\n                    i += valueLength;\n                }\n                else {\n                    // If this is a surrogate pair, consume the next two bytes.\n                    result =\n                        valueLength === 0\n                            ? [htmlDecodeTree[i] & ~BinTrieFlags.VALUE_LENGTH]\n                            : valueLength === 1\n                                ? [htmlDecodeTree[++i]]\n                                : [htmlDecodeTree[++i], htmlDecodeTree[++i]];\n                    excess = 0;\n                    withoutSemicolon = cp !== $.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n                    this._consume();\n                    break;\n                }\n            }\n        }\n        this._unconsume(excess);\n        if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n        }\n        // We want to emit the error above on the code point after the entity.\n        // We always consume one code point too many in the loop, and we wait to\n        // unconsume it until after the error is emitted.\n        this._unconsume(1);\n        return result;\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference(cp);\n                break;\n            }\n            case State.NAMED_CHARACTER_REFERENCE: {\n                this._stateNamedCharacterReference(cp);\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE: {\n                this._stateNumericCharacterReference(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {\n                this._stateHexademicalCharacterReferenceStart(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE: {\n                this._stateHexademicalCharacterReference(cp);\n                break;\n            }\n            case State.DECIMAL_CHARACTER_REFERENCE: {\n                this._stateDecimalCharacterReference(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE_END: {\n                this._stateNumericCharacterReferenceEnd(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.DATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case $.AMPERSAND: {\n                this.returnState = State.RCDATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case $.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case $.QUESTION_MARK: {\n                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.tagName += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case $.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case $.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED:\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN: {\n                this._err(ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN:\n            case $.EQUALS_SIGN:\n            case $.GRAVE_ACCENT: {\n                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n            this._createCommentToken($$.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken($$.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case $.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case $.SPACE:\n                case $.LINE_FEED:\n                case $.TABULATION:\n                case $.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case $.NULL: {\n                    this._err(ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case $.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case $.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference(cp) {\n        if (cp === $.NUMBER_SIGN) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE;\n        }\n        else if (isAsciiAlphaNumeric(cp)) {\n            this.state = State.NAMED_CHARACTER_REFERENCE;\n            this._stateNamedCharacterReference(cp);\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Named character reference state\n    //------------------------------------------------------------------\n    _stateNamedCharacterReference(cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n        //NOTE: Matching can be abrupted by hibernation. In that case, match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            // Stay in the state, try again.\n        }\n        else if (matchResult) {\n            for (let i = 0; i < matchResult.length; i++) {\n                this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n            }\n            this.state = this.returnState;\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this.state = State.AMBIGUOUS_AMPERSAND;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        }\n        // Inlined decimal character reference start state\n        else if (isAsciiDigit(cp)) {\n            this.state = State.DECIMAL_CHARACTER_REFERENCE;\n            this._stateDecimalCharacterReference(cp);\n        }\n        else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReferenceStart(cp) {\n        if (isAsciiHexDigit(cp)) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n            this._stateHexademicalCharacterReference(cp);\n        }\n        else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n            this._unconsume(2);\n            this.state = this.returnState;\n        }\n    }\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        }\n        else if (cp === $.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        }\n        else if (cp === $.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReferenceEnd(cp) {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        }\n        else if (this.charRefCode > 1114111) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        }\n        else if (isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        }\n        else if (isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        }\n        else if (isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n        }\n        this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n        this._reconsumeInState(this.returnState, cp);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}