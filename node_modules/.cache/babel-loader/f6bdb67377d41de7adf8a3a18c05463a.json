{"ast":null,"code":"import { CODE_POINTS as $, getSurrogatePairCodePoint, isControlCodePoint, isSurrogate, isSurrogatePair, isUndefinedCodePoint } from '../common/unicode.js';\nimport { ERR } from '../common/error-codes.js'; //Const\n\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16; //Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\n\nexport class Preprocessor {\n  constructor(handler) {\n    this.handler = handler;\n    this.html = '';\n    this.pos = -1; // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n\n    this.lastGapPos = -2;\n    this.gapStack = [];\n    this.skipNextNewLine = false;\n    this.lastChunkWritten = false;\n    this.endOfChunkHit = false;\n    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    this.isEol = false;\n    this.lineStartPos = 0;\n    this.droppedBufferSize = 0;\n    this.line = 1; //NOTE: avoid reporting errors twice on advance/retreat\n\n    this.lastErrOffset = -1;\n  }\n  /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */\n\n\n  get col() {\n    return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n  }\n\n  get offset() {\n    return this.droppedBufferSize + this.pos;\n  }\n\n  getError(code) {\n    const {\n      line,\n      col,\n      offset\n    } = this;\n    return {\n      code,\n      startLine: line,\n      endLine: line,\n      startCol: col,\n      endCol: col,\n      startOffset: offset,\n      endOffset: offset\n    };\n  }\n\n  _err(code) {\n    if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n      this.lastErrOffset = this.offset;\n      this.handler.onParseError(this.getError(code));\n    }\n  }\n\n  _addGap() {\n    this.gapStack.push(this.lastGapPos);\n    this.lastGapPos = this.pos;\n  }\n\n  _processSurrogate(cp) {\n    //NOTE: try to peek a surrogate pair\n    if (this.pos !== this.html.length - 1) {\n      const nextCp = this.html.charCodeAt(this.pos + 1);\n\n      if (isSurrogatePair(nextCp)) {\n        //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n        this.pos++; //NOTE: add a gap that should be avoided during retreat\n\n        this._addGap();\n\n        return getSurrogatePairCodePoint(cp, nextCp);\n      }\n    } //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.\n    else if (!this.lastChunkWritten) {\n      this.endOfChunkHit = true;\n      return $.EOF;\n    } //NOTE: isolated surrogate\n\n\n    this._err(ERR.surrogateInInputStream);\n\n    return cp;\n  }\n\n  willDropParsedChunk() {\n    return this.pos > this.bufferWaterline;\n  }\n\n  dropParsedChunk() {\n    if (this.willDropParsedChunk()) {\n      this.html = this.html.substring(this.pos);\n      this.lineStartPos -= this.pos;\n      this.droppedBufferSize += this.pos;\n      this.pos = 0;\n      this.lastGapPos = -2;\n      this.gapStack.length = 0;\n    }\n  }\n\n  write(chunk, isLastChunk) {\n    if (this.html.length > 0) {\n      this.html += chunk;\n    } else {\n      this.html = chunk;\n    }\n\n    this.endOfChunkHit = false;\n    this.lastChunkWritten = isLastChunk;\n  }\n\n  insertHtmlAtCurrentPos(chunk) {\n    this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n    this.endOfChunkHit = false;\n  }\n\n  startsWith(pattern, caseSensitive) {\n    // Check if our buffer has enough characters\n    if (this.pos + pattern.length > this.html.length) {\n      this.endOfChunkHit = !this.lastChunkWritten;\n      return false;\n    }\n\n    if (caseSensitive) {\n      return this.html.startsWith(pattern, this.pos);\n    }\n\n    for (let i = 0; i < pattern.length; i++) {\n      const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n\n      if (cp !== pattern.charCodeAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  peek(offset) {\n    const pos = this.pos + offset;\n\n    if (pos >= this.html.length) {\n      this.endOfChunkHit = !this.lastChunkWritten;\n      return $.EOF;\n    }\n\n    const code = this.html.charCodeAt(pos);\n    return code === $.CARRIAGE_RETURN ? $.LINE_FEED : code;\n  }\n\n  advance() {\n    this.pos++; //NOTE: LF should be in the last column of the line\n\n    if (this.isEol) {\n      this.isEol = false;\n      this.line++;\n      this.lineStartPos = this.pos;\n    }\n\n    if (this.pos >= this.html.length) {\n      this.endOfChunkHit = !this.lastChunkWritten;\n      return $.EOF;\n    }\n\n    let cp = this.html.charCodeAt(this.pos); //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n\n    if (cp === $.CARRIAGE_RETURN) {\n      this.isEol = true;\n      this.skipNextNewLine = true;\n      return $.LINE_FEED;\n    } //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n    //must be ignored.\n\n\n    if (cp === $.LINE_FEED) {\n      this.isEol = true;\n\n      if (this.skipNextNewLine) {\n        // `line` will be bumped again in the recursive call.\n        this.line--;\n        this.skipNextNewLine = false;\n\n        this._addGap();\n\n        return this.advance();\n      }\n    }\n\n    this.skipNextNewLine = false;\n\n    if (isSurrogate(cp)) {\n      cp = this._processSurrogate(cp);\n    } //OPTIMIZATION: first check if code point is in the common allowed\n    //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n    //before going into detailed performance cost validation.\n\n\n    const isCommonValidRange = this.handler.onParseError === null || cp > 0x1f && cp < 0x7f || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 0x9f && cp < 64976;\n\n    if (!isCommonValidRange) {\n      this._checkForProblematicCharacters(cp);\n    }\n\n    return cp;\n  }\n\n  _checkForProblematicCharacters(cp) {\n    if (isControlCodePoint(cp)) {\n      this._err(ERR.controlCharacterInInputStream);\n    } else if (isUndefinedCodePoint(cp)) {\n      this._err(ERR.noncharacterInInputStream);\n    }\n  }\n\n  retreat(count) {\n    this.pos -= count;\n\n    while (this.pos < this.lastGapPos) {\n      this.lastGapPos = this.gapStack.pop();\n      this.pos--;\n    }\n\n    this.isEol = false;\n  }\n\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/cheerio/node_modules/parse5/dist/tokenizer/preprocessor.js"],"names":["CODE_POINTS","$","getSurrogatePairCodePoint","isControlCodePoint","isSurrogate","isSurrogatePair","isUndefinedCodePoint","ERR","DEFAULT_BUFFER_WATERLINE","Preprocessor","constructor","handler","html","pos","lastGapPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","isEol","lineStartPos","droppedBufferSize","line","lastErrOffset","col","Number","offset","getError","code","startLine","endLine","startCol","endCol","startOffset","endOffset","_err","onParseError","_addGap","push","_processSurrogate","cp","length","nextCp","charCodeAt","EOF","surrogateInInputStream","willDropParsedChunk","dropParsedChunk","substring","write","chunk","isLastChunk","insertHtmlAtCurrentPos","startsWith","pattern","caseSensitive","i","peek","CARRIAGE_RETURN","LINE_FEED","advance","isCommonValidRange","_checkForProblematicCharacters","controlCharacterInInputStream","noncharacterInInputStream","retreat","count","pop"],"mappings":"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","sourcesContent":["import { CODE_POINTS as $, getSurrogatePairCodePoint, isControlCodePoint, isSurrogate, isSurrogatePair, isUndefinedCodePoint, } from '../common/unicode.js';\nimport { ERR } from '../common/error-codes.js';\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nexport class Preprocessor {\n    constructor(handler) {\n        this.handler = handler;\n        this.html = '';\n        this.pos = -1;\n        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n        this.lastGapPos = -2;\n        this.gapStack = [];\n        this.skipNextNewLine = false;\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n        this.line = 1;\n        //NOTE: avoid reporting errors twice on advance/retreat\n        this.lastErrOffset = -1;\n    }\n    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */\n    get col() {\n        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n    }\n    get offset() {\n        return this.droppedBufferSize + this.pos;\n    }\n    getError(code) {\n        const { line, col, offset } = this;\n        return {\n            code,\n            startLine: line,\n            endLine: line,\n            startCol: col,\n            endCol: col,\n            startOffset: offset,\n            endOffset: offset,\n        };\n    }\n    _err(code) {\n        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n            this.lastErrOffset = this.offset;\n            this.handler.onParseError(this.getError(code));\n        }\n    }\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.html.length - 1) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n            if (isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n                //NOTE: add a gap that should be avoided during retreat\n                this._addGap();\n                return getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n        //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n        return cp;\n    }\n    willDropParsedChunk() {\n        return this.pos > this.bufferWaterline;\n    }\n    dropParsedChunk() {\n        if (this.willDropParsedChunk()) {\n            this.html = this.html.substring(this.pos);\n            this.lineStartPos -= this.pos;\n            this.droppedBufferSize += this.pos;\n            this.pos = 0;\n            this.lastGapPos = -2;\n            this.gapStack.length = 0;\n        }\n    }\n    write(chunk, isLastChunk) {\n        if (this.html.length > 0) {\n            this.html += chunk;\n        }\n        else {\n            this.html = chunk;\n        }\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n        this.endOfChunkHit = false;\n    }\n    startsWith(pattern, caseSensitive) {\n        // Check if our buffer has enough characters\n        if (this.pos + pattern.length > this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return false;\n        }\n        if (caseSensitive) {\n            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    peek(offset) {\n        const pos = this.pos + offset;\n        if (pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        const code = this.html.charCodeAt(pos);\n        return code === $.CARRIAGE_RETURN ? $.LINE_FEED : code;\n    }\n    advance() {\n        this.pos++;\n        //NOTE: LF should be in the last column of the line\n        if (this.isEol) {\n            this.isEol = false;\n            this.line++;\n            this.lineStartPos = this.pos;\n        }\n        if (this.pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.isEol = true;\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (cp === $.LINE_FEED) {\n            this.isEol = true;\n            if (this.skipNextNewLine) {\n                // `line` will be bumped again in the recursive call.\n                this.line--;\n                this.skipNextNewLine = false;\n                this._addGap();\n                return this.advance();\n            }\n        }\n        this.skipNextNewLine = false;\n        if (isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === $.LINE_FEED ||\n            cp === $.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n        return cp;\n    }\n    _checkForProblematicCharacters(cp) {\n        if (isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        }\n        else if (isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n    retreat(count) {\n        this.pos -= count;\n        while (this.pos < this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n        this.isEol = false;\n    }\n}\n//# sourceMappingURL=preprocessor.js.map"]},"metadata":{},"sourceType":"module"}