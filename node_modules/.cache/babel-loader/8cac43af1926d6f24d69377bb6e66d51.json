{"ast":null,"code":"import { array } from './array.js';\nimport { char16bits } from './char16bits.js';\nimport { charsToStringMapper, charsToStringUnmapper } from './_internals/mappers/CharsToString.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\nexport function string16bits() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const charArbitrary = char16bits();\n  const experimentalCustomSlices = createSlicesForString(charArbitrary, charsToStringUnmapper);\n  const enrichedConstraints = Object.assign(Object.assign({}, constraints), {\n    experimentalCustomSlices\n  });\n  return array(charArbitrary, enrichedConstraints).map(charsToStringMapper, charsToStringUnmapper);\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/string16bits.js"],"names":["array","char16bits","charsToStringMapper","charsToStringUnmapper","createSlicesForString","string16bits","constraints","charArbitrary","experimentalCustomSlices","enrichedConstraints","Object","assign","map"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,uCAA3D;AACA,SAASC,qBAAT,QAAsC,gDAAtC;AACA,OAAO,SAASC,YAAT,GAAwC;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;AAC3C,QAAMC,aAAa,GAAGN,UAAU,EAAhC;AACA,QAAMO,wBAAwB,GAAGJ,qBAAqB,CAACG,aAAD,EAAgBJ,qBAAhB,CAAtD;AACA,QAAMM,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,WAAlB,CAAd,EAA8C;AAAEE,IAAAA;AAAF,GAA9C,CAA5B;AACA,SAAOR,KAAK,CAACO,aAAD,EAAgBE,mBAAhB,CAAL,CAA0CG,GAA1C,CAA8CV,mBAA9C,EAAmEC,qBAAnE,CAAP;AACH","sourcesContent":["import { array } from './array.js';\nimport { char16bits } from './char16bits.js';\nimport { charsToStringMapper, charsToStringUnmapper } from './_internals/mappers/CharsToString.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\nexport function string16bits(constraints = {}) {\n    const charArbitrary = char16bits();\n    const experimentalCustomSlices = createSlicesForString(charArbitrary, charsToStringUnmapper);\n    const enrichedConstraints = Object.assign(Object.assign({}, constraints), { experimentalCustomSlices });\n    return array(charArbitrary, enrichedConstraints).map(charsToStringMapper, charsToStringUnmapper);\n}\n"]},"metadata":{},"sourceType":"module"}