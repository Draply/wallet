{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBytes = void 0;\n\nconst Conversion = __importStar(require(\"../../conversion\")); //UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n\n/**\n * Encodes without padding, length, etc!\n *\n * @Category Encoding (low-level)\n */\n\n\nfunction encodeBytes(input) {\n  switch (input.type.typeClass) {\n    case \"bytes\":\n      return Conversion.toBytes(input.value.asHex);\n\n    case \"string\":\n      {\n        let coercedInput = input;\n\n        switch (coercedInput.value.kind) {\n          case \"valid\":\n            return Conversion.stringToBytes(coercedInput.value.asString);\n\n          case \"malformed\":\n            return Conversion.toBytes(coercedInput.value.asHex);\n        }\n      }\n  }\n}\n\nexports.encodeBytes = encodeBytes;","map":{"version":3,"sources":["../../../../lib/bytes/encode/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA,UAAA,GAAA,YAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA,C,CAEA;AACA;AACA;;AAEA;;;;AAIG;;;AACH,SAAgB,WAAhB,CACE,KADF,EACoE;AAElE,UAAQ,KAAK,CAAC,IAAN,CAAW,SAAnB;AACE,SAAK,OAAL;AACE,aAAO,UAAU,CAAC,OAAX,CAA8C,KAAM,CAAC,KAAP,CAAa,KAA3D,CAAP;;AACF,SAAK,QAAL;AAAe;AACb,YAAI,YAAY,GACd,KADF;;AAGA,gBAAQ,YAAY,CAAC,KAAb,CAAmB,IAA3B;AACE,eAAK,OAAL;AACE,mBAAO,UAAU,CAAC,aAAX,CAAyB,YAAY,CAAC,KAAb,CAAmB,QAA5C,CAAP;;AACF,eAAK,WAAL;AACE,mBAAO,UAAU,CAAC,OAAX,CAAmB,YAAY,CAAC,KAAb,CAAmB,KAAtC,CAAP;AAJJ;AAMD;AAbH;AAeD;;AAlBD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeBytes = void 0;\nconst Conversion = __importStar(require(\"../../conversion\"));\n//UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n/**\n * Encodes without padding, length, etc!\n *\n * @Category Encoding (low-level)\n */\nfunction encodeBytes(input) {\n    switch (input.type.typeClass) {\n        case \"bytes\":\n            return Conversion.toBytes(input.value.asHex);\n        case \"string\": {\n            let coercedInput = (input);\n            switch (coercedInput.value.kind) {\n                case \"valid\":\n                    return Conversion.stringToBytes(coercedInput.value.asString);\n                case \"malformed\":\n                    return Conversion.toBytes(coercedInput.value.asHex);\n            }\n        }\n    }\n}\nexports.encodeBytes = encodeBytes;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}