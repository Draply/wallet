{"ast":null,"code":"import { DOCUMENT_MODE } from '../common/html.js';\n\nfunction createTextNode(value) {\n  return {\n    nodeName: '#text',\n    value,\n    parentNode: null\n  };\n}\n\nexport const defaultTreeAdapter = {\n  //Node construction\n  createDocument() {\n    return {\n      nodeName: '#document',\n      mode: DOCUMENT_MODE.NO_QUIRKS,\n      childNodes: []\n    };\n  },\n\n  createDocumentFragment() {\n    return {\n      nodeName: '#document-fragment',\n      childNodes: []\n    };\n  },\n\n  createElement(tagName, namespaceURI, attrs) {\n    return {\n      nodeName: tagName,\n      tagName,\n      attrs,\n      namespaceURI,\n      childNodes: [],\n      parentNode: null\n    };\n  },\n\n  createCommentNode(data) {\n    return {\n      nodeName: '#comment',\n      data,\n      parentNode: null\n    };\n  },\n\n  //Tree mutation\n  appendChild(parentNode, newNode) {\n    parentNode.childNodes.push(newNode);\n    newNode.parentNode = parentNode;\n  },\n\n  insertBefore(parentNode, newNode, referenceNode) {\n    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n    parentNode.childNodes.splice(insertionIdx, 0, newNode);\n    newNode.parentNode = parentNode;\n  },\n\n  setTemplateContent(templateElement, contentElement) {\n    templateElement.content = contentElement;\n  },\n\n  getTemplateContent(templateElement) {\n    return templateElement.content;\n  },\n\n  setDocumentType(document, name, publicId, systemId) {\n    const doctypeNode = document.childNodes.find(node => node.nodeName === '#documentType');\n\n    if (doctypeNode) {\n      doctypeNode.name = name;\n      doctypeNode.publicId = publicId;\n      doctypeNode.systemId = systemId;\n    } else {\n      const node = {\n        nodeName: '#documentType',\n        name,\n        publicId,\n        systemId,\n        parentNode: null\n      };\n      defaultTreeAdapter.appendChild(document, node);\n    }\n  },\n\n  setDocumentMode(document, mode) {\n    document.mode = mode;\n  },\n\n  getDocumentMode(document) {\n    return document.mode;\n  },\n\n  detachNode(node) {\n    if (node.parentNode) {\n      const idx = node.parentNode.childNodes.indexOf(node);\n      node.parentNode.childNodes.splice(idx, 1);\n      node.parentNode = null;\n    }\n  },\n\n  insertText(parentNode, text) {\n    if (parentNode.childNodes.length > 0) {\n      const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n\n      if (defaultTreeAdapter.isTextNode(prevNode)) {\n        prevNode.value += text;\n        return;\n      }\n    }\n\n    defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n  },\n\n  insertTextBefore(parentNode, text, referenceNode) {\n    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n\n    if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n      prevNode.value += text;\n    } else {\n      defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n    }\n  },\n\n  adoptAttributes(recipient, attrs) {\n    const recipientAttrsMap = new Set(recipient.attrs.map(attr => attr.name));\n\n    for (let j = 0; j < attrs.length; j++) {\n      if (!recipientAttrsMap.has(attrs[j].name)) {\n        recipient.attrs.push(attrs[j]);\n      }\n    }\n  },\n\n  //Tree traversing\n  getFirstChild(node) {\n    return node.childNodes[0];\n  },\n\n  getChildNodes(node) {\n    return node.childNodes;\n  },\n\n  getParentNode(node) {\n    return node.parentNode;\n  },\n\n  getAttrList(element) {\n    return element.attrs;\n  },\n\n  //Node data\n  getTagName(element) {\n    return element.tagName;\n  },\n\n  getNamespaceURI(element) {\n    return element.namespaceURI;\n  },\n\n  getTextNodeContent(textNode) {\n    return textNode.value;\n  },\n\n  getCommentNodeContent(commentNode) {\n    return commentNode.data;\n  },\n\n  getDocumentTypeNodeName(doctypeNode) {\n    return doctypeNode.name;\n  },\n\n  getDocumentTypeNodePublicId(doctypeNode) {\n    return doctypeNode.publicId;\n  },\n\n  getDocumentTypeNodeSystemId(doctypeNode) {\n    return doctypeNode.systemId;\n  },\n\n  //Node types\n  isTextNode(node) {\n    return node.nodeName === '#text';\n  },\n\n  isCommentNode(node) {\n    return node.nodeName === '#comment';\n  },\n\n  isDocumentTypeNode(node) {\n    return node.nodeName === '#documentType';\n  },\n\n  isElementNode(node) {\n    return Object.prototype.hasOwnProperty.call(node, 'tagName');\n  },\n\n  // Source code location\n  setNodeSourceCodeLocation(node, location) {\n    node.sourceCodeLocation = location;\n  },\n\n  getNodeSourceCodeLocation(node) {\n    return node.sourceCodeLocation;\n  },\n\n  updateNodeSourceCodeLocation(node, endLocation) {\n    node.sourceCodeLocation = { ...node.sourceCodeLocation,\n      ...endLocation\n    };\n  }\n\n};","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/cheerio/node_modules/parse5/dist/tree-adapters/default.js"],"names":["DOCUMENT_MODE","createTextNode","value","nodeName","parentNode","defaultTreeAdapter","createDocument","mode","NO_QUIRKS","childNodes","createDocumentFragment","createElement","tagName","namespaceURI","attrs","createCommentNode","data","appendChild","newNode","push","insertBefore","referenceNode","insertionIdx","indexOf","splice","setTemplateContent","templateElement","contentElement","content","getTemplateContent","setDocumentType","document","name","publicId","systemId","doctypeNode","find","node","setDocumentMode","getDocumentMode","detachNode","idx","insertText","text","length","prevNode","isTextNode","insertTextBefore","adoptAttributes","recipient","recipientAttrsMap","Set","map","attr","j","has","getFirstChild","getChildNodes","getParentNode","getAttrList","element","getTagName","getNamespaceURI","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isCommentNode","isDocumentTypeNode","isElementNode","Object","prototype","hasOwnProperty","call","setNodeSourceCodeLocation","location","sourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation"],"mappings":"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","sourcesContent":["import { DOCUMENT_MODE } from '../common/html.js';\nfunction createTextNode(value) {\n    return {\n        nodeName: '#text',\n        value,\n        parentNode: null,\n    };\n}\nexport const defaultTreeAdapter = {\n    //Node construction\n    createDocument() {\n        return {\n            nodeName: '#document',\n            mode: DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: [],\n        };\n    },\n    createDocumentFragment() {\n        return {\n            nodeName: '#document-fragment',\n            childNodes: [],\n        };\n    },\n    createElement(tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null,\n        };\n    },\n    createCommentNode(data) {\n        return {\n            nodeName: '#comment',\n            data,\n            parentNode: null,\n        };\n    },\n    //Tree mutation\n    appendChild(parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore(parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent(templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent(templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType(document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node) => node.nodeName === '#documentType');\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n                systemId,\n                parentNode: null,\n            };\n            defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode(document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode(document) {\n        return document.mode;\n    },\n    detachNode(node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText(parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n    },\n    insertTextBefore(parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        }\n        else {\n            defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes(recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));\n        for (let j = 0; j < attrs.length; j++) {\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild(node) {\n        return node.childNodes[0];\n    },\n    getChildNodes(node) {\n        return node.childNodes;\n    },\n    getParentNode(node) {\n        return node.parentNode;\n    },\n    getAttrList(element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName(element) {\n        return element.tagName;\n    },\n    getNamespaceURI(element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent(textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent(commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName(doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId(doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId(doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode(node) {\n        return node.nodeName === '#text';\n    },\n    isCommentNode(node) {\n        return node.nodeName === '#comment';\n    },\n    isDocumentTypeNode(node) {\n        return node.nodeName === '#documentType';\n    },\n    isElementNode(node) {\n        return Object.prototype.hasOwnProperty.call(node, 'tagName');\n    },\n    // Source code location\n    setNodeSourceCodeLocation(node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation(node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation(node, endLocation) {\n        node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };\n    },\n};\n//# sourceMappingURL=default.js.map"]},"metadata":{},"sourceType":"module"}