{"ast":null,"code":"import { integer } from './integer.js';\nimport { timeToDateMapper, timeToDateUnmapper } from './_internals/mappers/TimeToDate.js';\nexport function date(constraints) {\n  const intMin = constraints && constraints.min !== undefined ? constraints.min.getTime() : -8640000000000000;\n  const intMax = constraints && constraints.max !== undefined ? constraints.max.getTime() : 8640000000000000;\n  if (Number.isNaN(intMin)) throw new Error('fc.date min must be valid instance of Date');\n  if (Number.isNaN(intMax)) throw new Error('fc.date max must be valid instance of Date');\n  if (intMin > intMax) throw new Error('fc.date max must be greater or equal to min');\n  return integer({\n    min: intMin,\n    max: intMax\n  }).map(timeToDateMapper, timeToDateUnmapper);\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/date.js"],"names":["integer","timeToDateMapper","timeToDateUnmapper","date","constraints","intMin","min","undefined","getTime","intMax","max","Number","isNaN","Error","map"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,gBAAT,EAA2BC,kBAA3B,QAAqD,oCAArD;AACA,OAAO,SAASC,IAAT,CAAcC,WAAd,EAA2B;AAC9B,QAAMC,MAAM,GAAGD,WAAW,IAAIA,WAAW,CAACE,GAAZ,KAAoBC,SAAnC,GAA+CH,WAAW,CAACE,GAAZ,CAAgBE,OAAhB,EAA/C,GAA2E,CAAC,gBAA3F;AACA,QAAMC,MAAM,GAAGL,WAAW,IAAIA,WAAW,CAACM,GAAZ,KAAoBH,SAAnC,GAA+CH,WAAW,CAACM,GAAZ,CAAgBF,OAAhB,EAA/C,GAA2E,gBAA1F;AACA,MAAIG,MAAM,CAACC,KAAP,CAAaP,MAAb,CAAJ,EACI,MAAM,IAAIQ,KAAJ,CAAU,4CAAV,CAAN;AACJ,MAAIF,MAAM,CAACC,KAAP,CAAaH,MAAb,CAAJ,EACI,MAAM,IAAII,KAAJ,CAAU,4CAAV,CAAN;AACJ,MAAIR,MAAM,GAAGI,MAAb,EACI,MAAM,IAAII,KAAJ,CAAU,6CAAV,CAAN;AACJ,SAAOb,OAAO,CAAC;AAAEM,IAAAA,GAAG,EAAED,MAAP;AAAeK,IAAAA,GAAG,EAAED;AAApB,GAAD,CAAP,CAAsCK,GAAtC,CAA0Cb,gBAA1C,EAA4DC,kBAA5D,CAAP;AACH","sourcesContent":["import { integer } from './integer.js';\nimport { timeToDateMapper, timeToDateUnmapper } from './_internals/mappers/TimeToDate.js';\nexport function date(constraints) {\n    const intMin = constraints && constraints.min !== undefined ? constraints.min.getTime() : -8640000000000000;\n    const intMax = constraints && constraints.max !== undefined ? constraints.max.getTime() : 8640000000000000;\n    if (Number.isNaN(intMin))\n        throw new Error('fc.date min must be valid instance of Date');\n    if (Number.isNaN(intMax))\n        throw new Error('fc.date max must be valid instance of Date');\n    if (intMin > intMax)\n        throw new Error('fc.date max must be greater or equal to min');\n    return integer({ min: intMin, max: intMax }).map(timeToDateMapper, timeToDateUnmapper);\n}\n"]},"metadata":{},"sourceType":"module"}