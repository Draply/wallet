{"ast":null,"code":"import { array } from './array.js';\nimport { char } from './char.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\nexport function string() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const charArbitrary = char();\n  const experimentalCustomSlices = createSlicesForString(charArbitrary, codePointsToStringUnmapper);\n  const enrichedConstraints = Object.assign(Object.assign({}, constraints), {\n    experimentalCustomSlices\n  });\n  return array(charArbitrary, enrichedConstraints).map(codePointsToStringMapper, codePointsToStringUnmapper);\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/string.js"],"names":["array","char","codePointsToStringMapper","codePointsToStringUnmapper","createSlicesForString","string","constraints","charArbitrary","experimentalCustomSlices","enrichedConstraints","Object","assign","map"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,wBAAT,EAAmCC,0BAAnC,QAAqE,4CAArE;AACA,SAASC,qBAAT,QAAsC,gDAAtC;AACA,OAAO,SAASC,MAAT,GAAkC;AAAA,MAAlBC,WAAkB,uEAAJ,EAAI;AACrC,QAAMC,aAAa,GAAGN,IAAI,EAA1B;AACA,QAAMO,wBAAwB,GAAGJ,qBAAqB,CAACG,aAAD,EAAgBJ,0BAAhB,CAAtD;AACA,QAAMM,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,WAAlB,CAAd,EAA8C;AAAEE,IAAAA;AAAF,GAA9C,CAA5B;AACA,SAAOR,KAAK,CAACO,aAAD,EAAgBE,mBAAhB,CAAL,CAA0CG,GAA1C,CAA8CV,wBAA9C,EAAwEC,0BAAxE,CAAP;AACH","sourcesContent":["import { array } from './array.js';\nimport { char } from './char.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\nexport function string(constraints = {}) {\n    const charArbitrary = char();\n    const experimentalCustomSlices = createSlicesForString(charArbitrary, codePointsToStringUnmapper);\n    const enrichedConstraints = Object.assign(Object.assign({}, constraints), { experimentalCustomSlices });\n    return array(charArbitrary, enrichedConstraints).map(codePointsToStringMapper, codePointsToStringUnmapper);\n}\n"]},"metadata":{},"sourceType":"module"}