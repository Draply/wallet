{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nimport { depthBiasFromSizeForArbitrary } from './helpers/MaxLengthFromMinLength.js';\nexport class FrequencyArbitrary extends Arbitrary {\n  constructor(warbs, constraints, context) {\n    super();\n    this.warbs = warbs;\n    this.constraints = constraints;\n    this.context = context;\n    let currentWeight = 0;\n    this.cumulatedWeights = [];\n\n    for (let idx = 0; idx !== warbs.length; ++idx) {\n      currentWeight += warbs[idx].weight;\n      this.cumulatedWeights.push(currentWeight);\n    }\n\n    this.totalWeight = currentWeight;\n  }\n\n  static from(warbs, constraints, label) {\n    if (warbs.length === 0) {\n      throw new Error(`${label} expects at least one weighted arbitrary`);\n    }\n\n    let totalWeight = 0;\n\n    for (let idx = 0; idx !== warbs.length; ++idx) {\n      const currentArbitrary = warbs[idx].arbitrary;\n\n      if (currentArbitrary === undefined) {\n        throw new Error(`${label} expects arbitraries to be specified`);\n      }\n\n      const currentWeight = warbs[idx].weight;\n      totalWeight += currentWeight;\n\n      if (!Number.isInteger(currentWeight)) {\n        throw new Error(`${label} expects weights to be integer values`);\n      }\n\n      if (currentWeight < 0) {\n        throw new Error(`${label} expects weights to be superior or equal to 0`);\n      }\n    }\n\n    if (totalWeight <= 0) {\n      throw new Error(`${label} expects the sum of weights to be strictly superior to 0`);\n    }\n\n    const sanitizedConstraints = {\n      depthBias: depthBiasFromSizeForArbitrary(constraints.depthSize, constraints.maxDepth !== undefined),\n      maxDepth: constraints.maxDepth != undefined ? constraints.maxDepth : Number.POSITIVE_INFINITY,\n      withCrossShrink: !!constraints.withCrossShrink\n    };\n    return new FrequencyArbitrary(warbs, sanitizedConstraints, getDepthContextFor(constraints.depthIdentifier));\n  }\n\n  generate(mrng, biasFactor) {\n    if (this.mustGenerateFirst()) {\n      return this.safeGenerateForIndex(mrng, 0, biasFactor);\n    }\n\n    const selected = mrng.nextInt(this.computeNegDepthBenefit(), this.totalWeight - 1);\n\n    for (let idx = 0; idx !== this.cumulatedWeights.length; ++idx) {\n      if (selected < this.cumulatedWeights[idx]) {\n        return this.safeGenerateForIndex(mrng, idx, biasFactor);\n      }\n    }\n\n    throw new Error(`Unable to generate from fc.frequency`);\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.canShrinkWithoutContextIndex(value) !== -1;\n  }\n\n  shrink(value, context) {\n    if (context !== undefined) {\n      const safeContext = context;\n      const selectedIndex = safeContext.selectedIndex;\n      const originalBias = safeContext.originalBias;\n      const originalArbitrary = this.warbs[selectedIndex].arbitrary;\n      const originalShrinks = originalArbitrary.shrink(value, safeContext.originalContext).map(v => this.mapIntoValue(selectedIndex, v, null, originalBias));\n\n      if (safeContext.clonedMrngForFallbackFirst !== null) {\n        if (safeContext.cachedGeneratedForFirst === undefined) {\n          safeContext.cachedGeneratedForFirst = this.safeGenerateForIndex(safeContext.clonedMrngForFallbackFirst, 0, originalBias);\n        }\n\n        const valueFromFirst = safeContext.cachedGeneratedForFirst;\n        return Stream.of(valueFromFirst).join(originalShrinks);\n      }\n\n      return originalShrinks;\n    }\n\n    const potentialSelectedIndex = this.canShrinkWithoutContextIndex(value);\n\n    if (potentialSelectedIndex === -1) {\n      return Stream.nil();\n    }\n\n    return this.defaultShrinkForFirst(potentialSelectedIndex).join(this.warbs[potentialSelectedIndex].arbitrary.shrink(value, undefined).map(v => this.mapIntoValue(potentialSelectedIndex, v, null, undefined)));\n  }\n\n  defaultShrinkForFirst(selectedIndex) {\n    ++this.context.depth;\n\n    try {\n      if (!this.mustFallbackToFirstInShrink(selectedIndex) || this.warbs[0].fallbackValue === undefined) {\n        return Stream.nil();\n      }\n    } finally {\n      --this.context.depth;\n    }\n\n    const rawShrinkValue = new Value(this.warbs[0].fallbackValue.default, undefined);\n    return Stream.of(this.mapIntoValue(0, rawShrinkValue, null, undefined));\n  }\n\n  canShrinkWithoutContextIndex(value) {\n    if (this.mustGenerateFirst()) {\n      return this.warbs[0].arbitrary.canShrinkWithoutContext(value) ? 0 : -1;\n    }\n\n    try {\n      ++this.context.depth;\n\n      for (let idx = 0; idx !== this.warbs.length; ++idx) {\n        const warb = this.warbs[idx];\n\n        if (warb.weight !== 0 && warb.arbitrary.canShrinkWithoutContext(value)) {\n          return idx;\n        }\n      }\n\n      return -1;\n    } finally {\n      --this.context.depth;\n    }\n  }\n\n  mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor) {\n    const context = {\n      selectedIndex: idx,\n      originalBias: biasFactor,\n      originalContext: value.context,\n      clonedMrngForFallbackFirst\n    };\n    return new Value(value.value, context);\n  }\n\n  safeGenerateForIndex(mrng, idx, biasFactor) {\n    ++this.context.depth;\n\n    try {\n      const value = this.warbs[idx].arbitrary.generate(mrng, biasFactor);\n      const clonedMrngForFallbackFirst = this.mustFallbackToFirstInShrink(idx) ? mrng.clone() : null;\n      return this.mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor);\n    } finally {\n      --this.context.depth;\n    }\n  }\n\n  mustGenerateFirst() {\n    return this.constraints.maxDepth <= this.context.depth;\n  }\n\n  mustFallbackToFirstInShrink(idx) {\n    return idx !== 0 && this.constraints.withCrossShrink && this.warbs[0].weight !== 0;\n  }\n\n  computeNegDepthBenefit() {\n    const depthBias = this.constraints.depthBias;\n\n    if (depthBias <= 0 || this.warbs[0].weight === 0) {\n      return 0;\n    }\n\n    const depthBenefit = Math.floor(Math.pow(1 + depthBias, this.context.depth)) - 1;\n    return -Math.min(this.totalWeight * depthBenefit, Number.MAX_SAFE_INTEGER) || 0;\n  }\n\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/FrequencyArbitrary.js"],"names":["Stream","Arbitrary","Value","getDepthContextFor","depthBiasFromSizeForArbitrary","FrequencyArbitrary","constructor","warbs","constraints","context","currentWeight","cumulatedWeights","idx","length","weight","push","totalWeight","from","label","Error","currentArbitrary","arbitrary","undefined","Number","isInteger","sanitizedConstraints","depthBias","depthSize","maxDepth","POSITIVE_INFINITY","withCrossShrink","depthIdentifier","generate","mrng","biasFactor","mustGenerateFirst","safeGenerateForIndex","selected","nextInt","computeNegDepthBenefit","canShrinkWithoutContext","value","canShrinkWithoutContextIndex","shrink","safeContext","selectedIndex","originalBias","originalArbitrary","originalShrinks","originalContext","map","v","mapIntoValue","clonedMrngForFallbackFirst","cachedGeneratedForFirst","valueFromFirst","of","join","potentialSelectedIndex","nil","defaultShrinkForFirst","depth","mustFallbackToFirstInShrink","fallbackValue","rawShrinkValue","default","warb","clone","depthBenefit","Math","floor","pow","min","MAX_SAFE_INTEGER"],"mappings":"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","sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nimport { depthBiasFromSizeForArbitrary } from './helpers/MaxLengthFromMinLength.js';\nexport class FrequencyArbitrary extends Arbitrary {\n    constructor(warbs, constraints, context) {\n        super();\n        this.warbs = warbs;\n        this.constraints = constraints;\n        this.context = context;\n        let currentWeight = 0;\n        this.cumulatedWeights = [];\n        for (let idx = 0; idx !== warbs.length; ++idx) {\n            currentWeight += warbs[idx].weight;\n            this.cumulatedWeights.push(currentWeight);\n        }\n        this.totalWeight = currentWeight;\n    }\n    static from(warbs, constraints, label) {\n        if (warbs.length === 0) {\n            throw new Error(`${label} expects at least one weighted arbitrary`);\n        }\n        let totalWeight = 0;\n        for (let idx = 0; idx !== warbs.length; ++idx) {\n            const currentArbitrary = warbs[idx].arbitrary;\n            if (currentArbitrary === undefined) {\n                throw new Error(`${label} expects arbitraries to be specified`);\n            }\n            const currentWeight = warbs[idx].weight;\n            totalWeight += currentWeight;\n            if (!Number.isInteger(currentWeight)) {\n                throw new Error(`${label} expects weights to be integer values`);\n            }\n            if (currentWeight < 0) {\n                throw new Error(`${label} expects weights to be superior or equal to 0`);\n            }\n        }\n        if (totalWeight <= 0) {\n            throw new Error(`${label} expects the sum of weights to be strictly superior to 0`);\n        }\n        const sanitizedConstraints = {\n            depthBias: depthBiasFromSizeForArbitrary(constraints.depthSize, constraints.maxDepth !== undefined),\n            maxDepth: constraints.maxDepth != undefined ? constraints.maxDepth : Number.POSITIVE_INFINITY,\n            withCrossShrink: !!constraints.withCrossShrink,\n        };\n        return new FrequencyArbitrary(warbs, sanitizedConstraints, getDepthContextFor(constraints.depthIdentifier));\n    }\n    generate(mrng, biasFactor) {\n        if (this.mustGenerateFirst()) {\n            return this.safeGenerateForIndex(mrng, 0, biasFactor);\n        }\n        const selected = mrng.nextInt(this.computeNegDepthBenefit(), this.totalWeight - 1);\n        for (let idx = 0; idx !== this.cumulatedWeights.length; ++idx) {\n            if (selected < this.cumulatedWeights[idx]) {\n                return this.safeGenerateForIndex(mrng, idx, biasFactor);\n            }\n        }\n        throw new Error(`Unable to generate from fc.frequency`);\n    }\n    canShrinkWithoutContext(value) {\n        return this.canShrinkWithoutContextIndex(value) !== -1;\n    }\n    shrink(value, context) {\n        if (context !== undefined) {\n            const safeContext = context;\n            const selectedIndex = safeContext.selectedIndex;\n            const originalBias = safeContext.originalBias;\n            const originalArbitrary = this.warbs[selectedIndex].arbitrary;\n            const originalShrinks = originalArbitrary\n                .shrink(value, safeContext.originalContext)\n                .map((v) => this.mapIntoValue(selectedIndex, v, null, originalBias));\n            if (safeContext.clonedMrngForFallbackFirst !== null) {\n                if (safeContext.cachedGeneratedForFirst === undefined) {\n                    safeContext.cachedGeneratedForFirst = this.safeGenerateForIndex(safeContext.clonedMrngForFallbackFirst, 0, originalBias);\n                }\n                const valueFromFirst = safeContext.cachedGeneratedForFirst;\n                return Stream.of(valueFromFirst).join(originalShrinks);\n            }\n            return originalShrinks;\n        }\n        const potentialSelectedIndex = this.canShrinkWithoutContextIndex(value);\n        if (potentialSelectedIndex === -1) {\n            return Stream.nil();\n        }\n        return this.defaultShrinkForFirst(potentialSelectedIndex).join(this.warbs[potentialSelectedIndex].arbitrary\n            .shrink(value, undefined)\n            .map((v) => this.mapIntoValue(potentialSelectedIndex, v, null, undefined)));\n    }\n    defaultShrinkForFirst(selectedIndex) {\n        ++this.context.depth;\n        try {\n            if (!this.mustFallbackToFirstInShrink(selectedIndex) || this.warbs[0].fallbackValue === undefined) {\n                return Stream.nil();\n            }\n        }\n        finally {\n            --this.context.depth;\n        }\n        const rawShrinkValue = new Value(this.warbs[0].fallbackValue.default, undefined);\n        return Stream.of(this.mapIntoValue(0, rawShrinkValue, null, undefined));\n    }\n    canShrinkWithoutContextIndex(value) {\n        if (this.mustGenerateFirst()) {\n            return this.warbs[0].arbitrary.canShrinkWithoutContext(value) ? 0 : -1;\n        }\n        try {\n            ++this.context.depth;\n            for (let idx = 0; idx !== this.warbs.length; ++idx) {\n                const warb = this.warbs[idx];\n                if (warb.weight !== 0 && warb.arbitrary.canShrinkWithoutContext(value)) {\n                    return idx;\n                }\n            }\n            return -1;\n        }\n        finally {\n            --this.context.depth;\n        }\n    }\n    mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor) {\n        const context = {\n            selectedIndex: idx,\n            originalBias: biasFactor,\n            originalContext: value.context,\n            clonedMrngForFallbackFirst,\n        };\n        return new Value(value.value, context);\n    }\n    safeGenerateForIndex(mrng, idx, biasFactor) {\n        ++this.context.depth;\n        try {\n            const value = this.warbs[idx].arbitrary.generate(mrng, biasFactor);\n            const clonedMrngForFallbackFirst = this.mustFallbackToFirstInShrink(idx) ? mrng.clone() : null;\n            return this.mapIntoValue(idx, value, clonedMrngForFallbackFirst, biasFactor);\n        }\n        finally {\n            --this.context.depth;\n        }\n    }\n    mustGenerateFirst() {\n        return this.constraints.maxDepth <= this.context.depth;\n    }\n    mustFallbackToFirstInShrink(idx) {\n        return idx !== 0 && this.constraints.withCrossShrink && this.warbs[0].weight !== 0;\n    }\n    computeNegDepthBenefit() {\n        const depthBias = this.constraints.depthBias;\n        if (depthBias <= 0 || this.warbs[0].weight === 0) {\n            return 0;\n        }\n        const depthBenefit = Math.floor(Math.pow(1 + depthBias, this.context.depth)) - 1;\n        return -Math.min(this.totalWeight * depthBenefit, Number.MAX_SAFE_INTEGER) || 0;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}