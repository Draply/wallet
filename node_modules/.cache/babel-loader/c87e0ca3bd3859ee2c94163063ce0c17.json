{"ast":null,"code":"import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { oneof } from '../../oneof.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\nimport { uniqueArray } from '../../uniqueArray.js';\nimport { createDepthIdentifier } from '../helpers/DepthContext.js';\n\nfunction mapOf(ka, va, maxKeys, size, depthIdentifier) {\n  return uniqueArray(tuple(ka, va), {\n    maxLength: maxKeys,\n    size,\n    comparator: 'SameValueZero',\n    selector: t => t[0],\n    depthIdentifier\n  }).map(arrayToMapMapper, arrayToMapUnmapper);\n}\n\nfunction dictOf(ka, va, maxKeys, size, depthIdentifier) {\n  return uniqueArray(tuple(ka, va), {\n    maxLength: maxKeys,\n    size,\n    selector: t => t[0],\n    depthIdentifier\n  }).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper);\n}\n\nfunction setOf(va, maxKeys, size, depthIdentifier) {\n  return uniqueArray(va, {\n    maxLength: maxKeys,\n    size,\n    comparator: 'SameValueZero',\n    depthIdentifier\n  }).map(arrayToSetMapper, arrayToSetUnmapper);\n}\n\nfunction prototypeLessOf(objectArb) {\n  return objectArb.map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper);\n}\n\nfunction typedArray(constraints) {\n  return oneof(int8Array(constraints), uint8Array(constraints), uint8ClampedArray(constraints), int16Array(constraints), uint16Array(constraints), int32Array(constraints), uint32Array(constraints), float32Array(constraints), float64Array(constraints));\n}\n\nexport function anyArbitraryBuilder(constraints) {\n  const arbitrariesForBase = constraints.values;\n  const depthSize = constraints.depthSize;\n  const depthIdentifier = createDepthIdentifier();\n  const maxDepth = constraints.maxDepth;\n  const maxKeys = constraints.maxKeys;\n  const size = constraints.size;\n  const baseArb = oneof(...arbitrariesForBase, ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []));\n  return letrec(tie => ({\n    anything: oneof({\n      maxDepth,\n      depthSize,\n      depthIdentifier\n    }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map(o => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withTypedArray ? [typedArray({\n      maxLength: maxKeys,\n      size\n    })] : []), ...(constraints.withSparseArray ? [sparseArray(tie('anything'), {\n      maxNumElements: maxKeys,\n      size,\n      depthIdentifier\n    })] : [])),\n    keys: constraints.withObjectString ? oneof({\n      arbitrary: constraints.key,\n      weight: 10\n    }, {\n      arbitrary: tie('anything').map(o => stringify(o)),\n      weight: 1\n    }) : constraints.key,\n    array: array(tie('anything'), {\n      maxLength: maxKeys,\n      size,\n      depthIdentifier\n    }),\n    set: setOf(tie('anything'), maxKeys, size, depthIdentifier),\n    map: oneof(mapOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier), mapOf(tie('anything'), tie('anything'), maxKeys, size, depthIdentifier)),\n    object: dictOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier)\n  })).anything;\n}","map":{"version":3,"sources":["U:/NFT-Mar/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/AnyArbitraryBuilder.js"],"names":["stringify","array","oneof","tuple","bigInt","date","float32Array","float64Array","int16Array","int32Array","int8Array","uint16Array","uint32Array","uint8Array","uint8ClampedArray","sparseArray","keyValuePairsToObjectMapper","keyValuePairsToObjectUnmapper","arrayToMapMapper","arrayToMapUnmapper","arrayToSetMapper","arrayToSetUnmapper","objectToPrototypeLessMapper","objectToPrototypeLessUnmapper","letrec","uniqueArray","createDepthIdentifier","mapOf","ka","va","maxKeys","size","depthIdentifier","maxLength","comparator","selector","t","map","dictOf","setOf","prototypeLessOf","objectArb","typedArray","constraints","anyArbitraryBuilder","arbitrariesForBase","values","depthSize","maxDepth","baseArb","withBigInt","withDate","tie","anything","withMap","withSet","withObjectString","o","withNullPrototype","withTypedArray","withSparseArray","maxNumElements","keys","arbitrary","key","weight","set","object"],"mappings":"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","sourcesContent":["import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { oneof } from '../../oneof.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\nimport { uniqueArray } from '../../uniqueArray.js';\nimport { createDepthIdentifier } from '../helpers/DepthContext.js';\nfunction mapOf(ka, va, maxKeys, size, depthIdentifier) {\n    return uniqueArray(tuple(ka, va), {\n        maxLength: maxKeys,\n        size,\n        comparator: 'SameValueZero',\n        selector: (t) => t[0],\n        depthIdentifier,\n    }).map(arrayToMapMapper, arrayToMapUnmapper);\n}\nfunction dictOf(ka, va, maxKeys, size, depthIdentifier) {\n    return uniqueArray(tuple(ka, va), {\n        maxLength: maxKeys,\n        size,\n        selector: (t) => t[0],\n        depthIdentifier,\n    }).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper);\n}\nfunction setOf(va, maxKeys, size, depthIdentifier) {\n    return uniqueArray(va, { maxLength: maxKeys, size, comparator: 'SameValueZero', depthIdentifier }).map(arrayToSetMapper, arrayToSetUnmapper);\n}\nfunction prototypeLessOf(objectArb) {\n    return objectArb.map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper);\n}\nfunction typedArray(constraints) {\n    return oneof(int8Array(constraints), uint8Array(constraints), uint8ClampedArray(constraints), int16Array(constraints), uint16Array(constraints), int32Array(constraints), uint32Array(constraints), float32Array(constraints), float64Array(constraints));\n}\nexport function anyArbitraryBuilder(constraints) {\n    const arbitrariesForBase = constraints.values;\n    const depthSize = constraints.depthSize;\n    const depthIdentifier = createDepthIdentifier();\n    const maxDepth = constraints.maxDepth;\n    const maxKeys = constraints.maxKeys;\n    const size = constraints.size;\n    const baseArb = oneof(...arbitrariesForBase, ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []));\n    return letrec((tie) => ({\n        anything: oneof({ maxDepth, depthSize, depthIdentifier }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map((o) => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withTypedArray ? [typedArray({ maxLength: maxKeys, size })] : []), ...(constraints.withSparseArray\n            ? [sparseArray(tie('anything'), { maxNumElements: maxKeys, size, depthIdentifier })]\n            : [])),\n        keys: constraints.withObjectString\n            ? oneof({ arbitrary: constraints.key, weight: 10 }, { arbitrary: tie('anything').map((o) => stringify(o)), weight: 1 })\n            : constraints.key,\n        array: array(tie('anything'), { maxLength: maxKeys, size, depthIdentifier }),\n        set: setOf(tie('anything'), maxKeys, size, depthIdentifier),\n        map: oneof(mapOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier), mapOf(tie('anything'), tie('anything'), maxKeys, size, depthIdentifier)),\n        object: dictOf(tie('keys'), tie('anything'), maxKeys, size, depthIdentifier),\n    })).anything;\n}\n"]},"metadata":{},"sourceType":"module"}